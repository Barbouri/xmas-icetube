
iv.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f4  00800100  000021e4  00002278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  008001f4  008001f4  0000236c  2**0
                  ALLOC
  3 .stab         00004bb4  00000000  00000000  0000236c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001314  00000000  00000000  00006f20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__vector_1>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__vector_3>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__vector_5>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__vector_16>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      58:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      5c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_23>
      60:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      64:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>

00000068 <_ZL10digittable>:
      68:	03 07 08 09 06 0a 05 0c 04                          .........

00000071 <_ZL12segmenttable>:
      71:	0b 10 12 0f 0d 0e 11 13                             ........

00000079 <_ZL10alphatable>:
      79:	fa 3e 1a 7a de 8e f6 2e 60 78 ae 1c aa 2a 3a ce     .>.z....`x...*:.
      89:	f3 0a b6 1e 38 38 b8 6e 76 da                       ....88.nv.

00000093 <_ZL11numbertable>:
      93:	fc 60 da f2 66 b6 be e0 fe e6                       .`..f.....

0000009d <_ZZ13setalarmstatevE3__c>:
      9d:	61 6c 61 72 6d 20 6f 66 66 00                       alarm off.

000000a7 <_ZZ8set_datevE3__c>:
      a7:	53 65 74 20 64 61 79 00                             Set day.

000000af <_ZZ4mainE3__c_8>:
      af:	64 6f 6e 65 00                                      done.

000000b4 <_ZZ4mainE3__c_7>:
      b4:	61 6c 61 72 6d 20 69 6e 69 74 00                    alarm init.

000000bf <_ZZ4mainE3__c_6>:
      bf:	63 6c 6f 63 6b 20 69 6e 69 74 00                    clock init.

000000ca <_ZZ4mainE3__c_5>:
      ca:	73 70 65 61 6b 65 72 20 69 6e 69 74 00              speaker init.

000000d7 <_ZZ4mainE3__c_4>:
      d7:	62 6f 6f 73 74 20 69 6e 69 74 00                    boost init.

000000e2 <_ZZ4mainE3__c_3>:
      e2:	76 66 64 20 69 6e 69 74 00                          vfd init.

000000eb <_ZZ4mainE3__c_2>:
      eb:	74 75 72 6e 69 6e 67 20 6f 6e 20 61 6c 61 72 6d     turning on alarm
      fb:	73 77 00                                            sw.

000000fe <_ZZ4mainE3__c_1>:
      fe:	74 75 72 6e 69 6e 67 20 6f 6e 20 62 75 74 74 6f     turning on butto
     10e:	6e 73 00                                            ns.

00000111 <_ZZ4mainE3__c_0>:
     111:	63 6c 6f 63 6b 20 69 6e 69 74 00                    clock init.

0000011c <_ZZ4mainE3__c>:
     11c:	21 00                                               !.

0000011e <_ZZ6wakeupvE3__c>:
     11e:	77 61 6b 65 74 69 6d 65 00                          waketime.

00000127 <_ZZ11__vector_23E3__c_0>:
     127:	57 41 4b 45 52 45 53 45 54 00                       WAKERESET.

00000131 <_ZZ11__vector_23E3__c>:
     131:	7a 00                                               z.

00000133 <_ZZ10__vector_9E3__c>:
     133:	61 6c 61 72 6d 20 6f 6e 21 00                       alarm on!.

0000013d <_ZZ10__vector_3E3__c>:
     13d:	62 32 00                                            b2.

00000140 <_ZZ10__vector_5E3__c_0>:
     140:	62 33 00                                            b3.

00000143 <_ZZ10__vector_5E3__c>:
     143:	62 31 00                                            b1.

00000146 <_ZZ9setsnoozevE3__c>:
     146:	73 6e 6f 6f 7a 65 00 00                             snooze..

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf ef       	ldi	r28, 0xFF	; 255
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e0       	ldi	r26, 0x00	; 0
     15e:	b1 e0       	ldi	r27, 0x01	; 1
     160:	e4 ee       	ldi	r30, 0xE4	; 228
     162:	f1 e2       	ldi	r31, 0x21	; 33
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	a4 3f       	cpi	r26, 0xF4	; 244
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	12 e0       	ldi	r17, 0x02	; 2
     172:	a4 ef       	ldi	r26, 0xF4	; 244
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a1 32       	cpi	r26, 0x21	; 33
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 bc 0c 	call	0x1978	; 0x1978 <main>
     184:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <_Z7delaymsj>:

// We have a non-blocking delay function, milliseconds is updated by
// an interrupt
volatile uint16_t milliseconds = 0;
void delayms(uint16_t ms) {
  sei();
     18c:	78 94       	sei

  milliseconds = 0;
     18e:	10 92 17 02 	sts	0x0217, r1
     192:	10 92 16 02 	sts	0x0216, r1
  while (milliseconds < ms);
     196:	20 91 16 02 	lds	r18, 0x0216
     19a:	30 91 17 02 	lds	r19, 0x0217
     19e:	28 17       	cp	r18, r24
     1a0:	39 07       	cpc	r19, r25
     1a2:	c8 f3       	brcs	.-14     	; 0x196 <_Z7delaymsj+0xa>
}
     1a4:	08 95       	ret

000001a6 <_Z11pet_the_dogv>:
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void pet_the_dog(void) {
  wdt_reset();
     1a6:	a8 95       	wdr
}
     1a8:	08 95       	ret

000001aa <__vector_23>:
  setalarmstate();
}


// called when external power is lost or restored
ISR(ANALOG_COMP_vect) {
     1aa:	1f 92       	push	r1
     1ac:	0f 92       	push	r0
     1ae:	0f b6       	in	r0, 0x3f	; 63
     1b0:	0f 92       	push	r0
     1b2:	11 24       	eor	r1, r1
     1b4:	2f 93       	push	r18
     1b6:	3f 93       	push	r19
     1b8:	4f 93       	push	r20
     1ba:	5f 93       	push	r21
     1bc:	6f 93       	push	r22
     1be:	7f 93       	push	r23
     1c0:	8f 93       	push	r24
     1c2:	9f 93       	push	r25
     1c4:	af 93       	push	r26
     1c6:	bf 93       	push	r27
     1c8:	ef 93       	push	r30
     1ca:	ff 93       	push	r31
  //DEBUGP("COMP");
  if (ACSR & _BV(ACO)) {
     1cc:	00 b6       	in	r0, 0x30	; 48
     1ce:	05 fe       	sbrs	r0, 5
     1d0:	28 c0       	rjmp	.+80     	; 0x222 <__vector_23+0x78>
    //DEBUGP("HIGH");
    if (!sleepmode) {
     1d2:	80 91 03 02 	lds	r24, 0x0203
     1d6:	88 23       	and	r24, r24
     1d8:	09 f0       	breq	.+2      	; 0x1dc <__vector_23+0x32>
     1da:	41 c0       	rjmp	.+130    	; 0x25e <__vector_23+0xb4>
      VFDSWITCH_PORT |= _BV(VFDSWITCH); // turn off display
     1dc:	5b 9a       	sbi	0x0b, 3	; 11
      VFDCLK_PORT &= ~_BV(VFDCLK) & ~_BV(VFDDATA); // no power to vfdchip
     1de:	85 b1       	in	r24, 0x05	; 5
     1e0:	87 7d       	andi	r24, 0xD7	; 215
     1e2:	85 b9       	out	0x05, r24	; 5
      BOOST_PORT &= ~_BV(BOOST); // pull boost fet low
     1e4:	5e 98       	cbi	0x0b, 6	; 11
      SPCR  &= ~_BV(SPE); // turn off spi
     1e6:	8c b5       	in	r24, 0x2c	; 44
     1e8:	8f 7b       	andi	r24, 0xBF	; 191
     1ea:	8c bd       	out	0x2c, r24	; 44
      if (restored) {
     1ec:	80 91 05 02 	lds	r24, 0x0205
     1f0:	88 23       	and	r24, r24
     1f2:	61 f0       	breq	.+24     	; 0x20c <__vector_23+0x62>
	eeprom_write_byte((uint8_t *)EE_MIN, time_m);
     1f4:	60 91 f8 01 	lds	r22, 0x01F8
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
	eeprom_write_byte((uint8_t *)EE_SEC, time_s);
     200:	60 91 f7 01 	lds	r22, 0x01F7
     204:	86 e0       	ldi	r24, 0x06	; 6
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
      }
      DEBUGP("z");
     20c:	81 e3       	ldi	r24, 0x31	; 49
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	61 e0       	ldi	r22, 0x01	; 1
     212:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
      TCCR0B = 0; // no boost
     216:	15 bc       	out	0x25, r1	; 37
      volume = 0; // low power buzzer
     218:	10 92 fd 01 	sts	0x01FD, r1
      PCICR = 0;  // ignore buttons
     21c:	10 92 68 00 	sts	0x0068, r1
     220:	19 c0       	rjmp	.+50     	; 0x254 <__vector_23+0xaa>

      app_start();
    }
  } else {
    //DEBUGP("LOW");
    if (sleepmode) {
     222:	80 91 03 02 	lds	r24, 0x0203
     226:	88 23       	and	r24, r24
     228:	d1 f0       	breq	.+52     	; 0x25e <__vector_23+0xb4>
      if (restored) {
     22a:	80 91 05 02 	lds	r24, 0x0205
     22e:	88 23       	and	r24, r24
     230:	61 f0       	breq	.+24     	; 0x24a <__vector_23+0xa0>
	eeprom_write_byte((uint8_t *)EE_MIN, time_m);
     232:	60 91 f8 01 	lds	r22, 0x01F8
     236:	85 e0       	ldi	r24, 0x05	; 5
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
	eeprom_write_byte((uint8_t *)EE_SEC, time_s);
     23e:	60 91 f7 01 	lds	r22, 0x01F7
     242:	86 e0       	ldi	r24, 0x06	; 6
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
      }
      DEBUGP("WAKERESET"); 
     24a:	87 e2       	ldi	r24, 0x27	; 39
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	61 e0       	ldi	r22, 0x01	; 1
     250:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
      app_start();
     254:	e0 91 f4 01 	lds	r30, 0x01F4
     258:	f0 91 f5 01 	lds	r31, 0x01F5
     25c:	09 95       	icall
    }
  }
}
     25e:	ff 91       	pop	r31
     260:	ef 91       	pop	r30
     262:	bf 91       	pop	r27
     264:	af 91       	pop	r26
     266:	9f 91       	pop	r25
     268:	8f 91       	pop	r24
     26a:	7f 91       	pop	r23
     26c:	6f 91       	pop	r22
     26e:	5f 91       	pop	r21
     270:	4f 91       	pop	r20
     272:	3f 91       	pop	r19
     274:	2f 91       	pop	r18
     276:	0f 90       	pop	r0
     278:	0f be       	out	0x3f, r0	; 63
     27a:	0f 90       	pop	r0
     27c:	1f 90       	pop	r1
     27e:	18 95       	reti

00000280 <_Z9gotosleepv>:
  // battery
  //if (sleepmode) //already asleep?
  //  return;
  //DEBUGP("sleeptime");
  
  sleepmode = 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 03 02 	sts	0x0203, r24
  VFDSWITCH_PORT |= _BV(VFDSWITCH); // turn off display
     286:	5b 9a       	sbi	0x0b, 3	; 11
  SPCR  &= ~_BV(SPE); // turn off spi
     288:	8c b5       	in	r24, 0x2c	; 44
     28a:	8f 7b       	andi	r24, 0xBF	; 191
     28c:	8c bd       	out	0x2c, r24	; 44
  VFDCLK_PORT &= ~_BV(VFDCLK) & ~_BV(VFDDATA); // no power to vfdchip
     28e:	85 b1       	in	r24, 0x05	; 5
     290:	87 7d       	andi	r24, 0xD7	; 215
     292:	85 b9       	out	0x05, r24	; 5
  BOOST_PORT &= ~_BV(BOOST); // pull boost fet low
     294:	5e 98       	cbi	0x0b, 6	; 11
  TCCR0B = 0; // no boost
     296:	15 bc       	out	0x25, r1	; 37
  volume = 0; // low power buzzer
     298:	10 92 fd 01 	sts	0x01FD, r1
  PCICR = 0;  // ignore buttons
     29c:	10 92 68 00 	sts	0x0068, r1
  // sleep time!
  //beep(3520, 1);
  //beep(1760, 1);
  //beep(880, 1);
  // turn beeper off
  PORTB &= ~_BV(SPK1) & ~_BV(SPK2); 
     2a0:	85 b1       	in	r24, 0x05	; 5
     2a2:	89 7f       	andi	r24, 0xF9	; 249
     2a4:	85 b9       	out	0x05, r24	; 5
  
  // turn off pullups
  PORTD &= ~_BV(BUTTON1) & ~_BV(BUTTON3);
     2a6:	8b b1       	in	r24, 0x0b	; 11
     2a8:	8f 7c       	andi	r24, 0xCF	; 207
     2aa:	8b b9       	out	0x0b, r24	; 11
  PORTB &= ~_BV(BUTTON2);
     2ac:	28 98       	cbi	0x05, 0	; 5
  DDRD &= ~_BV(BUTTON1) & ~_BV(BUTTON3);
     2ae:	8a b1       	in	r24, 0x0a	; 10
     2b0:	8f 7c       	andi	r24, 0xCF	; 207
     2b2:	8a b9       	out	0x0a, r24	; 10
  DDRB &= ~_BV(BUTTON2);
     2b4:	20 98       	cbi	0x04, 0	; 4
  ALARM_PORT &= ~_BV(ALARM);
     2b6:	5a 98       	cbi	0x0b, 2	; 11
  ALARM_DDR &= ~_BV(ALARM);
     2b8:	52 98       	cbi	0x0a, 2	; 10
  

  // reduce the clock speed
  CLKPR = _BV(CLKPCE);
     2ba:	e1 e6       	ldi	r30, 0x61	; 97
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	90 e8       	ldi	r25, 0x80	; 128
     2c0:	90 83       	st	Z, r25
  CLKPR = _BV(CLKPS3);
     2c2:	88 e0       	ldi	r24, 0x08	; 8
     2c4:	80 83       	st	Z, r24
  
  //  PPR |= _BV(PRUSART0) | _BV(PRADC) | _BV(PRSPI) | _BV(PRTIM1) | _BV(PRTIM0) | _BV(PRTWI);
  PORTC |= _BV(4);  // sleep signal
     2c6:	44 9a       	sbi	0x08, 4	; 8
  SMCR |= _BV(SM1) | _BV(SM0) | _BV(SE); // sleep mode
     2c8:	83 b7       	in	r24, 0x33	; 51
     2ca:	87 60       	ori	r24, 0x07	; 7
     2cc:	83 bf       	out	0x33, r24	; 51
  asm("sleep"); 
     2ce:	88 95       	sleep
  CLKPR = _BV(CLKPCE);
     2d0:	90 83       	st	Z, r25
  CLKPR = 0;
     2d2:	10 82       	st	Z, r1
  PORTC &= ~_BV(4);
     2d4:	44 98       	cbi	0x08, 4	; 8
}
     2d6:	08 95       	ret

000002d8 <_Z11initbuttonsv>:
   pet_the_dog();
 }


void initbuttons(void) {
    DDRB =  _BV(VFDCLK) | _BV(VFDDATA) | _BV(SPK1) | _BV(SPK2);
     2d8:	8e e2       	ldi	r24, 0x2E	; 46
     2da:	84 b9       	out	0x04, r24	; 4
    DDRD = _BV(BOOST) | _BV(VFDSWITCH);
     2dc:	88 e4       	ldi	r24, 0x48	; 72
     2de:	8a b9       	out	0x0a, r24	; 10
    DDRC = _BV(VFDLOAD) | _BV(VFDBLANK) | _BV(4);
     2e0:	89 e1       	ldi	r24, 0x19	; 25
     2e2:	87 b9       	out	0x07, r24	; 7
    PORTD = _BV(BUTTON1) | _BV(BUTTON3) | _BV(ALARM);
     2e4:	84 e3       	ldi	r24, 0x34	; 52
     2e6:	8b b9       	out	0x0b, r24	; 11
    PORTB = _BV(BUTTON2);
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	85 b9       	out	0x05, r24	; 5

    PCICR = _BV(PCIE0) | _BV(PCIE2);
     2ec:	95 e0       	ldi	r25, 0x05	; 5
     2ee:	90 93 68 00 	sts	0x0068, r25
    PCMSK0 = _BV(PCINT0);
     2f2:	80 93 6b 00 	sts	0x006B, r24
    PCMSK2 = _BV(PCINT21) | _BV(PCINT20);    
     2f6:	80 e3       	ldi	r24, 0x30	; 48
     2f8:	80 93 6d 00 	sts	0x006D, r24
}
     2fc:	08 95       	ret

000002fe <_Z10clock_initv>:
}
*/


/**************************** RTC & ALARM *****************************/
void clock_init(void) {
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
  // we store the time in EEPROM when switching from power modes so its
  // reasonable to start with whats in memory
  time_h = eeprom_read_byte((uint8_t *)EE_HOUR) % 24;
     302:	84 e0       	ldi	r24, 0x04	; 4
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
     30a:	08 e1       	ldi	r16, 0x18	; 24
     30c:	60 2f       	mov	r22, r16
     30e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     312:	90 93 f9 01 	sts	0x01F9, r25
  time_m = eeprom_read_byte((uint8_t *)EE_MIN) % 60;
     316:	85 e0       	ldi	r24, 0x05	; 5
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
     31e:	1c e3       	ldi	r17, 0x3C	; 60
     320:	61 2f       	mov	r22, r17
     322:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     326:	90 93 f8 01 	sts	0x01F8, r25
  time_s = eeprom_read_byte((uint8_t *)EE_SEC) % 60;
     32a:	86 e0       	ldi	r24, 0x06	; 6
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
     332:	61 2f       	mov	r22, r17
     334:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     338:	90 93 f7 01 	sts	0x01F7, r25
  time_m = TIMEMIN;
  time_s = TIMESEC + 10;
  */

  // Set up the stored alarm time and date
  alarm_m = eeprom_read_byte((uint8_t *)EE_ALARM_MIN) % 60;
     33c:	88 e0       	ldi	r24, 0x08	; 8
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
     344:	61 2f       	mov	r22, r17
     346:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     34a:	90 93 01 02 	sts	0x0201, r25
  alarm_h = eeprom_read_byte((uint8_t *)EE_ALARM_HOUR) % 24;
     34e:	87 e0       	ldi	r24, 0x07	; 7
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
     356:	60 2f       	mov	r22, r16
     358:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     35c:	90 93 00 02 	sts	0x0200, r25

  date_y = eeprom_read_byte((uint8_t *)EE_YEAR) % 100;
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
     368:	64 e6       	ldi	r22, 0x64	; 100
     36a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     36e:	90 93 fc 01 	sts	0x01FC, r25
  date_m = eeprom_read_byte((uint8_t *)EE_MONTH) % 13;
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
     37a:	6d e0       	ldi	r22, 0x0D	; 13
     37c:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     380:	90 93 fa 01 	sts	0x01FA, r25
  date_d = eeprom_read_byte((uint8_t *)EE_DAY) % 32;
     384:	83 e0       	ldi	r24, 0x03	; 3
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
     38c:	8f 71       	andi	r24, 0x1F	; 31
     38e:	80 93 fb 01 	sts	0x01FB, r24

  restored = 1;
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	90 93 05 02 	sts	0x0205, r25

  // Turn on the RTC by selecting the external 32khz crystal
  // 32.768 / 128 = 256 which is exactly an 8-bit timer overflow
  ASSR |= _BV(AS2); // use crystal
     398:	e6 eb       	ldi	r30, 0xB6	; 182
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	80 81       	ld	r24, Z
     39e:	80 62       	ori	r24, 0x20	; 32
     3a0:	80 83       	st	Z, r24
  TCCR2B = _BV(CS22) | _BV(CS20); // div by 128
     3a2:	85 e0       	ldi	r24, 0x05	; 5
     3a4:	80 93 b1 00 	sts	0x00B1, r24
  // We will overflow once a second, and call an interrupt

  // enable interrupt
  TIMSK2 = _BV(TOIE2);
     3a8:	90 93 70 00 	sts	0x0070, r25

  // enable all interrupts!
  sei();
     3ac:	78 94       	sei
}
     3ae:	1f 91       	pop	r17
     3b0:	0f 91       	pop	r16
     3b2:	08 95       	ret

000003b4 <_Z8leapyearj>:
  }
}

// This will calculate leapyears, give it the year
// and it will return 1 (true) or 0 (false)
uint8_t leapyear(uint16_t y) {
     3b4:	9c 01       	movw	r18, r24
  return ( (!(y % 4) && (y % 100)) || !(y % 400));
     3b6:	83 70       	andi	r24, 0x03	; 3
     3b8:	90 70       	andi	r25, 0x00	; 0
     3ba:	00 97       	sbiw	r24, 0x00	; 0
     3bc:	39 f4       	brne	.+14     	; 0x3cc <_Z8leapyearj+0x18>
     3be:	c9 01       	movw	r24, r18
     3c0:	64 e6       	ldi	r22, 0x64	; 100
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	0e 94 76 10 	call	0x20ec	; 0x20ec <__udivmodhi4>
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	61 f4       	brne	.+24     	; 0x3e4 <_Z8leapyearj+0x30>
     3cc:	c9 01       	movw	r24, r18
     3ce:	60 e9       	ldi	r22, 0x90	; 144
     3d0:	71 e0       	ldi	r23, 0x01	; 1
     3d2:	0e 94 76 10 	call	0x20ec	; 0x20ec <__udivmodhi4>
     3d6:	9c 01       	movw	r18, r24
  }
}

// This will calculate leapyears, give it the year
// and it will return 1 (true) or 0 (false)
uint8_t leapyear(uint16_t y) {
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	21 15       	cp	r18, r1
     3dc:	31 05       	cpc	r19, r1
     3de:	19 f0       	breq	.+6      	; 0x3e6 <_Z8leapyearj+0x32>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	08 95       	ret
  return ( (!(y % 4) && (y % 100)) || !(y % 400));
     3e4:	81 e0       	ldi	r24, 0x01	; 1
}
     3e6:	08 95       	ret

000003e8 <_Z12speaker_initv>:
/**************************** SPEAKER *****************************/
// Set up the speaker to prepare for beeping!
void speaker_init(void) {

  // read the preferences for high/low volume
  volume = eeprom_read_byte((uint8_t *)EE_VOLUME);
     3e8:	8a e0       	ldi	r24, 0x0A	; 10
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
     3f0:	80 93 fd 01 	sts	0x01FD, r24

  // We use the built-in fast PWM, 8 bit timer
  PORTB |= _BV(SPK1) | _BV(SPK2); 
     3f4:	85 b1       	in	r24, 0x05	; 5
     3f6:	86 60       	ori	r24, 0x06	; 6
     3f8:	85 b9       	out	0x05, r24	; 5

  // Turn on PWM outputs for both pins
  TCCR1A = _BV(COM1B1) | _BV(COM1B0) | _BV(WGM11);
     3fa:	82 e3       	ldi	r24, 0x32	; 50
     3fc:	80 93 80 00 	sts	0x0080, r24
  if (volume) {
     400:	80 91 fd 01 	lds	r24, 0x01FD
     404:	88 23       	and	r24, r24
     406:	29 f0       	breq	.+10     	; 0x412 <_Z12speaker_initv+0x2a>
    TCCR1A |= _BV(COM1A1);
     408:	80 91 80 00 	lds	r24, 0x0080
     40c:	80 68       	ori	r24, 0x80	; 128
     40e:	80 93 80 00 	sts	0x0080, r24
  } 
  TCCR1B = _BV(WGM13) | _BV(WGM12);
     412:	88 e1       	ldi	r24, 0x18	; 24
     414:	80 93 81 00 	sts	0x0081, r24

  // start at 4khz:  250 * 8 multiplier * 4000 = 8mhz
  ICR1 = 250;
     418:	8a ef       	ldi	r24, 0xFA	; 250
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	90 93 87 00 	sts	0x0087, r25
     420:	80 93 86 00 	sts	0x0086, r24
  OCR1B = OCR1A = ICR1 / 2;
     424:	80 91 86 00 	lds	r24, 0x0086
     428:	90 91 87 00 	lds	r25, 0x0087
     42c:	96 95       	lsr	r25
     42e:	87 95       	ror	r24
     430:	90 93 89 00 	sts	0x0089, r25
     434:	80 93 88 00 	sts	0x0088, r24
     438:	80 91 88 00 	lds	r24, 0x0088
     43c:	90 91 89 00 	lds	r25, 0x0089
     440:	90 93 8b 00 	sts	0x008B, r25
     444:	80 93 8a 00 	sts	0x008A, r24
}
     448:	08 95       	ret

0000044a <_Z4tickv>:

// This makes the speaker tick, it doesnt use PWM
// instead it just flicks the piezo
void tick(void) {
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
  TCCR1A = 0;
     452:	00 e8       	ldi	r16, 0x80	; 128
     454:	10 e0       	ldi	r17, 0x00	; 0
     456:	f8 01       	movw	r30, r16
     458:	10 82       	st	Z, r1
  TCCR1B = 0;
     45a:	c1 e8       	ldi	r28, 0x81	; 129
     45c:	d0 e0       	ldi	r29, 0x00	; 0
     45e:	18 82       	st	Y, r1

  // Send a pulse thru both pins, alternating
  SPK_PORT |= _BV(SPK1);
     460:	29 9a       	sbi	0x05, 1	; 5
  SPK_PORT &= ~_BV(SPK2);
     462:	2a 98       	cbi	0x05, 2	; 5
  delayms(10);
     464:	8a e0       	ldi	r24, 0x0A	; 10
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
  SPK_PORT |= _BV(SPK2);
     46c:	2a 9a       	sbi	0x05, 2	; 5
  SPK_PORT &= ~_BV(SPK1);
     46e:	29 98       	cbi	0x05, 1	; 5
  delayms(10);
     470:	8a e0       	ldi	r24, 0x0A	; 10
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
  // turn them both off
  SPK_PORT &= ~_BV(SPK1) & ~_BV(SPK2);
     478:	85 b1       	in	r24, 0x05	; 5
     47a:	89 7f       	andi	r24, 0xF9	; 249
     47c:	85 b9       	out	0x05, r24	; 5

  TCCR1A = _BV(COM1A1) | _BV(COM1B1) | _BV(COM1B0) | _BV(WGM11);
     47e:	82 eb       	ldi	r24, 0xB2	; 178
     480:	f8 01       	movw	r30, r16
     482:	80 83       	st	Z, r24
  TCCR1B = _BV(WGM13) | _BV(WGM12);
     484:	88 e1       	ldi	r24, 0x18	; 24
     486:	88 83       	st	Y, r24
}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	08 95       	ret

00000492 <_Z4beepjh>:

// We can play short beeps!
void beep(uint16_t freq, uint8_t times) {
     492:	1f 93       	push	r17
     494:	16 2f       	mov	r17, r22
  // set the PWM output to match the desired frequency
  ICR1 = (F_CPU/8)/freq;
     496:	9c 01       	movw	r18, r24
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	60 e4       	ldi	r22, 0x40	; 64
     49e:	72 e4       	ldi	r23, 0x42	; 66
     4a0:	8f e0       	ldi	r24, 0x0F	; 15
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 bf 10 	call	0x217e	; 0x217e <__divmodsi4>
     4a8:	30 93 87 00 	sts	0x0087, r19
     4ac:	20 93 86 00 	sts	0x0086, r18
  // we want 50% duty cycle square wave
  OCR1A = OCR1B = ICR1/2;
     4b0:	80 91 86 00 	lds	r24, 0x0086
     4b4:	90 91 87 00 	lds	r25, 0x0087
     4b8:	96 95       	lsr	r25
     4ba:	87 95       	ror	r24
     4bc:	90 93 8b 00 	sts	0x008B, r25
     4c0:	80 93 8a 00 	sts	0x008A, r24
     4c4:	80 91 8a 00 	lds	r24, 0x008A
     4c8:	90 91 8b 00 	lds	r25, 0x008B
     4cc:	90 93 89 00 	sts	0x0089, r25
     4d0:	80 93 88 00 	sts	0x0088, r24
   
  while (times--) {
     4d4:	20 c0       	rjmp	.+64     	; 0x516 <_Z4beepjh+0x84>
    TCCR1B |= _BV(CS11); // turn it on!
     4d6:	80 91 81 00 	lds	r24, 0x0081
     4da:	82 60       	ori	r24, 0x02	; 2
     4dc:	80 93 81 00 	sts	0x0081, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e0:	8f ef       	ldi	r24, 0xFF	; 255
     4e2:	91 ee       	ldi	r25, 0xE1	; 225
     4e4:	a4 e0       	ldi	r26, 0x04	; 4
     4e6:	81 50       	subi	r24, 0x01	; 1
     4e8:	90 40       	sbci	r25, 0x00	; 0
     4ea:	a0 40       	sbci	r26, 0x00	; 0
     4ec:	e1 f7       	brne	.-8      	; 0x4e6 <_Z4beepjh+0x54>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <_Z4beepjh+0x5e>
     4f0:	00 00       	nop
    // beeps are 200ms long on
    _delay_ms(200);
    TCCR1B &= ~_BV(CS11); // turn it off!
     4f2:	80 91 81 00 	lds	r24, 0x0081
     4f6:	8d 7f       	andi	r24, 0xFD	; 253
     4f8:	80 93 81 00 	sts	0x0081, r24
    PORTB &= ~_BV(SPK1) & ~_BV(SPK2);
     4fc:	85 b1       	in	r24, 0x05	; 5
     4fe:	89 7f       	andi	r24, 0xF9	; 249
     500:	85 b9       	out	0x05, r24	; 5
     502:	8f ef       	ldi	r24, 0xFF	; 255
     504:	91 ee       	ldi	r25, 0xE1	; 225
     506:	a4 e0       	ldi	r26, 0x04	; 4
     508:	81 50       	subi	r24, 0x01	; 1
     50a:	90 40       	sbci	r25, 0x00	; 0
     50c:	a0 40       	sbci	r26, 0x00	; 0
     50e:	e1 f7       	brne	.-8      	; 0x508 <_Z4beepjh+0x76>
     510:	00 c0       	rjmp	.+0      	; 0x512 <_Z4beepjh+0x80>
     512:	00 00       	nop
     514:	11 50       	subi	r17, 0x01	; 1
  // set the PWM output to match the desired frequency
  ICR1 = (F_CPU/8)/freq;
  // we want 50% duty cycle square wave
  OCR1A = OCR1B = ICR1/2;
   
  while (times--) {
     516:	11 23       	and	r17, r17
     518:	f1 f6       	brne	.-68     	; 0x4d6 <_Z4beepjh+0x44>
    PORTB &= ~_BV(SPK1) & ~_BV(SPK2);
    // beeps are 200ms long off
    _delay_ms(200);
  }
  // turn speaker off
  PORTB &= ~_BV(SPK1) & ~_BV(SPK2);
     51a:	85 b1       	in	r24, 0x05	; 5
     51c:	89 7f       	andi	r24, 0xF9	; 249
     51e:	85 b9       	out	0x05, r24	; 5
}
     520:	1f 91       	pop	r17
     522:	08 95       	ret

00000524 <_Z10boost_inith>:
// We control the boost converter by changing the PWM output
// pins
void boost_init(uint8_t brightness) {
  // Set PWM value, don't set it so high that
  // we could damage the MAX chip or display
  if (brightness > 90)
     524:	8b 35       	cpi	r24, 0x5B	; 91
     526:	90 f5       	brcc	.+100    	; 0x58c <_Z10boost_inith+0x68>
    brightness = 90;

  // Or so low its not visible
  if (brightness < 30)
     528:	8e 31       	cpi	r24, 0x1E	; 30
     52a:	10 f0       	brcs	.+4      	; 0x530 <_Z10boost_inith+0xc>
    brightness = 30;

  if (brightness <= 30) {
     52c:	8e 31       	cpi	r24, 0x1E	; 30
     52e:	11 f4       	brne	.+4      	; 0x534 <_Z10boost_inith+0x10>
    OCR0A = 30; 
     530:	8e e1       	ldi	r24, 0x1E	; 30
     532:	2d c0       	rjmp	.+90     	; 0x58e <_Z10boost_inith+0x6a>
  } else if (brightness <= 35) {
     534:	84 32       	cpi	r24, 0x24	; 36
     536:	10 f4       	brcc	.+4      	; 0x53c <_Z10boost_inith+0x18>
    OCR0A = 35;
     538:	83 e2       	ldi	r24, 0x23	; 35
     53a:	29 c0       	rjmp	.+82     	; 0x58e <_Z10boost_inith+0x6a>
  } else if (brightness <= 40) {
     53c:	89 32       	cpi	r24, 0x29	; 41
     53e:	10 f4       	brcc	.+4      	; 0x544 <_Z10boost_inith+0x20>
    OCR0A = 40;
     540:	88 e2       	ldi	r24, 0x28	; 40
     542:	25 c0       	rjmp	.+74     	; 0x58e <_Z10boost_inith+0x6a>
  } else if (brightness <= 45) {
     544:	8e 32       	cpi	r24, 0x2E	; 46
     546:	10 f4       	brcc	.+4      	; 0x54c <_Z10boost_inith+0x28>
    OCR0A = 45;
     548:	8d e2       	ldi	r24, 0x2D	; 45
     54a:	21 c0       	rjmp	.+66     	; 0x58e <_Z10boost_inith+0x6a>
  } else if (brightness <= 50) {
     54c:	83 33       	cpi	r24, 0x33	; 51
     54e:	10 f4       	brcc	.+4      	; 0x554 <_Z10boost_inith+0x30>
    OCR0A = 50;
     550:	82 e3       	ldi	r24, 0x32	; 50
     552:	1d c0       	rjmp	.+58     	; 0x58e <_Z10boost_inith+0x6a>
  } else if (brightness <= 55) {
     554:	88 33       	cpi	r24, 0x38	; 56
     556:	10 f4       	brcc	.+4      	; 0x55c <_Z10boost_inith+0x38>
    OCR0A = 55;
     558:	87 e3       	ldi	r24, 0x37	; 55
     55a:	19 c0       	rjmp	.+50     	; 0x58e <_Z10boost_inith+0x6a>
  } else if (brightness <= 60) {
     55c:	8d 33       	cpi	r24, 0x3D	; 61
     55e:	10 f4       	brcc	.+4      	; 0x564 <_Z10boost_inith+0x40>
    OCR0A = 60;
     560:	8c e3       	ldi	r24, 0x3C	; 60
     562:	15 c0       	rjmp	.+42     	; 0x58e <_Z10boost_inith+0x6a>
  } else if (brightness <= 65) {
     564:	82 34       	cpi	r24, 0x42	; 66
     566:	10 f4       	brcc	.+4      	; 0x56c <_Z10boost_inith+0x48>
    OCR0A = 65;
     568:	81 e4       	ldi	r24, 0x41	; 65
     56a:	11 c0       	rjmp	.+34     	; 0x58e <_Z10boost_inith+0x6a>
  } else if (brightness <= 70) {
     56c:	87 34       	cpi	r24, 0x47	; 71
     56e:	10 f4       	brcc	.+4      	; 0x574 <_Z10boost_inith+0x50>
    OCR0A = 70;
     570:	86 e4       	ldi	r24, 0x46	; 70
     572:	0d c0       	rjmp	.+26     	; 0x58e <_Z10boost_inith+0x6a>
  } else if (brightness <= 75) {
     574:	8c 34       	cpi	r24, 0x4C	; 76
     576:	10 f4       	brcc	.+4      	; 0x57c <_Z10boost_inith+0x58>
    OCR0A = 75;
     578:	8b e4       	ldi	r24, 0x4B	; 75
     57a:	09 c0       	rjmp	.+18     	; 0x58e <_Z10boost_inith+0x6a>
  } else if (brightness <= 80) {
     57c:	81 35       	cpi	r24, 0x51	; 81
     57e:	10 f4       	brcc	.+4      	; 0x584 <_Z10boost_inith+0x60>
    OCR0A = 80;
     580:	80 e5       	ldi	r24, 0x50	; 80
     582:	05 c0       	rjmp	.+10     	; 0x58e <_Z10boost_inith+0x6a>
  } else if (brightness <= 85) {
     584:	86 35       	cpi	r24, 0x56	; 86
     586:	10 f4       	brcc	.+4      	; 0x58c <_Z10boost_inith+0x68>
    OCR0A = 85;
     588:	85 e5       	ldi	r24, 0x55	; 85
     58a:	01 c0       	rjmp	.+2      	; 0x58e <_Z10boost_inith+0x6a>
  } else if (brightness <= 90) {
    OCR0A = 90;
     58c:	8a e5       	ldi	r24, 0x5A	; 90
     58e:	87 bd       	out	0x27, r24	; 39
  } else {
    OCR0A = 30;
  }

  // fast PWM, set OC0A (boost output pin) on match
  TCCR0A = _BV(WGM00) | _BV(WGM01);  
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	84 bd       	out	0x24, r24	; 36

  // Use the fastest clock
  TCCR0B = _BV(CS00);
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	85 bd       	out	0x25, r24	; 37
 
  TCCR0A |= _BV(COM0A1);
     598:	84 b5       	in	r24, 0x24	; 36
     59a:	80 68       	ori	r24, 0x80	; 128
     59c:	84 bd       	out	0x24, r24	; 36
  TIMSK0 |= _BV(TOIE0); // turn on the interrupt for muxing
     59e:	80 91 6e 00 	lds	r24, 0x006E
     5a2:	81 60       	ori	r24, 0x01	; 1
     5a4:	80 93 6e 00 	sts	0x006E, r24
  sei();
     5a8:	78 94       	sei
}
     5aa:	08 95       	ret

000005ac <_Z12display_timehhh>:
    
  }
}

// This displays a time on the clock
void display_time(uint8_t h, uint8_t m, uint8_t s) {
     5ac:	1f 93       	push	r17
     5ae:	18 2f       	mov	r17, r24
     5b0:	26 2f       	mov	r18, r22
     5b2:	84 2f       	mov	r24, r20
  
  // seconds and minutes are at the end
  display[8] =  pgm_read_byte(numbertable + (s % 10));
     5b4:	3a e0       	ldi	r19, 0x0A	; 10
     5b6:	63 2f       	mov	r22, r19
     5b8:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     5bc:	e9 2f       	mov	r30, r25
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	ed 56       	subi	r30, 0x6D	; 109
     5c2:	ff 4f       	sbci	r31, 0xFF	; 255
     5c4:	e4 91       	lpm	r30, Z+
     5c6:	e0 93 0e 02 	sts	0x020E, r30
  display[7] =  pgm_read_byte(numbertable + (s / 10));
     5ca:	e8 2f       	mov	r30, r24
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	ed 56       	subi	r30, 0x6D	; 109
     5d0:	ff 4f       	sbci	r31, 0xFF	; 255
     5d2:	e4 91       	lpm	r30, Z+
     5d4:	e0 93 0d 02 	sts	0x020D, r30
  display[6] = 0;
     5d8:	10 92 0c 02 	sts	0x020C, r1
  display[5] =  pgm_read_byte(numbertable + (m % 10));
     5dc:	82 2f       	mov	r24, r18
     5de:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     5e2:	e9 2f       	mov	r30, r25
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	ed 56       	subi	r30, 0x6D	; 109
     5e8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ea:	e4 91       	lpm	r30, Z+
     5ec:	e0 93 0b 02 	sts	0x020B, r30
  display[4] =  pgm_read_byte(numbertable + (m / 10)); 
     5f0:	e8 2f       	mov	r30, r24
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	ed 56       	subi	r30, 0x6D	; 109
     5f6:	ff 4f       	sbci	r31, 0xFF	; 255
     5f8:	e4 91       	lpm	r30, Z+
     5fa:	e0 93 0a 02 	sts	0x020A, r30
  display[3] = 0;
     5fe:	10 92 09 02 	sts	0x0209, r1

  // check euro (24h) or US (12h) style time
  if (region == REGION_US) {
     602:	80 91 f6 01 	lds	r24, 0x01F6
     606:	88 23       	and	r24, r24
     608:	39 f5       	brne	.+78     	; 0x658 <_Z12display_timehhh+0xac>
    display[2] =  pgm_read_byte(numbertable + ( (((h+11)%12)+1) % 10));
     60a:	81 2f       	mov	r24, r17
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0b 96       	adiw	r24, 0x0b	; 11
     610:	6c e0       	ldi	r22, 0x0C	; 12
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
     618:	9c 01       	movw	r18, r24
     61a:	2f 5f       	subi	r18, 0xFF	; 255
     61c:	3f 4f       	sbci	r19, 0xFF	; 255
     61e:	c9 01       	movw	r24, r18
     620:	6a e0       	ldi	r22, 0x0A	; 10
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
     628:	fc 01       	movw	r30, r24
     62a:	ed 56       	subi	r30, 0x6D	; 109
     62c:	ff 4f       	sbci	r31, 0xFF	; 255
     62e:	e4 91       	lpm	r30, Z+
     630:	e0 93 08 02 	sts	0x0208, r30
    display[1] =  pgm_read_byte(numbertable + ( (((h+11)%12)+1) / 10));
     634:	6d 56       	subi	r22, 0x6D	; 109
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	fb 01       	movw	r30, r22
     63a:	64 91       	lpm	r22, Z+
     63c:	60 93 07 02 	sts	0x0207, r22

    // We use the '*' as an am/pm notice
    if (h >= 12)
     640:	1c 30       	cpi	r17, 0x0C	; 12
     642:	20 f0       	brcs	.+8      	; 0x64c <_Z12display_timehhh+0xa0>
      display[0] |= 0x1;  // 'pm' notice
     644:	80 91 06 02 	lds	r24, 0x0206
     648:	81 60       	ori	r24, 0x01	; 1
     64a:	03 c0       	rjmp	.+6      	; 0x652 <_Z12display_timehhh+0xa6>
    else 
      display[0] &= ~0x1;  // 'pm' notice
     64c:	80 91 06 02 	lds	r24, 0x0206
     650:	8e 7f       	andi	r24, 0xFE	; 254
     652:	80 93 06 02 	sts	0x0206, r24
     656:	16 c0       	rjmp	.+44     	; 0x684 <_Z12display_timehhh+0xd8>
  } else {
    display[2] =  pgm_read_byte(numbertable + ( (h%24) % 10));
     658:	81 2f       	mov	r24, r17
     65a:	68 e1       	ldi	r22, 0x18	; 24
     65c:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     660:	89 2f       	mov	r24, r25
     662:	63 2f       	mov	r22, r19
     664:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     668:	e9 2f       	mov	r30, r25
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	ed 56       	subi	r30, 0x6D	; 109
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	e4 91       	lpm	r30, Z+
     672:	e0 93 08 02 	sts	0x0208, r30
    display[1] =  pgm_read_byte(numbertable + ( (h%24) / 10));
     676:	e8 2f       	mov	r30, r24
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	ed 56       	subi	r30, 0x6D	; 109
     67c:	ff 4f       	sbci	r31, 0xFF	; 255
     67e:	e4 91       	lpm	r30, Z+
     680:	e0 93 07 02 	sts	0x0207, r30
  }
}
     684:	1f 91       	pop	r17
     686:	08 95       	ret

00000688 <_Z8set_timev>:
    }
  }
}

void set_time(void) 
{
     688:	8f 92       	push	r8
     68a:	9f 92       	push	r9
     68c:	bf 92       	push	r11
     68e:	cf 92       	push	r12
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	df 93       	push	r29
     69c:	cf 93       	push	r28
     69e:	0f 92       	push	r0
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
  uint8_t mode;
  uint8_t hour, min, sec;
    
  hour = time_h;
     6a4:	d0 90 f9 01 	lds	r13, 0x01F9
  min = time_m;
     6a8:	e0 90 f8 01 	lds	r14, 0x01F8
  sec = time_s;
     6ac:	f0 90 f7 01 	lds	r15, 0x01F7
  mode = SHOW_MENU;

  timeoutcounter = INACTIVITYTIMEOUT;
     6b0:	8a e0       	ldi	r24, 0x0A	; 10
     6b2:	80 93 1c 02 	sts	0x021C, r24
  uint8_t hour, min, sec;
    
  hour = time_h;
  min = time_m;
  sec = time_s;
  mode = SHOW_MENU;
     6b6:	20 e0       	ldi	r18, 0x00	; 0
  while (1) {
    if (just_pressed & 0x1) { // mode change
      return;
    }
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;  
     6b8:	5a e0       	ldi	r21, 0x0A	; 10
     6ba:	c5 2e       	mov	r12, r21
	display[5] |= 0x1;
	eeprom_write_byte((uint8_t *)EE_MIN, time_m);
	time_m = min;
      }
      if ((mode == SET_SEC) ) {
	sec = (sec+1) % 60;
     6bc:	4c e3       	ldi	r20, 0x3C	; 60
     6be:	84 2e       	mov	r8, r20
     6c0:	91 2c       	mov	r9, r1
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
      just_pressed = 0;
      
      if (mode == SET_HOUR) {
	hour = (hour+1) % 24;
     6c2:	08 e1       	ldi	r16, 0x18	; 24
     6c4:	10 e0       	ldi	r17, 0x00	; 0
  mode = SHOW_MENU;

  timeoutcounter = INACTIVITYTIMEOUT;
  
  while (1) {
    if (just_pressed & 0x1) { // mode change
     6c6:	80 91 19 02 	lds	r24, 0x0219
     6ca:	80 fd       	sbrc	r24, 0
     6cc:	d6 c0       	rjmp	.+428    	; 0x87a <_Z8set_timev+0x1f2>
      return;
    }
    if (just_pressed || pressed) {
     6ce:	80 91 19 02 	lds	r24, 0x0219
     6d2:	88 23       	and	r24, r24
     6d4:	29 f4       	brne	.+10     	; 0x6e0 <_Z8set_timev+0x58>
     6d6:	80 91 1a 02 	lds	r24, 0x021A
     6da:	88 23       	and	r24, r24
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <_Z8set_timev+0x58>
     6de:	c7 c0       	rjmp	.+398    	; 0x86e <_Z8set_timev+0x1e6>
      timeoutcounter = INACTIVITYTIMEOUT;  
     6e0:	c0 92 1c 02 	sts	0x021C, r12
    } else if (!timeoutcounter) {
      //timed out!
      displaymode = SHOW_TIME;     
      return;
    }
    if (just_pressed & 0x2) {
     6e4:	80 91 19 02 	lds	r24, 0x0219
     6e8:	81 ff       	sbrs	r24, 1
     6ea:	4a c0       	rjmp	.+148    	; 0x780 <_Z8set_timev+0xf8>
      just_pressed = 0;
     6ec:	10 92 19 02 	sts	0x0219, r1
      if (mode == SHOW_MENU) {
     6f0:	22 23       	and	r18, r18
     6f2:	b9 f4       	brne	.+46     	; 0x722 <_Z8set_timev+0x9a>
	hour = time_h;
     6f4:	d0 90 f9 01 	lds	r13, 0x01F9
	min = time_m;
     6f8:	e0 90 f8 01 	lds	r14, 0x01F8
	sec = time_s;
     6fc:	f0 90 f7 01 	lds	r15, 0x01F7

	// ok now its selected
	mode = SET_HOUR;
	display_time(hour, min, sec);
     700:	8d 2d       	mov	r24, r13
     702:	6e 2d       	mov	r22, r14
     704:	4f 2d       	mov	r20, r15
     706:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z12display_timehhh>
	display[1] |= 0x1;
     70a:	80 91 07 02 	lds	r24, 0x0207
     70e:	81 60       	ori	r24, 0x01	; 1
     710:	80 93 07 02 	sts	0x0207, r24
	display[2] |= 0x1;	
     714:	80 91 08 02 	lds	r24, 0x0208
     718:	81 60       	ori	r24, 0x01	; 1
     71a:	80 93 08 02 	sts	0x0208, r24
	hour = time_h;
	min = time_m;
	sec = time_s;

	// ok now its selected
	mode = SET_HOUR;
     71e:	21 e0       	ldi	r18, 0x01	; 1
     720:	2f c0       	rjmp	.+94     	; 0x780 <_Z8set_timev+0xf8>
	display_time(hour, min, sec);
	display[1] |= 0x1;
	display[2] |= 0x1;	
      } else if (mode == SET_HOUR) {
     722:	21 30       	cpi	r18, 0x01	; 1
     724:	89 f4       	brne	.+34     	; 0x748 <_Z8set_timev+0xc0>
	mode = SET_MIN;
	display_time(hour, min, sec);
     726:	8d 2d       	mov	r24, r13
     728:	6e 2d       	mov	r22, r14
     72a:	4f 2d       	mov	r20, r15
     72c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z12display_timehhh>
	display[4] |= 0x1;
     730:	80 91 0a 02 	lds	r24, 0x020A
     734:	81 60       	ori	r24, 0x01	; 1
     736:	80 93 0a 02 	sts	0x020A, r24
	display[5] |= 0x1;
     73a:	80 91 0b 02 	lds	r24, 0x020B
     73e:	81 60       	ori	r24, 0x01	; 1
     740:	80 93 0b 02 	sts	0x020B, r24
	mode = SET_HOUR;
	display_time(hour, min, sec);
	display[1] |= 0x1;
	display[2] |= 0x1;	
      } else if (mode == SET_HOUR) {
	mode = SET_MIN;
     744:	22 e0       	ldi	r18, 0x02	; 2
     746:	1c c0       	rjmp	.+56     	; 0x780 <_Z8set_timev+0xf8>
	display_time(hour, min, sec);
	display[4] |= 0x1;
	display[5] |= 0x1;
      } else if (mode == SET_MIN) {
     748:	22 30       	cpi	r18, 0x02	; 2
     74a:	89 f4       	brne	.+34     	; 0x76e <_Z8set_timev+0xe6>
	mode = SET_SEC;
	display_time(hour, min, sec);
     74c:	8d 2d       	mov	r24, r13
     74e:	6e 2d       	mov	r22, r14
     750:	4f 2d       	mov	r20, r15
     752:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z12display_timehhh>
	display[7] |= 0x1;
     756:	80 91 0d 02 	lds	r24, 0x020D
     75a:	81 60       	ori	r24, 0x01	; 1
     75c:	80 93 0d 02 	sts	0x020D, r24
	display[8] |= 0x1;
     760:	80 91 0e 02 	lds	r24, 0x020E
     764:	81 60       	ori	r24, 0x01	; 1
     766:	80 93 0e 02 	sts	0x020E, r24
	mode = SET_MIN;
	display_time(hour, min, sec);
	display[4] |= 0x1;
	display[5] |= 0x1;
      } else if (mode == SET_MIN) {
	mode = SET_SEC;
     76a:	23 e0       	ldi	r18, 0x03	; 3
     76c:	09 c0       	rjmp	.+18     	; 0x780 <_Z8set_timev+0xf8>
	display_time(hour, min, sec);
	display[7] |= 0x1;
	display[8] |= 0x1;
      } else {
	// done!
	time_h = hour;
     76e:	d0 92 f9 01 	sts	0x01F9, r13
	time_m = min;
     772:	e0 92 f8 01 	sts	0x01F8, r14
	time_s = sec;
     776:	f0 92 f7 01 	sts	0x01F7, r15
	displaymode = SHOW_TIME;
     77a:	10 92 02 02 	sts	0x0202, r1
     77e:	7d c0       	rjmp	.+250    	; 0x87a <_Z8set_timev+0x1f2>
	return;
      }
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
     780:	80 91 19 02 	lds	r24, 0x0219
     784:	82 fd       	sbrc	r24, 2
     786:	04 c0       	rjmp	.+8      	; 0x790 <_Z8set_timev+0x108>
     788:	80 91 1a 02 	lds	r24, 0x021A
     78c:	82 ff       	sbrs	r24, 2
     78e:	9b cf       	rjmp	.-202    	; 0x6c6 <_Z8set_timev+0x3e>
      just_pressed = 0;
     790:	10 92 19 02 	sts	0x0219, r1
      
      if (mode == SET_HOUR) {
     794:	21 30       	cpi	r18, 0x01	; 1
     796:	01 f5       	brne	.+64     	; 0x7d8 <_Z8set_timev+0x150>
	hour = (hour+1) % 24;
     798:	8d 2d       	mov	r24, r13
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	b8 01       	movw	r22, r16
     7a0:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
     7a4:	b8 2e       	mov	r11, r24
     7a6:	d8 2e       	mov	r13, r24
	display_time(hour, min, sec);
     7a8:	6e 2d       	mov	r22, r14
     7aa:	4f 2d       	mov	r20, r15
     7ac:	29 83       	std	Y+1, r18	; 0x01
     7ae:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z12display_timehhh>
	display[1] |= 0x1;
     7b2:	80 91 07 02 	lds	r24, 0x0207
     7b6:	81 60       	ori	r24, 0x01	; 1
     7b8:	80 93 07 02 	sts	0x0207, r24
	display[2] |= 0x1;
     7bc:	80 91 08 02 	lds	r24, 0x0208
     7c0:	81 60       	ori	r24, 0x01	; 1
     7c2:	80 93 08 02 	sts	0x0208, r24
	time_h = hour;
     7c6:	b0 92 f9 01 	sts	0x01F9, r11
	eeprom_write_byte((uint8_t *)EE_HOUR, time_h);    
     7ca:	60 91 f9 01 	lds	r22, 0x01F9
     7ce:	84 e0       	ldi	r24, 0x04	; 4
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
     7d6:	3f c0       	rjmp	.+126    	; 0x856 <_Z8set_timev+0x1ce>
      }
      if (mode == SET_MIN) {
     7d8:	22 30       	cpi	r18, 0x02	; 2
     7da:	09 f5       	brne	.+66     	; 0x81e <_Z8set_timev+0x196>
	min = (min+1) % 60;
     7dc:	8e 2d       	mov	r24, r14
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	b4 01       	movw	r22, r8
     7e4:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
     7e8:	b8 2e       	mov	r11, r24
     7ea:	e8 2e       	mov	r14, r24
	display_time(hour, min, sec);
     7ec:	8d 2d       	mov	r24, r13
     7ee:	6b 2d       	mov	r22, r11
     7f0:	4f 2d       	mov	r20, r15
     7f2:	29 83       	std	Y+1, r18	; 0x01
     7f4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z12display_timehhh>
	display[4] |= 0x1;
     7f8:	80 91 0a 02 	lds	r24, 0x020A
     7fc:	81 60       	ori	r24, 0x01	; 1
     7fe:	80 93 0a 02 	sts	0x020A, r24
	display[5] |= 0x1;
     802:	80 91 0b 02 	lds	r24, 0x020B
     806:	81 60       	ori	r24, 0x01	; 1
     808:	80 93 0b 02 	sts	0x020B, r24
	eeprom_write_byte((uint8_t *)EE_MIN, time_m);
     80c:	60 91 f8 01 	lds	r22, 0x01F8
     810:	85 e0       	ldi	r24, 0x05	; 5
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
	time_m = min;
     818:	b0 92 f8 01 	sts	0x01F8, r11
     81c:	1c c0       	rjmp	.+56     	; 0x856 <_Z8set_timev+0x1ce>
      }
      if ((mode == SET_SEC) ) {
     81e:	23 30       	cpi	r18, 0x03	; 3
     820:	d9 f4       	brne	.+54     	; 0x858 <_Z8set_timev+0x1d0>
	sec = (sec+1) % 60;
     822:	8f 2d       	mov	r24, r15
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	b4 01       	movw	r22, r8
     82a:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
     82e:	b8 2e       	mov	r11, r24
     830:	f8 2e       	mov	r15, r24
	display_time(hour, min, sec);
     832:	8d 2d       	mov	r24, r13
     834:	6e 2d       	mov	r22, r14
     836:	4b 2d       	mov	r20, r11
     838:	29 83       	std	Y+1, r18	; 0x01
     83a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z12display_timehhh>
	display[7] |= 0x1;
     83e:	80 91 0d 02 	lds	r24, 0x020D
     842:	81 60       	ori	r24, 0x01	; 1
     844:	80 93 0d 02 	sts	0x020D, r24
	display[8] |= 0x1;
     848:	80 91 0e 02 	lds	r24, 0x020E
     84c:	81 60       	ori	r24, 0x01	; 1
     84e:	80 93 0e 02 	sts	0x020E, r24
	time_s = sec;
     852:	b0 92 f7 01 	sts	0x01F7, r11
     856:	29 81       	ldd	r18, Y+1	; 0x01
      }
      
      if (pressed & 0x4)
     858:	80 91 1a 02 	lds	r24, 0x021A
     85c:	82 ff       	sbrs	r24, 2
     85e:	33 cf       	rjmp	.-410    	; 0x6c6 <_Z8set_timev+0x3e>
	delayms(75);
     860:	8b e4       	ldi	r24, 0x4B	; 75
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	29 83       	std	Y+1, r18	; 0x01
     866:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
     86a:	29 81       	ldd	r18, Y+1	; 0x01
     86c:	2c cf       	rjmp	.-424    	; 0x6c6 <_Z8set_timev+0x3e>
      return;
    }
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;  
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
     86e:	80 91 1c 02 	lds	r24, 0x021C
     872:	88 23       	and	r24, r24
     874:	09 f0       	breq	.+2      	; 0x878 <_Z8set_timev+0x1f0>
     876:	36 cf       	rjmp	.-404    	; 0x6e4 <_Z8set_timev+0x5c>
     878:	80 cf       	rjmp	.-256    	; 0x77a <_Z8set_timev+0xf2>
      
      if (pressed & 0x4)
	delayms(75);
    }
  }
}
     87a:	0f 90       	pop	r0
     87c:	cf 91       	pop	r28
     87e:	df 91       	pop	r29
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	bf 90       	pop	r11
     88e:	9f 90       	pop	r9
     890:	8f 90       	pop	r8
     892:	08 95       	ret

00000894 <_Z13display_alarmhh>:
    display[1] =  pgm_read_byte(numbertable + ( (h%24) / 10));
  }
}

// Kinda like display_time but just hours and minutes
void display_alarm(uint8_t h, uint8_t m){ 
     894:	28 2f       	mov	r18, r24
     896:	86 2f       	mov	r24, r22
  display[8] = 0;
     898:	10 92 0e 02 	sts	0x020E, r1
  display[7] = 0;
     89c:	10 92 0d 02 	sts	0x020D, r1
  display[6] = 0;
     8a0:	10 92 0c 02 	sts	0x020C, r1
  display[5] = pgm_read_byte(numbertable + (m % 10));
     8a4:	6a e0       	ldi	r22, 0x0A	; 10
     8a6:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     8aa:	e9 2f       	mov	r30, r25
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	ed 56       	subi	r30, 0x6D	; 109
     8b0:	ff 4f       	sbci	r31, 0xFF	; 255
     8b2:	e4 91       	lpm	r30, Z+
     8b4:	e0 93 0b 02 	sts	0x020B, r30
  display[4] = pgm_read_byte(numbertable + (m / 10)); 
     8b8:	e8 2f       	mov	r30, r24
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	ed 56       	subi	r30, 0x6D	; 109
     8be:	ff 4f       	sbci	r31, 0xFF	; 255
     8c0:	e4 91       	lpm	r30, Z+
     8c2:	e0 93 0a 02 	sts	0x020A, r30
  display[3] = 0;
     8c6:	10 92 09 02 	sts	0x0209, r1

  // check euro or US style time
  if (region == REGION_US) {
     8ca:	80 91 f6 01 	lds	r24, 0x01F6
     8ce:	88 23       	and	r24, r24
     8d0:	11 f5       	brne	.+68     	; 0x916 <__stack+0x17>
    if (h >= 12) {
     8d2:	2c 30       	cpi	r18, 0x0C	; 12
     8d4:	58 f0       	brcs	.+22     	; 0x8ec <_Z13display_alarmhh+0x58>
      display[0] |= 0x1;  // 'pm' notice
     8d6:	80 91 06 02 	lds	r24, 0x0206
     8da:	81 60       	ori	r24, 0x01	; 1
     8dc:	80 93 06 02 	sts	0x0206, r24
      display[7] = pgm_read_byte(alphatable + 'p' - 'a');
     8e0:	e8 e8       	ldi	r30, 0x88	; 136
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	e4 91       	lpm	r30, Z+
     8e6:	e0 93 0d 02 	sts	0x020D, r30
     8ea:	0a c0       	rjmp	.+20     	; 0x900 <__stack+0x1>
    } else {
      display[7] = pgm_read_byte(alphatable + 'a' - 'a');
     8ec:	e9 e7       	ldi	r30, 0x79	; 121
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	e4 91       	lpm	r30, Z+
     8f2:	e0 93 0d 02 	sts	0x020D, r30
      display[0] &= ~0x1;  // 'am' notice
     8f6:	80 91 06 02 	lds	r24, 0x0206
     8fa:	8e 7f       	andi	r24, 0xFE	; 254
     8fc:	80 93 06 02 	sts	0x0206, r24
    }
    display[8] = pgm_read_byte(alphatable + 'm' - 'a');
     900:	e5 e8       	ldi	r30, 0x85	; 133
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	e4 91       	lpm	r30, Z+
     906:	e0 93 0e 02 	sts	0x020E, r30

    display[2] =  pgm_read_byte(numbertable + ( (((h+11)%12)+1) % 10));
     90a:	82 2f       	mov	r24, r18
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0b 96       	adiw	r24, 0x0b	; 11
     910:	6c e0       	ldi	r22, 0x0C	; 12
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	05 c0       	rjmp	.+10     	; 0x920 <__stack+0x21>
    display[1] =  pgm_read_byte(numbertable + ( (((h+11)%12)+1) / 10));
  } else {
      display[2] =  pgm_read_byte(numbertable + ( (((h+23)%24)+1) % 10));
     916:	82 2f       	mov	r24, r18
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	47 96       	adiw	r24, 0x17	; 23
     91c:	68 e1       	ldi	r22, 0x18	; 24
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	6a e0       	ldi	r22, 0x0A	; 10
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
     92e:	fc 01       	movw	r30, r24
     930:	ed 56       	subi	r30, 0x6D	; 109
     932:	ff 4f       	sbci	r31, 0xFF	; 255
     934:	e4 91       	lpm	r30, Z+
     936:	e0 93 08 02 	sts	0x0208, r30
    display[1] =  pgm_read_byte(numbertable + ( (((h+23)%24)+1) / 10));
     93a:	6d 56       	subi	r22, 0x6D	; 109
     93c:	7f 4f       	sbci	r23, 0xFF	; 255
     93e:	fb 01       	movw	r30, r22
     940:	64 91       	lpm	r22, Z+
     942:	60 93 07 02 	sts	0x0207, r22
     946:	08 95       	ret

00000948 <_Z9set_alarmv>:
}

/**************************** SUB-MENUS *****************************/

void set_alarm(void) 
{
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	df 92       	push	r13
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	df 93       	push	r29
     958:	cf 93       	push	r28
     95a:	0f 92       	push	r0
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
  uint8_t hour, min, sec;
    
  hour = min = sec = 0;
  mode = SHOW_MENU;

  hour = alarm_h;
     960:	e0 90 00 02 	lds	r14, 0x0200
  min = alarm_m;
     964:	d0 90 01 02 	lds	r13, 0x0201
  sec = 0;
  
  timeoutcounter = INACTIVITYTIMEOUT;
     968:	8a e0       	ldi	r24, 0x0A	; 10
     96a:	80 93 1c 02 	sts	0x021C, r24
{
  uint8_t mode;
  uint8_t hour, min, sec;
    
  hour = min = sec = 0;
  mode = SHOW_MENU;
     96e:	40 e0       	ldi	r20, 0x00	; 0
  while (1) {
    if (just_pressed & 0x1) { // mode change
      return;
    }
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;  
     970:	7a e0       	ldi	r23, 0x0A	; 10
     972:	f7 2e       	mov	r15, r23
	display_alarm(hour, min);
	display[1] |= 0x1;
	display[2] |= 0x1;
      }
      if (mode == SET_MIN) {
	min = (min+1) % 60;
     974:	6c e3       	ldi	r22, 0x3C	; 60
     976:	a6 2e       	mov	r10, r22
     978:	b1 2c       	mov	r11, r1
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
      just_pressed = 0;

      if (mode == SET_HOUR) {
	hour = (hour+1) % 24;
     97a:	08 e1       	ldi	r16, 0x18	; 24
     97c:	10 e0       	ldi	r17, 0x00	; 0
  sec = 0;
  
  timeoutcounter = INACTIVITYTIMEOUT;
  
  while (1) {
    if (just_pressed & 0x1) { // mode change
     97e:	80 91 19 02 	lds	r24, 0x0219
     982:	80 fd       	sbrc	r24, 0
     984:	a8 c0       	rjmp	.+336    	; 0xad6 <_Z9set_alarmv+0x18e>
      return;
    }
    if (just_pressed || pressed) {
     986:	80 91 19 02 	lds	r24, 0x0219
     98a:	88 23       	and	r24, r24
     98c:	29 f4       	brne	.+10     	; 0x998 <_Z9set_alarmv+0x50>
     98e:	80 91 1a 02 	lds	r24, 0x021A
     992:	88 23       	and	r24, r24
     994:	09 f4       	brne	.+2      	; 0x998 <_Z9set_alarmv+0x50>
     996:	99 c0       	rjmp	.+306    	; 0xaca <_Z9set_alarmv+0x182>
      timeoutcounter = INACTIVITYTIMEOUT;  
     998:	f0 92 1c 02 	sts	0x021C, r15
     99c:	13 c0       	rjmp	.+38     	; 0x9c4 <_Z9set_alarmv+0x7c>
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
      //timed out!
      displaymode = SHOW_TIME;     
     99e:	10 92 02 02 	sts	0x0202, r1
      alarm_h = hour;
     9a2:	e0 92 00 02 	sts	0x0200, r14
      alarm_m = min;
     9a6:	d0 92 01 02 	sts	0x0201, r13
      eeprom_write_byte((uint8_t *)EE_ALARM_HOUR, alarm_h);    
     9aa:	60 91 00 02 	lds	r22, 0x0200
     9ae:	87 e0       	ldi	r24, 0x07	; 7
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
      eeprom_write_byte((uint8_t *)EE_ALARM_MIN, alarm_m);    
     9b6:	60 91 01 02 	lds	r22, 0x0201
     9ba:	88 e0       	ldi	r24, 0x08	; 8
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
      return;
     9c2:	89 c0       	rjmp	.+274    	; 0xad6 <_Z9set_alarmv+0x18e>
    }
    if (just_pressed & 0x2) {
     9c4:	80 91 19 02 	lds	r24, 0x0219
     9c8:	81 ff       	sbrs	r24, 1
     9ca:	39 c0       	rjmp	.+114    	; 0xa3e <_Z9set_alarmv+0xf6>
      just_pressed = 0;
     9cc:	10 92 19 02 	sts	0x0219, r1
      if (mode == SHOW_MENU) {
     9d0:	44 23       	and	r20, r20
     9d2:	81 f4       	brne	.+32     	; 0x9f4 <_Z9set_alarmv+0xac>
	// ok now its selected
	mode = SET_HOUR;
	display_alarm(hour, min);
     9d4:	8e 2d       	mov	r24, r14
     9d6:	6d 2d       	mov	r22, r13
     9d8:	0e 94 4a 04 	call	0x894	; 0x894 <_Z13display_alarmhh>
	display[1] |= 0x1;
     9dc:	80 91 07 02 	lds	r24, 0x0207
     9e0:	81 60       	ori	r24, 0x01	; 1
     9e2:	80 93 07 02 	sts	0x0207, r24
	display[2] |= 0x1;	
     9e6:	80 91 08 02 	lds	r24, 0x0208
     9ea:	81 60       	ori	r24, 0x01	; 1
     9ec:	80 93 08 02 	sts	0x0208, r24
    }
    if (just_pressed & 0x2) {
      just_pressed = 0;
      if (mode == SHOW_MENU) {
	// ok now its selected
	mode = SET_HOUR;
     9f0:	41 e0       	ldi	r20, 0x01	; 1
     9f2:	25 c0       	rjmp	.+74     	; 0xa3e <_Z9set_alarmv+0xf6>
	display_alarm(hour, min);
	display[1] |= 0x1;
	display[2] |= 0x1;	
      } else if (mode == SET_HOUR) {
     9f4:	41 30       	cpi	r20, 0x01	; 1
     9f6:	81 f4       	brne	.+32     	; 0xa18 <_Z9set_alarmv+0xd0>
	mode = SET_MIN;
	display_alarm(hour, min);
     9f8:	8e 2d       	mov	r24, r14
     9fa:	6d 2d       	mov	r22, r13
     9fc:	0e 94 4a 04 	call	0x894	; 0x894 <_Z13display_alarmhh>
	display[4] |= 0x1;
     a00:	80 91 0a 02 	lds	r24, 0x020A
     a04:	81 60       	ori	r24, 0x01	; 1
     a06:	80 93 0a 02 	sts	0x020A, r24
	display[5] |= 0x1;
     a0a:	80 91 0b 02 	lds	r24, 0x020B
     a0e:	81 60       	ori	r24, 0x01	; 1
     a10:	80 93 0b 02 	sts	0x020B, r24
	mode = SET_HOUR;
	display_alarm(hour, min);
	display[1] |= 0x1;
	display[2] |= 0x1;	
      } else if (mode == SET_HOUR) {
	mode = SET_MIN;
     a14:	42 e0       	ldi	r20, 0x02	; 2
     a16:	13 c0       	rjmp	.+38     	; 0xa3e <_Z9set_alarmv+0xf6>
	display_alarm(hour, min);
	display[4] |= 0x1;
	display[5] |= 0x1;
      } else {
	// done!
	alarm_h = hour;
     a18:	e0 92 00 02 	sts	0x0200, r14
	alarm_m = min;
     a1c:	d0 92 01 02 	sts	0x0201, r13
	eeprom_write_byte((uint8_t *)EE_ALARM_HOUR, alarm_h);    
     a20:	60 91 00 02 	lds	r22, 0x0200
     a24:	87 e0       	ldi	r24, 0x07	; 7
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
	eeprom_write_byte((uint8_t *)EE_ALARM_MIN, alarm_m);    
     a2c:	60 91 01 02 	lds	r22, 0x0201
     a30:	88 e0       	ldi	r24, 0x08	; 8
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
	displaymode = SHOW_TIME;
     a38:	10 92 02 02 	sts	0x0202, r1
     a3c:	4c c0       	rjmp	.+152    	; 0xad6 <_Z9set_alarmv+0x18e>
	return;
      }
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
     a3e:	80 91 19 02 	lds	r24, 0x0219
     a42:	82 fd       	sbrc	r24, 2
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <_Z9set_alarmv+0x106>
     a46:	80 91 1a 02 	lds	r24, 0x021A
     a4a:	82 ff       	sbrs	r24, 2
     a4c:	98 cf       	rjmp	.-208    	; 0x97e <_Z9set_alarmv+0x36>
      just_pressed = 0;
     a4e:	10 92 19 02 	sts	0x0219, r1

      if (mode == SET_HOUR) {
     a52:	41 30       	cpi	r20, 0x01	; 1
     a54:	b1 f4       	brne	.+44     	; 0xa82 <_Z9set_alarmv+0x13a>
	hour = (hour+1) % 24;
     a56:	8e 2d       	mov	r24, r14
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
     a62:	e8 2e       	mov	r14, r24
	display_alarm(hour, min);
     a64:	6d 2d       	mov	r22, r13
     a66:	49 83       	std	Y+1, r20	; 0x01
     a68:	0e 94 4a 04 	call	0x894	; 0x894 <_Z13display_alarmhh>
	display[1] |= 0x1;
     a6c:	80 91 07 02 	lds	r24, 0x0207
     a70:	81 60       	ori	r24, 0x01	; 1
     a72:	80 93 07 02 	sts	0x0207, r24
	display[2] |= 0x1;
     a76:	80 91 08 02 	lds	r24, 0x0208
     a7a:	81 60       	ori	r24, 0x01	; 1
     a7c:	80 93 08 02 	sts	0x0208, r24
     a80:	18 c0       	rjmp	.+48     	; 0xab2 <_Z9set_alarmv+0x16a>
      }
      if (mode == SET_MIN) {
     a82:	42 30       	cpi	r20, 0x02	; 2
     a84:	b9 f4       	brne	.+46     	; 0xab4 <_Z9set_alarmv+0x16c>
	min = (min+1) % 60;
     a86:	8d 2d       	mov	r24, r13
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	b5 01       	movw	r22, r10
     a8e:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodhi4>
     a92:	68 2f       	mov	r22, r24
     a94:	d8 2e       	mov	r13, r24
	display_alarm(hour, min);
     a96:	8e 2d       	mov	r24, r14
     a98:	49 83       	std	Y+1, r20	; 0x01
     a9a:	0e 94 4a 04 	call	0x894	; 0x894 <_Z13display_alarmhh>
	display[4] |= 0x1;
     a9e:	80 91 0a 02 	lds	r24, 0x020A
     aa2:	81 60       	ori	r24, 0x01	; 1
     aa4:	80 93 0a 02 	sts	0x020A, r24
	display[5] |= 0x1;
     aa8:	80 91 0b 02 	lds	r24, 0x020B
     aac:	81 60       	ori	r24, 0x01	; 1
     aae:	80 93 0b 02 	sts	0x020B, r24
     ab2:	49 81       	ldd	r20, Y+1	; 0x01
      }

      if (pressed & 0x4)
     ab4:	80 91 1a 02 	lds	r24, 0x021A
     ab8:	82 ff       	sbrs	r24, 2
     aba:	61 cf       	rjmp	.-318    	; 0x97e <_Z9set_alarmv+0x36>
	delayms(75);
     abc:	8b e4       	ldi	r24, 0x4B	; 75
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	49 83       	std	Y+1, r20	; 0x01
     ac2:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
     ac6:	49 81       	ldd	r20, Y+1	; 0x01
     ac8:	5a cf       	rjmp	.-332    	; 0x97e <_Z9set_alarmv+0x36>
      return;
    }
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;  
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
     aca:	80 91 1c 02 	lds	r24, 0x021C
     ace:	88 23       	and	r24, r24
     ad0:	09 f0       	breq	.+2      	; 0xad4 <_Z9set_alarmv+0x18c>
     ad2:	78 cf       	rjmp	.-272    	; 0x9c4 <_Z9set_alarmv+0x7c>
     ad4:	64 cf       	rjmp	.-312    	; 0x99e <_Z9set_alarmv+0x56>

      if (pressed & 0x4)
	delayms(75);
    }
  }
}
     ad6:	0f 90       	pop	r0
     ad8:	cf 91       	pop	r28
     ada:	df 91       	pop	r29
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	ef 90       	pop	r14
     ae4:	df 90       	pop	r13
     ae6:	bf 90       	pop	r11
     ae8:	af 90       	pop	r10
     aea:	08 95       	ret

00000aec <_Z11display_strPKc>:
    display[1] =  pgm_read_byte(numbertable + ( (((h+23)%24)+1) / 10));
  }
}

// display words (menus, prompts, etc)
void display_str(const char s[]) {
     aec:	ef 92       	push	r14
     aee:	ff 92       	push	r15
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
  uint8_t i;

  // don't use the lefthand dot/slash digit
  display[0] = 0;
     af4:	10 92 06 02 	sts	0x0206, r1
     af8:	e8 2e       	mov	r14, r24
     afa:	e7 01       	movw	r28, r14
     afc:	7e 01       	movw	r14, r28
     afe:	f9 2e       	mov	r15, r25
     b00:	e7 01       	movw	r28, r14
     b02:	a7 e0       	ldi	r26, 0x07	; 7
     b04:	b2 e0       	ldi	r27, 0x02	; 2

  // up to 8 characters
  for (i=1; i<9; i++) {
    // check for null-termination
    if (s[i-1] == 0)
     b06:	e9 91       	ld	r30, Y+
     b08:	ee 23       	and	r30, r30
     b0a:	c1 f0       	breq	.+48     	; 0xb3c <_Z11display_strPKc+0x50>
      return;

    // Numbers and leters are looked up in the font table!
    if ((s[i-1] >= 'a') && (s[i-1] <= 'z')) {
     b0c:	8e 2f       	mov	r24, r30
     b0e:	81 56       	subi	r24, 0x61	; 97
     b10:	8a 31       	cpi	r24, 0x1A	; 26
     b12:	20 f4       	brcc	.+8      	; 0xb1c <_Z11display_strPKc+0x30>
      display[i] =  pgm_read_byte(alphatable + s[i-1] - 'a');
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	e8 5e       	subi	r30, 0xE8	; 232
     b18:	ff 4f       	sbci	r31, 0xFF	; 255
     b1a:	07 c0       	rjmp	.+14     	; 0xb2a <_Z11display_strPKc+0x3e>
    } else if ((s[i-1] >= '0') && (s[i-1] <= '9')) {
     b1c:	8e 2f       	mov	r24, r30
     b1e:	80 53       	subi	r24, 0x30	; 48
     b20:	8a 30       	cpi	r24, 0x0A	; 10
     b22:	30 f4       	brcc	.+12     	; 0xb30 <_Z11display_strPKc+0x44>
      display[i] =  pgm_read_byte(numbertable + s[i-1] - '0');
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	ed 59       	subi	r30, 0x9D	; 157
     b28:	ff 4f       	sbci	r31, 0xFF	; 255
     b2a:	e4 91       	lpm	r30, Z+
     b2c:	ec 93       	st	X, r30
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <_Z11display_strPKc+0x46>
    } else {
      display[i] = 0;      // spaces and other stuff are ignored :(
     b30:	1c 92       	st	X, r1
     b32:	11 96       	adiw	r26, 0x01	; 1

  // don't use the lefthand dot/slash digit
  display[0] = 0;

  // up to 8 characters
  for (i=1; i<9; i++) {
     b34:	92 e0       	ldi	r25, 0x02	; 2
     b36:	af 30       	cpi	r26, 0x0F	; 15
     b38:	b9 07       	cpc	r27, r25
     b3a:	29 f7       	brne	.-54     	; 0xb06 <_Z11display_strPKc+0x1a>
      display[i] =  pgm_read_byte(numbertable + s[i-1] - '0');
    } else {
      display[i] = 0;      // spaces and other stuff are ignored :(
    }
  }
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	ff 90       	pop	r15
     b42:	ef 90       	pop	r14
     b44:	08 95       	ret

00000b46 <_Z12display_dateh>:
}

/**************************** DISPLAY *****************************/

// We can display the current date!
void display_date(uint8_t style) {
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29

  // This type is mm-dd-yy OR dd-mm-yy depending on our pref.
  if (style == DATE) {
     b4a:	88 23       	and	r24, r24
     b4c:	09 f0       	breq	.+2      	; 0xb50 <_Z12display_dateh+0xa>
     b4e:	6f c0       	rjmp	.+222    	; 0xc2e <_Z12display_dateh+0xe8>
    display[0] = 0;
     b50:	10 92 06 02 	sts	0x0206, r1
    display[6] = display[3] = 0x02;     // put dashes between num
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	80 93 09 02 	sts	0x0209, r24
     b5a:	80 93 0c 02 	sts	0x020C, r24

    if (region == REGION_US) {
     b5e:	80 91 f6 01 	lds	r24, 0x01F6
     b62:	88 23       	and	r24, r24
     b64:	31 f5       	brne	.+76     	; 0xbb2 <_Z12display_dateh+0x6c>
      // mm-dd-yy
      display[1] = pgm_read_byte(numbertable + (date_m / 10));
     b66:	80 91 fa 01 	lds	r24, 0x01FA
     b6a:	2a e0       	ldi	r18, 0x0A	; 10
     b6c:	62 2f       	mov	r22, r18
     b6e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     b72:	e8 2f       	mov	r30, r24
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	ed 56       	subi	r30, 0x6D	; 109
     b78:	ff 4f       	sbci	r31, 0xFF	; 255
     b7a:	e4 91       	lpm	r30, Z+
     b7c:	e0 93 07 02 	sts	0x0207, r30
      display[2] = pgm_read_byte(numbertable + (date_m % 10));
     b80:	80 91 fa 01 	lds	r24, 0x01FA
     b84:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     b88:	e9 2f       	mov	r30, r25
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	ed 56       	subi	r30, 0x6D	; 109
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	e4 91       	lpm	r30, Z+
     b92:	e0 93 08 02 	sts	0x0208, r30
      display[4] = pgm_read_byte(numbertable + (date_d / 10));
     b96:	80 91 fb 01 	lds	r24, 0x01FB
     b9a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     b9e:	e8 2f       	mov	r30, r24
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	ed 56       	subi	r30, 0x6D	; 109
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	e4 91       	lpm	r30, Z+
     ba8:	e0 93 0a 02 	sts	0x020A, r30
      display[5] = pgm_read_byte(numbertable + (date_d % 10));
     bac:	80 91 fb 01 	lds	r24, 0x01FB
     bb0:	25 c0       	rjmp	.+74     	; 0xbfc <_Z12display_dateh+0xb6>
    } else {
      // dd-mm-yy
      display[1] = pgm_read_byte(numbertable + (date_d / 10));
     bb2:	80 91 fb 01 	lds	r24, 0x01FB
     bb6:	2a e0       	ldi	r18, 0x0A	; 10
     bb8:	62 2f       	mov	r22, r18
     bba:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     bbe:	e8 2f       	mov	r30, r24
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	ed 56       	subi	r30, 0x6D	; 109
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	e4 91       	lpm	r30, Z+
     bc8:	e0 93 07 02 	sts	0x0207, r30
      display[2] = pgm_read_byte(numbertable + (date_d % 10));
     bcc:	80 91 fb 01 	lds	r24, 0x01FB
     bd0:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     bd4:	e9 2f       	mov	r30, r25
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	ed 56       	subi	r30, 0x6D	; 109
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	e4 91       	lpm	r30, Z+
     bde:	e0 93 08 02 	sts	0x0208, r30
      display[4] = pgm_read_byte(numbertable + (date_m / 10));
     be2:	80 91 fa 01 	lds	r24, 0x01FA
     be6:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     bea:	e8 2f       	mov	r30, r24
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	ed 56       	subi	r30, 0x6D	; 109
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	e4 91       	lpm	r30, Z+
     bf4:	e0 93 0a 02 	sts	0x020A, r30
      display[5] = pgm_read_byte(numbertable + (date_m % 10));
     bf8:	80 91 fa 01 	lds	r24, 0x01FA
     bfc:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     c00:	e9 2f       	mov	r30, r25
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	ed 56       	subi	r30, 0x6D	; 109
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	e4 91       	lpm	r30, Z+
     c0a:	e0 93 0b 02 	sts	0x020B, r30
    }
    // the yy part is the same
    display[7] = pgm_read_byte(numbertable + (date_y / 10));
     c0e:	80 91 fc 01 	lds	r24, 0x01FC
     c12:	2a e0       	ldi	r18, 0x0A	; 10
     c14:	62 2f       	mov	r22, r18
     c16:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     c1a:	e8 2f       	mov	r30, r24
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	ed 56       	subi	r30, 0x6D	; 109
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	e4 91       	lpm	r30, Z+
     c24:	e0 93 0d 02 	sts	0x020D, r30
    display[8] = pgm_read_byte(numbertable + (date_y % 10));
     c28:	80 91 fc 01 	lds	r24, 0x01FC
     c2c:	d1 c0       	rjmp	.+418    	; 0xdd0 <_Z12display_dateh+0x28a>

  } else if (style == DAY) {
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	09 f0       	breq	.+2      	; 0xc34 <_Z12display_dateh+0xee>
     c32:	d7 c0       	rjmp	.+430    	; 0xde2 <_Z12display_dateh+0x29c>
    uint16_t month, year;
    uint8_t dotw;

    // Calculate day of the week
    
    month = date_m;
     c34:	80 91 fa 01 	lds	r24, 0x01FA
     c38:	c8 2f       	mov	r28, r24
     c3a:	d0 e0       	ldi	r29, 0x00	; 0
    year = 2000 + date_y;
     c3c:	e0 91 fc 01 	lds	r30, 0x01FC
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	e0 53       	subi	r30, 0x30	; 48
     c44:	f8 4f       	sbci	r31, 0xF8	; 248
    if (date_m < 3)  {
     c46:	80 91 fa 01 	lds	r24, 0x01FA
     c4a:	83 30       	cpi	r24, 0x03	; 3
     c4c:	10 f4       	brcc	.+4      	; 0xc52 <_Z12display_dateh+0x10c>
      month += 12;
     c4e:	2c 96       	adiw	r28, 0x0c	; 12
      year -= 1;
     c50:	31 97       	sbiw	r30, 0x01	; 1
    }
    dotw = (date_d + (2 * month) + (6 * (month+1)/10) + year + (year/4) - (year/100) + (year/400) + 1) % 7;
     c52:	20 91 fb 01 	lds	r18, 0x01FB

    // Display the day first
    display[8] = display[7] = 0;
     c56:	10 92 0d 02 	sts	0x020D, r1
     c5a:	10 92 0e 02 	sts	0x020E, r1
    year = 2000 + date_y;
    if (date_m < 3)  {
      month += 12;
      year -= 1;
    }
    dotw = (date_d + (2 * month) + (6 * (month+1)/10) + year + (year/4) - (year/100) + (year/400) + 1) % 7;
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	2f 5f       	subi	r18, 0xFF	; 255
     c62:	3f 4f       	sbci	r19, 0xFF	; 255
     c64:	2e 0f       	add	r18, r30
     c66:	3f 1f       	adc	r19, r31
     c68:	ce 01       	movw	r24, r28
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	28 0f       	add	r18, r24
     c70:	39 1f       	adc	r19, r25
     c72:	cf 01       	movw	r24, r30
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	96 95       	lsr	r25
     c7a:	87 95       	ror	r24
     c7c:	28 0f       	add	r18, r24
     c7e:	39 1f       	adc	r19, r25
     c80:	cf 01       	movw	r24, r30
     c82:	60 e9       	ldi	r22, 0x90	; 144
     c84:	71 e0       	ldi	r23, 0x01	; 1
     c86:	0e 94 76 10 	call	0x20ec	; 0x20ec <__udivmodhi4>
     c8a:	26 0f       	add	r18, r22
     c8c:	37 1f       	adc	r19, r23
     c8e:	cf 01       	movw	r24, r30
     c90:	64 e6       	ldi	r22, 0x64	; 100
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	0e 94 76 10 	call	0x20ec	; 0x20ec <__udivmodhi4>
     c98:	26 1b       	sub	r18, r22
     c9a:	37 0b       	sbc	r19, r23
     c9c:	21 96       	adiw	r28, 0x01	; 1
     c9e:	ce 01       	movw	r24, r28
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	8c 0f       	add	r24, r28
     ca6:	9d 1f       	adc	r25, r29
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	6a e0       	ldi	r22, 0x0A	; 10
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	0e 94 76 10 	call	0x20ec	; 0x20ec <__udivmodhi4>
     cb4:	26 0f       	add	r18, r22
     cb6:	37 1f       	adc	r19, r23
     cb8:	c9 01       	movw	r24, r18
     cba:	67 e0       	ldi	r22, 0x07	; 7
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	0e 94 76 10 	call	0x20ec	; 0x20ec <__udivmodhi4>

    // Display the day first
    display[8] = display[7] = 0;
    switch (dotw) {
     cc2:	83 30       	cpi	r24, 0x03	; 3
     cc4:	b1 f0       	breq	.+44     	; 0xcf2 <_Z12display_dateh+0x1ac>
     cc6:	84 30       	cpi	r24, 0x04	; 4
     cc8:	28 f4       	brcc	.+10     	; 0xcd4 <_Z12display_dateh+0x18e>
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	61 f0       	breq	.+24     	; 0xce6 <_Z12display_dateh+0x1a0>
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	39 f4       	brne	.+14     	; 0xce0 <_Z12display_dateh+0x19a>
     cd2:	0c c0       	rjmp	.+24     	; 0xcec <_Z12display_dateh+0x1a6>
     cd4:	85 30       	cpi	r24, 0x05	; 5
     cd6:	99 f0       	breq	.+38     	; 0xcfe <_Z12display_dateh+0x1b8>
     cd8:	85 30       	cpi	r24, 0x05	; 5
     cda:	70 f0       	brcs	.+28     	; 0xcf8 <_Z12display_dateh+0x1b2>
     cdc:	86 30       	cpi	r24, 0x06	; 6
     cde:	91 f0       	breq	.+36     	; 0xd04 <_Z12display_dateh+0x1be>
    case 0:
      display_str("sunday"); break;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	11 c0       	rjmp	.+34     	; 0xd08 <_Z12display_dateh+0x1c2>
    case 1:
      display_str("monday"); break;
     ce6:	87 e0       	ldi	r24, 0x07	; 7
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	0e c0       	rjmp	.+28     	; 0xd08 <_Z12display_dateh+0x1c2>
    case 2:
      display_str("tuesday"); break;
     cec:	8e e0       	ldi	r24, 0x0E	; 14
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	0b c0       	rjmp	.+22     	; 0xd08 <_Z12display_dateh+0x1c2>
    case 3:
      display_str("wednsday"); break;
     cf2:	86 e1       	ldi	r24, 0x16	; 22
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	08 c0       	rjmp	.+16     	; 0xd08 <_Z12display_dateh+0x1c2>
    case 4:
      display_str("thursday"); break;
     cf8:	8f e1       	ldi	r24, 0x1F	; 31
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <_Z12display_dateh+0x1c2>
    case 5:
      display_str("friday"); break;
     cfe:	88 e2       	ldi	r24, 0x28	; 40
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <_Z12display_dateh+0x1c2>
    case 6:
      display_str("saturday"); break;
     d04:	8f e2       	ldi	r24, 0x2F	; 47
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
    }
    
    // wait one seconds about
    delayms(1000);
     d0c:	88 ee       	ldi	r24, 0xE8	; 232
     d0e:	93 e0       	ldi	r25, 0x03	; 3
     d10:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>

    // Then display the month and date
    display[6] = display[5] = display[4] = 0;
     d14:	10 92 0a 02 	sts	0x020A, r1
     d18:	10 92 0b 02 	sts	0x020B, r1
     d1c:	10 92 0c 02 	sts	0x020C, r1
    switch (date_m) {
     d20:	80 91 fa 01 	lds	r24, 0x01FA
     d24:	86 30       	cpi	r24, 0x06	; 6
     d26:	79 f1       	breq	.+94     	; 0xd86 <_Z12display_dateh+0x240>
     d28:	87 30       	cpi	r24, 0x07	; 7
     d2a:	70 f4       	brcc	.+28     	; 0xd48 <_Z12display_dateh+0x202>
     d2c:	83 30       	cpi	r24, 0x03	; 3
     d2e:	11 f1       	breq	.+68     	; 0xd74 <_Z12display_dateh+0x22e>
     d30:	84 30       	cpi	r24, 0x04	; 4
     d32:	28 f4       	brcc	.+10     	; 0xd3e <_Z12display_dateh+0x1f8>
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	c1 f0       	breq	.+48     	; 0xd68 <_Z12display_dateh+0x222>
     d38:	82 30       	cpi	r24, 0x02	; 2
     d3a:	d9 f5       	brne	.+118    	; 0xdb2 <_Z12display_dateh+0x26c>
     d3c:	18 c0       	rjmp	.+48     	; 0xd6e <_Z12display_dateh+0x228>
     d3e:	84 30       	cpi	r24, 0x04	; 4
     d40:	e1 f0       	breq	.+56     	; 0xd7a <_Z12display_dateh+0x234>
     d42:	85 30       	cpi	r24, 0x05	; 5
     d44:	b1 f5       	brne	.+108    	; 0xdb2 <_Z12display_dateh+0x26c>
     d46:	1c c0       	rjmp	.+56     	; 0xd80 <_Z12display_dateh+0x23a>
     d48:	89 30       	cpi	r24, 0x09	; 9
     d4a:	31 f1       	breq	.+76     	; 0xd98 <_Z12display_dateh+0x252>
     d4c:	8a 30       	cpi	r24, 0x0A	; 10
     d4e:	28 f4       	brcc	.+10     	; 0xd5a <_Z12display_dateh+0x214>
     d50:	87 30       	cpi	r24, 0x07	; 7
     d52:	e1 f0       	breq	.+56     	; 0xd8c <_Z12display_dateh+0x246>
     d54:	88 30       	cpi	r24, 0x08	; 8
     d56:	69 f5       	brne	.+90     	; 0xdb2 <_Z12display_dateh+0x26c>
     d58:	1c c0       	rjmp	.+56     	; 0xd92 <_Z12display_dateh+0x24c>
     d5a:	8b 30       	cpi	r24, 0x0B	; 11
     d5c:	19 f1       	breq	.+70     	; 0xda4 <_Z12display_dateh+0x25e>
     d5e:	8b 30       	cpi	r24, 0x0B	; 11
     d60:	f0 f0       	brcs	.+60     	; 0xd9e <_Z12display_dateh+0x258>
     d62:	8c 30       	cpi	r24, 0x0C	; 12
     d64:	31 f5       	brne	.+76     	; 0xdb2 <_Z12display_dateh+0x26c>
     d66:	21 c0       	rjmp	.+66     	; 0xdaa <_Z12display_dateh+0x264>
    case 1:
      display_str("jan"); break;
     d68:	88 e3       	ldi	r24, 0x38	; 56
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	20 c0       	rjmp	.+64     	; 0xdae <_Z12display_dateh+0x268>
    case 2:
      display_str("feb"); break;
     d6e:	8c e3       	ldi	r24, 0x3C	; 60
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	1d c0       	rjmp	.+58     	; 0xdae <_Z12display_dateh+0x268>
    case 3:
      display_str("march"); break;
     d74:	80 e4       	ldi	r24, 0x40	; 64
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	1a c0       	rjmp	.+52     	; 0xdae <_Z12display_dateh+0x268>
    case 4:
      display_str("april"); break;
     d7a:	86 e4       	ldi	r24, 0x46	; 70
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	17 c0       	rjmp	.+46     	; 0xdae <_Z12display_dateh+0x268>
    case 5:
      display_str("may"); break;
     d80:	8c e4       	ldi	r24, 0x4C	; 76
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	14 c0       	rjmp	.+40     	; 0xdae <_Z12display_dateh+0x268>
    case 6:
      display_str("june"); break;
     d86:	80 e5       	ldi	r24, 0x50	; 80
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	11 c0       	rjmp	.+34     	; 0xdae <_Z12display_dateh+0x268>
    case 7:
      display_str("july"); break;
     d8c:	85 e5       	ldi	r24, 0x55	; 85
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	0e c0       	rjmp	.+28     	; 0xdae <_Z12display_dateh+0x268>
    case 8:
      display_str("augst"); break;
     d92:	8a e5       	ldi	r24, 0x5A	; 90
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	0b c0       	rjmp	.+22     	; 0xdae <_Z12display_dateh+0x268>
    case 9:
      display_str("sept"); break;
     d98:	80 e6       	ldi	r24, 0x60	; 96
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	08 c0       	rjmp	.+16     	; 0xdae <_Z12display_dateh+0x268>
    case 10:
      display_str("octob"); break;
     d9e:	85 e6       	ldi	r24, 0x65	; 101
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	05 c0       	rjmp	.+10     	; 0xdae <_Z12display_dateh+0x268>
    case 11:
      display_str("novem"); break;
     da4:	8b e6       	ldi	r24, 0x6B	; 107
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	02 c0       	rjmp	.+4      	; 0xdae <_Z12display_dateh+0x268>
    case 12:
      display_str("decem"); break;
     daa:	81 e7       	ldi	r24, 0x71	; 113
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
    }
    display[7] = pgm_read_byte(numbertable + (date_d / 10));
     db2:	80 91 fb 01 	lds	r24, 0x01FB
     db6:	2a e0       	ldi	r18, 0x0A	; 10
     db8:	62 2f       	mov	r22, r18
     dba:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     dbe:	e8 2f       	mov	r30, r24
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	ed 56       	subi	r30, 0x6D	; 109
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	e4 91       	lpm	r30, Z+
     dc8:	e0 93 0d 02 	sts	0x020D, r30
    display[8] = pgm_read_byte(numbertable + (date_d % 10));
     dcc:	80 91 fb 01 	lds	r24, 0x01FB
     dd0:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     dd4:	e9 2f       	mov	r30, r25
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	ed 56       	subi	r30, 0x6D	; 109
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	e4 91       	lpm	r30, Z+
     dde:	e0 93 0e 02 	sts	0x020E, r30
    
  }
}
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <_Z8set_datev>:
  }
}



void set_date(void) {
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
  uint8_t mode = SHOW_MENU;

  timeoutcounter = INACTIVITYTIMEOUT;;  
     df0:	8a e0       	ldi	r24, 0x0A	; 10
     df2:	80 93 1c 02 	sts	0x021C, r24
}



void set_date(void) {
  uint8_t mode = SHOW_MENU;
     df6:	10 e0       	ldi	r17, 0x00	; 0

  timeoutcounter = INACTIVITYTIMEOUT;;  

  while (1) {
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;;  
     df8:	0a e0       	ldi	r16, 0x0A	; 10
     dfa:	e0 2e       	mov	r14, r16
      } else if (((mode == SET_MONTH) && (region == REGION_US)) ||
		 ((mode == SET_DAY) && (region == REGION_EU))) {
	if (region == REGION_US)
	  mode = SET_DAY;
	else
	  mode = SET_MONTH;
     dfc:	ff 24       	eor	r15, r15
     dfe:	f3 94       	inc	r15
	}
	eeprom_write_byte((uint8_t *)EE_DAY, date_d);    
      }
      if (mode == SET_YEAR) {
	date_y++;
	date_y %= 100;
     e00:	04 e6       	ldi	r16, 0x64	; 100
  uint8_t mode = SHOW_MENU;

  timeoutcounter = INACTIVITYTIMEOUT;;  

  while (1) {
    if (just_pressed || pressed) {
     e02:	80 91 19 02 	lds	r24, 0x0219
     e06:	88 23       	and	r24, r24
     e08:	29 f4       	brne	.+10     	; 0xe14 <_Z8set_datev+0x2c>
     e0a:	80 91 1a 02 	lds	r24, 0x021A
     e0e:	88 23       	and	r24, r24
     e10:	09 f4       	brne	.+2      	; 0xe14 <_Z8set_datev+0x2c>
     e12:	fb c0       	rjmp	.+502    	; 0x100a <_Z8set_datev+0x222>
      timeoutcounter = INACTIVITYTIMEOUT;;  
     e14:	e0 92 1c 02 	sts	0x021C, r14
    } else if (!timeoutcounter) {
      //timed out!
      displaymode = SHOW_TIME;     
      return;
    }
    if (just_pressed & 0x1) { // mode change
     e18:	80 91 19 02 	lds	r24, 0x0219
     e1c:	80 fd       	sbrc	r24, 0
     e1e:	fb c0       	rjmp	.+502    	; 0x1016 <_Z8set_datev+0x22e>
      return;
    }
    if (just_pressed & 0x2) {
     e20:	80 91 19 02 	lds	r24, 0x0219
     e24:	81 ff       	sbrs	r24, 1
     e26:	61 c0       	rjmp	.+194    	; 0xeea <_Z8set_datev+0x102>

      just_pressed = 0;
     e28:	10 92 19 02 	sts	0x0219, r1
      if (mode == SHOW_MENU) {
     e2c:	11 23       	and	r17, r17
     e2e:	d1 f4       	brne	.+52     	; 0xe64 <_Z8set_datev+0x7c>
	// start!
	if (region == REGION_US) {
     e30:	80 91 f6 01 	lds	r24, 0x01F6
     e34:	88 23       	and	r24, r24
     e36:	39 f0       	breq	.+14     	; 0xe46 <_Z8set_datev+0x5e>
	  mode = SET_MONTH;
	}
	else {
	  DEBUGP("Set day");
     e38:	87 ea       	ldi	r24, 0xA7	; 167
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
	  mode = SET_DAY;
     e42:	12 e0       	ldi	r17, 0x02	; 2
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <_Z8set_datev+0x60>

      just_pressed = 0;
      if (mode == SHOW_MENU) {
	// start!
	if (region == REGION_US) {
	  mode = SET_MONTH;
     e46:	11 e0       	ldi	r17, 0x01	; 1
	}
	else {
	  DEBUGP("Set day");
	  mode = SET_DAY;
	}
	display_date(DATE);
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	0e 94 a3 05 	call	0xb46	; 0xb46 <_Z12display_dateh>
	display[1] |= 0x1;
     e4e:	80 91 07 02 	lds	r24, 0x0207
     e52:	81 60       	ori	r24, 0x01	; 1
     e54:	80 93 07 02 	sts	0x0207, r24
	display[2] |= 0x1;
     e58:	80 91 08 02 	lds	r24, 0x0208
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	80 93 08 02 	sts	0x0208, r24
     e62:	43 c0       	rjmp	.+134    	; 0xeea <_Z8set_datev+0x102>
      } else if (((mode == SET_MONTH) && (region == REGION_US)) ||
     e64:	11 30       	cpi	r17, 0x01	; 1
     e66:	29 f4       	brne	.+10     	; 0xe72 <_Z8set_datev+0x8a>
     e68:	80 91 f6 01 	lds	r24, 0x01F6
     e6c:	88 23       	and	r24, r24
     e6e:	39 f0       	breq	.+14     	; 0xe7e <_Z8set_datev+0x96>
     e70:	1e c0       	rjmp	.+60     	; 0xeae <_Z8set_datev+0xc6>
     e72:	12 30       	cpi	r17, 0x02	; 2
     e74:	69 f5       	brne	.+90     	; 0xed0 <_Z8set_datev+0xe8>
     e76:	80 91 f6 01 	lds	r24, 0x01F6
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	a9 f4       	brne	.+42     	; 0xea8 <_Z8set_datev+0xc0>
		 ((mode == SET_DAY) && (region == REGION_EU))) {
	if (region == REGION_US)
     e7e:	80 91 f6 01 	lds	r24, 0x01F6
     e82:	88 23       	and	r24, r24
     e84:	11 f4       	brne	.+4      	; 0xe8a <_Z8set_datev+0xa2>
	  mode = SET_DAY;
     e86:	12 e0       	ldi	r17, 0x02	; 2
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <_Z8set_datev+0xa4>
	else
	  mode = SET_MONTH;
     e8a:	11 e0       	ldi	r17, 0x01	; 1
	display_date(DATE);
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	0e 94 a3 05 	call	0xb46	; 0xb46 <_Z12display_dateh>
	display[4] |= 0x1;
     e92:	80 91 0a 02 	lds	r24, 0x020A
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	80 93 0a 02 	sts	0x020A, r24
	display[5] |= 0x1;
     e9c:	80 91 0b 02 	lds	r24, 0x020B
     ea0:	81 60       	ori	r24, 0x01	; 1
     ea2:	80 93 0b 02 	sts	0x020B, r24
     ea6:	21 c0       	rjmp	.+66     	; 0xeea <_Z8set_datev+0x102>
      } else if (((mode == SET_DAY) && (region == REGION_US)) ||
     ea8:	88 23       	and	r24, r24
     eaa:	19 f0       	breq	.+6      	; 0xeb2 <_Z8set_datev+0xca>
     eac:	11 c0       	rjmp	.+34     	; 0xed0 <_Z8set_datev+0xe8>
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	79 f4       	brne	.+30     	; 0xed0 <_Z8set_datev+0xe8>
	((mode == SET_MONTH) && (region == REGION_EU))) {
	mode = SET_YEAR;
	display_date(DATE);
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	0e 94 a3 05 	call	0xb46	; 0xb46 <_Z12display_dateh>
	display[7] |= 0x1;
     eb8:	80 91 0d 02 	lds	r24, 0x020D
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	80 93 0d 02 	sts	0x020D, r24
	display[8] |= 0x1;
     ec2:	80 91 0e 02 	lds	r24, 0x020E
     ec6:	81 60       	ori	r24, 0x01	; 1
     ec8:	80 93 0e 02 	sts	0x020E, r24
	display_date(DATE);
	display[4] |= 0x1;
	display[5] |= 0x1;
      } else if (((mode == SET_DAY) && (region == REGION_US)) ||
	((mode == SET_MONTH) && (region == REGION_EU))) {
	mode = SET_YEAR;
     ecc:	13 e0       	ldi	r17, 0x03	; 3
	display_date(DATE);
	display[7] |= 0x1;
	display[8] |= 0x1;
     ece:	0d c0       	rjmp	.+26     	; 0xeea <_Z8set_datev+0x102>
      } else {
	displaymode = NONE;
     ed0:	83 e6       	ldi	r24, 0x63	; 99
     ed2:	80 93 02 02 	sts	0x0202, r24
	display_date(DATE);
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	0e 94 a3 05 	call	0xb46	; 0xb46 <_Z12display_dateh>
	delayms(1500);
     edc:	8c ed       	ldi	r24, 0xDC	; 220
     ede:	95 e0       	ldi	r25, 0x05	; 5
     ee0:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
	displaymode = SHOW_TIME;
     ee4:	10 92 02 02 	sts	0x0202, r1
     ee8:	96 c0       	rjmp	.+300    	; 0x1016 <_Z8set_datev+0x22e>
	return;
      }
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
     eea:	80 91 19 02 	lds	r24, 0x0219
     eee:	82 fd       	sbrc	r24, 2
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <_Z8set_datev+0x112>
     ef2:	80 91 1a 02 	lds	r24, 0x021A
     ef6:	82 ff       	sbrs	r24, 2
     ef8:	84 cf       	rjmp	.-248    	; 0xe02 <_Z8set_datev+0x1a>
      just_pressed = 0;
     efa:	10 92 19 02 	sts	0x0219, r1
      if (mode == SET_MONTH) {
     efe:	11 30       	cpi	r17, 0x01	; 1
     f00:	61 f5       	brne	.+88     	; 0xf5a <_Z8set_datev+0x172>
	date_m++;
     f02:	80 91 fa 01 	lds	r24, 0x01FA
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	80 93 fa 01 	sts	0x01FA, r24
	if (date_m >= 13)
     f0c:	80 91 fa 01 	lds	r24, 0x01FA
     f10:	8d 30       	cpi	r24, 0x0D	; 13
     f12:	10 f0       	brcs	.+4      	; 0xf18 <_Z8set_datev+0x130>
	  date_m = 1;
     f14:	10 93 fa 01 	sts	0x01FA, r17
	display_date(DATE);
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	0e 94 a3 05 	call	0xb46	; 0xb46 <_Z12display_dateh>
	if (region == REGION_US) {
     f1e:	80 91 f6 01 	lds	r24, 0x01F6
     f22:	88 23       	and	r24, r24
     f24:	59 f4       	brne	.+22     	; 0xf3c <_Z8set_datev+0x154>
	  display[1] |= 0x1;
     f26:	80 91 07 02 	lds	r24, 0x0207
     f2a:	81 60       	ori	r24, 0x01	; 1
     f2c:	80 93 07 02 	sts	0x0207, r24
	  display[2] |= 0x1;
     f30:	80 91 08 02 	lds	r24, 0x0208
     f34:	81 60       	ori	r24, 0x01	; 1
     f36:	80 93 08 02 	sts	0x0208, r24
     f3a:	0a c0       	rjmp	.+20     	; 0xf50 <_Z8set_datev+0x168>
	} else {
	  display[4] |= 0x1;
     f3c:	80 91 0a 02 	lds	r24, 0x020A
     f40:	81 60       	ori	r24, 0x01	; 1
     f42:	80 93 0a 02 	sts	0x020A, r24
	  display[5] |= 0x1;
     f46:	80 91 0b 02 	lds	r24, 0x020B
     f4a:	81 60       	ori	r24, 0x01	; 1
     f4c:	80 93 0b 02 	sts	0x020B, r24
	}
	eeprom_write_byte((uint8_t *)EE_MONTH, date_m);    
     f50:	60 91 fa 01 	lds	r22, 0x01FA
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	4d c0       	rjmp	.+154    	; 0xff4 <_Z8set_datev+0x20c>
      }
      if (mode == SET_DAY) {
     f5a:	12 30       	cpi	r17, 0x02	; 2
     f5c:	61 f5       	brne	.+88     	; 0xfb6 <_Z8set_datev+0x1ce>
	date_d++;
     f5e:	80 91 fb 01 	lds	r24, 0x01FB
     f62:	8f 5f       	subi	r24, 0xFF	; 255
     f64:	80 93 fb 01 	sts	0x01FB, r24
	if (date_d > 31)
     f68:	80 91 fb 01 	lds	r24, 0x01FB
     f6c:	80 32       	cpi	r24, 0x20	; 32
     f6e:	10 f0       	brcs	.+4      	; 0xf74 <_Z8set_datev+0x18c>
	  date_d = 1;
     f70:	f0 92 fb 01 	sts	0x01FB, r15
	display_date(DATE);
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	0e 94 a3 05 	call	0xb46	; 0xb46 <_Z12display_dateh>

	if (region == REGION_EU) {
     f7a:	80 91 f6 01 	lds	r24, 0x01F6
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	59 f4       	brne	.+22     	; 0xf98 <_Z8set_datev+0x1b0>
	  display[1] |= 0x1;
     f82:	80 91 07 02 	lds	r24, 0x0207
     f86:	81 60       	ori	r24, 0x01	; 1
     f88:	80 93 07 02 	sts	0x0207, r24
	  display[2] |= 0x1;
     f8c:	80 91 08 02 	lds	r24, 0x0208
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 93 08 02 	sts	0x0208, r24
     f96:	0a c0       	rjmp	.+20     	; 0xfac <_Z8set_datev+0x1c4>
	} else {
	  display[4] |= 0x1;
     f98:	80 91 0a 02 	lds	r24, 0x020A
     f9c:	81 60       	ori	r24, 0x01	; 1
     f9e:	80 93 0a 02 	sts	0x020A, r24
	  display[5] |= 0x1;
     fa2:	80 91 0b 02 	lds	r24, 0x020B
     fa6:	81 60       	ori	r24, 0x01	; 1
     fa8:	80 93 0b 02 	sts	0x020B, r24
	}
	eeprom_write_byte((uint8_t *)EE_DAY, date_d);    
     fac:	60 91 fb 01 	lds	r22, 0x01FB
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	1f c0       	rjmp	.+62     	; 0xff4 <_Z8set_datev+0x20c>
      }
      if (mode == SET_YEAR) {
     fb6:	13 30       	cpi	r17, 0x03	; 3
     fb8:	f9 f4       	brne	.+62     	; 0xff8 <_Z8set_datev+0x210>
	date_y++;
     fba:	80 91 fc 01 	lds	r24, 0x01FC
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	80 93 fc 01 	sts	0x01FC, r24
	date_y %= 100;
     fc4:	80 91 fc 01 	lds	r24, 0x01FC
     fc8:	60 2f       	mov	r22, r16
     fca:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
     fce:	90 93 fc 01 	sts	0x01FC, r25
	display_date(DATE);
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 a3 05 	call	0xb46	; 0xb46 <_Z12display_dateh>
	display[7] |= 0x1;
     fd8:	80 91 0d 02 	lds	r24, 0x020D
     fdc:	81 60       	ori	r24, 0x01	; 1
     fde:	80 93 0d 02 	sts	0x020D, r24
	display[8] |= 0x1;
     fe2:	80 91 0e 02 	lds	r24, 0x020E
     fe6:	81 60       	ori	r24, 0x01	; 1
     fe8:	80 93 0e 02 	sts	0x020E, r24
	eeprom_write_byte((uint8_t *)EE_YEAR, date_y);    
     fec:	60 91 fc 01 	lds	r22, 0x01FC
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
      }

      if (pressed & 0x4)
     ff8:	80 91 1a 02 	lds	r24, 0x021A
     ffc:	82 ff       	sbrs	r24, 2
     ffe:	01 cf       	rjmp	.-510    	; 0xe02 <_Z8set_datev+0x1a>
	delayms(60);
    1000:	8c e3       	ldi	r24, 0x3C	; 60
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
    1008:	fc ce       	rjmp	.-520    	; 0xe02 <_Z8set_datev+0x1a>

  while (1) {
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;;  
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
    100a:	80 91 1c 02 	lds	r24, 0x021C
    100e:	88 23       	and	r24, r24
    1010:	09 f0       	breq	.+2      	; 0x1014 <_Z8set_datev+0x22c>
    1012:	02 cf       	rjmp	.-508    	; 0xe18 <_Z8set_datev+0x30>
    1014:	67 cf       	rjmp	.-306    	; 0xee4 <_Z8set_datev+0xfc>

      if (pressed & 0x4)
	delayms(60);
    }
  }
}
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	08 95       	ret

00001020 <_Z13setalarmstatev>:
}

// This turns on/off the alarm when the switch has been
// set. It also displays the alarm time
void setalarmstate(void) {
  if (ALARM_PIN & _BV(ALARM)) { 
    1020:	4a 9b       	sbis	0x09, 2	; 9
    1022:	23 c0       	rjmp	.+70     	; 0x106a <_Z13setalarmstatev+0x4a>
    // Don't display the alarm/beep if we already have
    if  (!alarm_on) {
    1024:	80 91 fe 01 	lds	r24, 0x01FE
    1028:	88 23       	and	r24, r24
    102a:	e1 f5       	brne	.+120    	; 0x10a4 <_Z13setalarmstatev+0x84>
      // alarm on!
      alarm_on = 1;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	80 93 fe 01 	sts	0x01FE, r24
      // reset snoozing
      snoozetimer = 0;
    1032:	10 92 15 02 	sts	0x0215, r1
    1036:	10 92 14 02 	sts	0x0214, r1
      // show the status on the VFD tube
      display_str("alarm on");
    103a:	87 e7       	ldi	r24, 0x77	; 119
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
      // its not actually SHOW_SNOOZE but just anything but SHOW_TIME
      displaymode = SHOW_SNOOZE;
    1042:	89 e0       	ldi	r24, 0x09	; 9
    1044:	80 93 02 02 	sts	0x0202, r24
      delayms(1000);
    1048:	88 ee       	ldi	r24, 0xE8	; 232
    104a:	93 e0       	ldi	r25, 0x03	; 3
    104c:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
      // show the current alarm time set
      display_alarm(alarm_h, alarm_m);
    1050:	80 91 00 02 	lds	r24, 0x0200
    1054:	60 91 01 02 	lds	r22, 0x0201
    1058:	0e 94 4a 04 	call	0x894	; 0x894 <_Z13display_alarmhh>
      delayms(1000);
    105c:	88 ee       	ldi	r24, 0xE8	; 232
    105e:	93 e0       	ldi	r25, 0x03	; 3
    1060:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
      // after a second, go back to clock mode
      displaymode = SHOW_TIME;
    1064:	10 92 02 02 	sts	0x0202, r1
    1068:	08 95       	ret
    }
  } else {
    if (alarm_on) {
    106a:	80 91 fe 01 	lds	r24, 0x01FE
    106e:	88 23       	and	r24, r24
    1070:	c9 f0       	breq	.+50     	; 0x10a4 <_Z13setalarmstatev+0x84>
      // turn off the alarm
      alarm_on = 0;
    1072:	10 92 fe 01 	sts	0x01FE, r1
      snoozetimer = 0;
    1076:	10 92 15 02 	sts	0x0215, r1
    107a:	10 92 14 02 	sts	0x0214, r1
      if (alarming) {
    107e:	80 91 ff 01 	lds	r24, 0x01FF
    1082:	88 23       	and	r24, r24
    1084:	79 f0       	breq	.+30     	; 0x10a4 <_Z13setalarmstatev+0x84>
	// if the alarm is going off, we should turn it off
	// and quiet the speaker
	DEBUGP("alarm off");
    1086:	8d e9       	ldi	r24, 0x9D	; 157
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
	alarming = 0;
    1090:	10 92 ff 01 	sts	0x01FF, r1
	TCCR1B &= ~_BV(CS11); // turn it off!
    1094:	80 91 81 00 	lds	r24, 0x0081
    1098:	8d 7f       	andi	r24, 0xFD	; 253
    109a:	80 93 81 00 	sts	0x0081, r24
	PORTB |= _BV(SPK1) | _BV(SPK2);
    109e:	85 b1       	in	r24, 0x05	; 5
    10a0:	86 60       	ori	r24, 0x06	; 6
    10a2:	85 b9       	out	0x05, r24	; 5
    10a4:	08 95       	ret

000010a6 <__vector_1>:
      display[0] &= ~0x2;
  }
}

// called when the alarm switch turns on or off
ISR(INT0_vect) {
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	0f 92       	push	r0
    10ae:	11 24       	eor	r1, r1
    10b0:	1f 93       	push	r17
    10b2:	2f 93       	push	r18
    10b4:	3f 93       	push	r19
    10b6:	4f 93       	push	r20
    10b8:	5f 93       	push	r21
    10ba:	6f 93       	push	r22
    10bc:	7f 93       	push	r23
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	af 93       	push	r26
    10c4:	bf 93       	push	r27
    10c6:	ef 93       	push	r30
    10c8:	ff 93       	push	r31
  uart_putchar('i');
    10ca:	89 e6       	ldi	r24, 0x69	; 105
    10cc:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z12uart_putcharc>
  uint8_t x = ALARM_PIN & _BV(ALARM);
    10d0:	19 b1       	in	r17, 0x09	; 9
  sei();
    10d2:	78 94       	sei
  delayms(10); // wait for debouncing
    10d4:	8a e0       	ldi	r24, 0x0A	; 10
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
  if (x != (ALARM_PIN & _BV(ALARM)))
    10dc:	89 b1       	in	r24, 0x09	; 9
}

// called when the alarm switch turns on or off
ISR(INT0_vect) {
  uart_putchar('i');
  uint8_t x = ALARM_PIN & _BV(ALARM);
    10de:	14 70       	andi	r17, 0x04	; 4
  sei();
  delayms(10); // wait for debouncing
  if (x != (ALARM_PIN & _BV(ALARM)))
    10e0:	21 2f       	mov	r18, r17
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	84 70       	andi	r24, 0x04	; 4
    10e8:	90 70       	andi	r25, 0x00	; 0
    10ea:	28 17       	cp	r18, r24
    10ec:	39 07       	cpc	r19, r25
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <__vector_1+0x4e>
    return;
  setalarmstate();
    10f0:	0e 94 10 08 	call	0x1020	; 0x1020 <_Z13setalarmstatev>
}
    10f4:	ff 91       	pop	r31
    10f6:	ef 91       	pop	r30
    10f8:	bf 91       	pop	r27
    10fa:	af 91       	pop	r26
    10fc:	9f 91       	pop	r25
    10fe:	8f 91       	pop	r24
    1100:	7f 91       	pop	r23
    1102:	6f 91       	pop	r22
    1104:	5f 91       	pop	r21
    1106:	4f 91       	pop	r20
    1108:	3f 91       	pop	r19
    110a:	2f 91       	pop	r18
    110c:	1f 91       	pop	r17
    110e:	0f 90       	pop	r0
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	0f 90       	pop	r0
    1114:	1f 90       	pop	r1
    1116:	18 95       	reti

00001118 <_Z6wakeupv>:
  CLKPR = 0;
  PORTC &= ~_BV(4);
}
 
 void wakeup(void) {
   if (!sleepmode)
    1118:	80 91 03 02 	lds	r24, 0x0203
    111c:	88 23       	and	r24, r24
    111e:	e1 f1       	breq	.+120    	; 0x1198 <_Z6wakeupv+0x80>
     return;
   CLKPR = _BV(CLKPCE);
    1120:	80 e8       	ldi	r24, 0x80	; 128
    1122:	80 93 61 00 	sts	0x0061, r24
   CLKPR = 0;
    1126:	10 92 61 00 	sts	0x0061, r1
   DEBUGP("waketime");
    112a:	8e e1       	ldi	r24, 0x1E	; 30
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	61 e0       	ldi	r22, 0x01	; 1
    1130:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
   sleepmode = 0;
    1134:	10 92 03 02 	sts	0x0203, r1
    1138:	8f e3       	ldi	r24, 0x3F	; 63
    113a:	9c e9       	ldi	r25, 0x9C	; 156
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	f1 f7       	brne	.-4      	; 0x113c <_Z6wakeupv+0x24>
    1140:	00 c0       	rjmp	.+0      	; 0x1142 <_Z6wakeupv+0x2a>
    1142:	00 00       	nop
   // plugged in
   // wait to verify
   _delay_ms(20);
   if (ACSR & _BV(ACO)) 
    1144:	00 b6       	in	r0, 0x30	; 48
    1146:	05 fc       	sbrc	r0, 5
    1148:	27 c0       	rjmp	.+78     	; 0x1198 <_Z6wakeupv+0x80>
     return;
   
   // turn on pullups
   initbuttons();
    114a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z11initbuttonsv>

   // turn on boost
   boost_init(eeprom_read_byte((uint8_t *)EE_BRIGHT));
    114e:	89 e0       	ldi	r24, 0x09	; 9
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
    1156:	0e 94 92 02 	call	0x524	; 0x524 <_Z10boost_inith>

/************************* LOW LEVEL DISPLAY ************************/

// Setup SPI
void vfd_init(void) {
  SPCR  = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
    115a:	81 e5       	ldi	r24, 0x51	; 81
    115c:	8c bd       	out	0x2c, r24	; 44

   // turn on vfd control
   vfd_init();

   // turn on display
   VFDSWITCH_PORT &= ~_BV(VFDSWITCH); 
    115e:	5b 98       	cbi	0x0b, 3	; 11
   VFDBLANK_PORT &= ~_BV(VFDBLANK);
    1160:	43 98       	cbi	0x08, 3	; 8
   volume = eeprom_read_byte((uint8_t *)EE_VOLUME); // reset
    1162:	8a e0       	ldi	r24, 0x0A	; 10
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
    116a:	80 93 fd 01 	sts	0x01FD, r24
   
   speaker_init();
    116e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_Z12speaker_initv>
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void pet_the_dog(void) {
  wdt_reset();
    1172:	a8 95       	wdr
   
   speaker_init();

   pet_the_dog();

   setalarmstate();
    1174:	0e 94 10 08 	call	0x1020	; 0x1020 <_Z13setalarmstatev>

   // wake up sound
   beep(880, 1);
    1178:	80 e7       	ldi	r24, 0x70	; 112
    117a:	93 e0       	ldi	r25, 0x03	; 3
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	0e 94 49 02 	call	0x492	; 0x492 <_Z4beepjh>
   beep(1760, 1);
    1182:	80 ee       	ldi	r24, 0xE0	; 224
    1184:	96 e0       	ldi	r25, 0x06	; 6
    1186:	61 e0       	ldi	r22, 0x01	; 1
    1188:	0e 94 49 02 	call	0x492	; 0x492 <_Z4beepjh>
   beep(3520, 1);
    118c:	80 ec       	ldi	r24, 0xC0	; 192
    118e:	9d e0       	ldi	r25, 0x0D	; 13
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	0e 94 49 02 	call	0x492	; 0x492 <_Z4beepjh>
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void pet_the_dog(void) {
  wdt_reset();
    1196:	a8 95       	wdr
    1198:	08 95       	ret

0000119a <_Z10set_regionv>:
}




void set_region(void) {
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
  uint8_t mode = SHOW_MENU;

  timeoutcounter = INACTIVITYTIMEOUT;;  
    119e:	8a e0       	ldi	r24, 0x0A	; 10
    11a0:	80 93 1c 02 	sts	0x021C, r24
  region = eeprom_read_byte((uint8_t *)EE_REGION);
    11a4:	8b e0       	ldi	r24, 0x0B	; 11
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
    11ac:	80 93 f6 01 	sts	0x01F6, r24




void set_region(void) {
  uint8_t mode = SHOW_MENU;
    11b0:	10 e0       	ldi	r17, 0x00	; 0
  timeoutcounter = INACTIVITYTIMEOUT;;  
  region = eeprom_read_byte((uint8_t *)EE_REGION);

  while (1) {
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;;  
    11b2:	0a e0       	ldi	r16, 0x0A	; 10
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <_Z10set_regionv+0x1e>
	return;
      }
    }
    if (just_pressed & 0x4) {
      just_pressed = 0;
      if (mode == SET_REG) {
    11b6:	10 e0       	ldi	r17, 0x00	; 0

  timeoutcounter = INACTIVITYTIMEOUT;;  
  region = eeprom_read_byte((uint8_t *)EE_REGION);

  while (1) {
    if (just_pressed || pressed) {
    11b8:	80 91 19 02 	lds	r24, 0x0219
    11bc:	88 23       	and	r24, r24
    11be:	21 f4       	brne	.+8      	; 0x11c8 <_Z10set_regionv+0x2e>
    11c0:	80 91 1a 02 	lds	r24, 0x021A
    11c4:	88 23       	and	r24, r24
    11c6:	e9 f1       	breq	.+122    	; 0x1242 <_Z10set_regionv+0xa8>
      timeoutcounter = INACTIVITYTIMEOUT;;  
    11c8:	00 93 1c 02 	sts	0x021C, r16
    } else if (!timeoutcounter) {
      //timed out!
      displaymode = SHOW_TIME;     
      return;
    }
    if (just_pressed & 0x1) { // mode change
    11cc:	80 91 19 02 	lds	r24, 0x0219
    11d0:	80 fd       	sbrc	r24, 0
    11d2:	3d c0       	rjmp	.+122    	; 0x124e <_Z10set_regionv+0xb4>
      return;
    }
    if (just_pressed & 0x2) {
    11d4:	80 91 19 02 	lds	r24, 0x0219
    11d8:	81 ff       	sbrs	r24, 1
    11da:	14 c0       	rjmp	.+40     	; 0x1204 <_Z10set_regionv+0x6a>
      just_pressed = 0;
    11dc:	10 92 19 02 	sts	0x0219, r1
      if (mode == SHOW_MENU) {
    11e0:	11 23       	and	r17, r17
    11e2:	69 f4       	brne	.+26     	; 0x11fe <_Z10set_regionv+0x64>
	// start!
	mode = SET_REG;
	// display region
	if (region == REGION_US) {
    11e4:	80 91 f6 01 	lds	r24, 0x01F6
    11e8:	88 23       	and	r24, r24
    11ea:	19 f4       	brne	.+6      	; 0x11f2 <_Z10set_regionv+0x58>
	  display_str("usa-12hr");
    11ec:	80 e8       	ldi	r24, 0x80	; 128
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <_Z10set_regionv+0x5c>
	} else {
	  display_str("eur-24hr");
    11f2:	89 e8       	ldi	r24, 0x89	; 137
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
    }
    if (just_pressed & 0x2) {
      just_pressed = 0;
      if (mode == SHOW_MENU) {
	// start!
	mode = SET_REG;
    11fa:	11 e0       	ldi	r17, 0x01	; 1
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <_Z10set_regionv+0x6a>
	  display_str("usa-12hr");
	} else {
	  display_str("eur-24hr");
	}
      } else {	
	displaymode = SHOW_TIME;
    11fe:	10 92 02 02 	sts	0x0202, r1
    1202:	25 c0       	rjmp	.+74     	; 0x124e <_Z10set_regionv+0xb4>
	return;
      }
    }
    if (just_pressed & 0x4) {
    1204:	80 91 19 02 	lds	r24, 0x0219
    1208:	82 ff       	sbrs	r24, 2
    120a:	d6 cf       	rjmp	.-84     	; 0x11b8 <_Z10set_regionv+0x1e>
      just_pressed = 0;
    120c:	10 92 19 02 	sts	0x0219, r1
      if (mode == SET_REG) {
    1210:	11 30       	cpi	r17, 0x01	; 1
    1212:	89 f6       	brne	.-94     	; 0x11b6 <_Z10set_regionv+0x1c>
	region = !region;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 91 f6 01 	lds	r25, 0x01F6
    121a:	91 11       	cpse	r25, r1
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	80 93 f6 01 	sts	0x01F6, r24
	if (region == REGION_US) {
    1222:	88 23       	and	r24, r24
    1224:	19 f4       	brne	.+6      	; 0x122c <_Z10set_regionv+0x92>
	  display_str("usa-12hr");
    1226:	80 e8       	ldi	r24, 0x80	; 128
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <_Z10set_regionv+0x96>
	} else {
	  display_str("eur-24hr");
    122c:	89 e8       	ldi	r24, 0x89	; 137
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
	}
	eeprom_write_byte((uint8_t *)EE_REGION, region);
    1234:	8b e0       	ldi	r24, 0x0B	; 11
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	60 91 f6 01 	lds	r22, 0x01F6
    123c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
    1240:	bb cf       	rjmp	.-138    	; 0x11b8 <_Z10set_regionv+0x1e>

  while (1) {
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;;  
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
    1242:	80 91 1c 02 	lds	r24, 0x021C
    1246:	88 23       	and	r24, r24
    1248:	09 f0       	breq	.+2      	; 0x124c <_Z10set_regionv+0xb2>
    124a:	c0 cf       	rjmp	.-128    	; 0x11cc <_Z10set_regionv+0x32>
    124c:	d8 cf       	rjmp	.-80     	; 0x11fe <_Z10set_regionv+0x64>
	}
	eeprom_write_byte((uint8_t *)EE_REGION, region);
      }
    }
  }
}
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	08 95       	ret

00001254 <_Z10set_volumev>:
    }
  }
}


void set_volume(void) {
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	0f 92       	push	r0
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
  uint8_t mode = SHOW_MENU;
  uint8_t volume;

  timeoutcounter = INACTIVITYTIMEOUT;;  
    1264:	8a e0       	ldi	r24, 0x0A	; 10
    1266:	80 93 1c 02 	sts	0x021C, r24
  volume = eeprom_read_byte((uint8_t *)EE_VOLUME);
    126a:	8a e0       	ldi	r24, 0x0A	; 10
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
    1272:	08 2f       	mov	r16, r24
  }
}


void set_volume(void) {
  uint8_t mode = SHOW_MENU;
    1274:	10 e0       	ldi	r17, 0x00	; 0
  timeoutcounter = INACTIVITYTIMEOUT;;  
  volume = eeprom_read_byte((uint8_t *)EE_VOLUME);

  while (1) {
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;;  
    1276:	8a e0       	ldi	r24, 0x0A	; 10
    1278:	f8 2e       	mov	r15, r24
    127a:	01 c0       	rjmp	.+2      	; 0x127e <_Z10set_volumev+0x2a>
	return;
      }
    }
    if (just_pressed & 0x4) {
      just_pressed = 0;
      if (mode == SET_VOL) {
    127c:	10 e0       	ldi	r17, 0x00	; 0

  timeoutcounter = INACTIVITYTIMEOUT;;  
  volume = eeprom_read_byte((uint8_t *)EE_VOLUME);

  while (1) {
    if (just_pressed || pressed) {
    127e:	80 91 19 02 	lds	r24, 0x0219
    1282:	88 23       	and	r24, r24
    1284:	29 f4       	brne	.+10     	; 0x1290 <_Z10set_volumev+0x3c>
    1286:	80 91 1a 02 	lds	r24, 0x021A
    128a:	88 23       	and	r24, r24
    128c:	09 f4       	brne	.+2      	; 0x1290 <_Z10set_volumev+0x3c>
    128e:	6d c0       	rjmp	.+218    	; 0x136a <_Z10set_volumev+0x116>
      timeoutcounter = INACTIVITYTIMEOUT;;  
    1290:	f0 92 1c 02 	sts	0x021C, r15
    } else if (!timeoutcounter) {
      //timed out!
      displaymode = SHOW_TIME;     
      return;
    }
    if (just_pressed & 0x1) { // mode change
    1294:	80 91 19 02 	lds	r24, 0x0219
    1298:	80 fd       	sbrc	r24, 0
    129a:	6d c0       	rjmp	.+218    	; 0x1376 <_Z10set_volumev+0x122>
      return;
    }
    if (just_pressed & 0x2) {
    129c:	80 91 19 02 	lds	r24, 0x0219
    12a0:	81 ff       	sbrs	r24, 1
    12a2:	28 c0       	rjmp	.+80     	; 0x12f4 <_Z10set_volumev+0xa0>
      just_pressed = 0;
    12a4:	10 92 19 02 	sts	0x0219, r1
      if (mode == SHOW_MENU) {
    12a8:	11 23       	and	r17, r17
    12aa:	09 f5       	brne	.+66     	; 0x12ee <_Z10set_volumev+0x9a>
	// start!
	mode = SET_VOL;
	// display volume
	if (volume) {
    12ac:	00 23       	and	r16, r16
    12ae:	51 f0       	breq	.+20     	; 0x12c4 <_Z10set_volumev+0x70>
	  display_str("vol high");
    12b0:	82 e9       	ldi	r24, 0x92	; 146
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
	  display[5] |= 0x1;
    12b8:	80 91 0b 02 	lds	r24, 0x020B
    12bc:	81 60       	ori	r24, 0x01	; 1
    12be:	80 93 0b 02 	sts	0x020B, r24
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <_Z10set_volumev+0x78>
	} else {
	  display_str("vol  low");
    12c4:	8b e9       	ldi	r24, 0x9B	; 155
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
	}
	display[6] |= 0x1;
    12cc:	80 91 0c 02 	lds	r24, 0x020C
    12d0:	81 60       	ori	r24, 0x01	; 1
    12d2:	80 93 0c 02 	sts	0x020C, r24
	display[7] |= 0x1;
    12d6:	80 91 0d 02 	lds	r24, 0x020D
    12da:	81 60       	ori	r24, 0x01	; 1
    12dc:	80 93 0d 02 	sts	0x020D, r24
	display[8] |= 0x1;
    12e0:	80 91 0e 02 	lds	r24, 0x020E
    12e4:	81 60       	ori	r24, 0x01	; 1
    12e6:	80 93 0e 02 	sts	0x020E, r24
    }
    if (just_pressed & 0x2) {
      just_pressed = 0;
      if (mode == SHOW_MENU) {
	// start!
	mode = SET_VOL;
    12ea:	11 e0       	ldi	r17, 0x01	; 1
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <_Z10set_volumev+0xa0>
	}
	display[6] |= 0x1;
	display[7] |= 0x1;
	display[8] |= 0x1;
      } else {	
	displaymode = SHOW_TIME;
    12ee:	10 92 02 02 	sts	0x0202, r1
    12f2:	41 c0       	rjmp	.+130    	; 0x1376 <_Z10set_volumev+0x122>
	return;
      }
    }
    if (just_pressed & 0x4) {
    12f4:	80 91 19 02 	lds	r24, 0x0219
    12f8:	82 ff       	sbrs	r24, 2
    12fa:	c1 cf       	rjmp	.-126    	; 0x127e <_Z10set_volumev+0x2a>
      just_pressed = 0;
    12fc:	10 92 19 02 	sts	0x0219, r1
      if (mode == SET_VOL) {
    1300:	11 30       	cpi	r17, 0x01	; 1
    1302:	09 f0       	breq	.+2      	; 0x1306 <_Z10set_volumev+0xb2>
    1304:	bb cf       	rjmp	.-138    	; 0x127c <_Z10set_volumev+0x28>
	volume = !volume;
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	01 11       	cpse	r16, r1
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	06 2f       	mov	r16, r22
	if (volume) {
    130e:	66 23       	and	r22, r22
    1310:	59 f0       	breq	.+22     	; 0x1328 <_Z10set_volumev+0xd4>
	  display_str("vol high");
    1312:	82 e9       	ldi	r24, 0x92	; 146
    1314:	91 e0       	ldi	r25, 0x01	; 1
    1316:	69 83       	std	Y+1, r22	; 0x01
    1318:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
	  display[5] |= 0x1;
    131c:	80 91 0b 02 	lds	r24, 0x020B
    1320:	81 60       	ori	r24, 0x01	; 1
    1322:	80 93 0b 02 	sts	0x020B, r24
    1326:	05 c0       	rjmp	.+10     	; 0x1332 <_Z10set_volumev+0xde>
	} else {
	  display_str("vol  low");
    1328:	8b e9       	ldi	r24, 0x9B	; 155
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	69 83       	std	Y+1, r22	; 0x01
    132e:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
    1332:	69 81       	ldd	r22, Y+1	; 0x01
	}
	display[6] |= 0x1;
    1334:	80 91 0c 02 	lds	r24, 0x020C
    1338:	81 60       	ori	r24, 0x01	; 1
    133a:	80 93 0c 02 	sts	0x020C, r24
	display[7] |= 0x1;
    133e:	80 91 0d 02 	lds	r24, 0x020D
    1342:	81 60       	ori	r24, 0x01	; 1
    1344:	80 93 0d 02 	sts	0x020D, r24
	display[8] |= 0x1;
    1348:	80 91 0e 02 	lds	r24, 0x020E
    134c:	81 60       	ori	r24, 0x01	; 1
    134e:	80 93 0e 02 	sts	0x020E, r24
	eeprom_write_byte((uint8_t *)EE_VOLUME, volume);
    1352:	8a e0       	ldi	r24, 0x0A	; 10
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
	speaker_init();
    135a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_Z12speaker_initv>
	beep(4000, 1);
    135e:	80 ea       	ldi	r24, 0xA0	; 160
    1360:	9f e0       	ldi	r25, 0x0F	; 15
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	0e 94 49 02 	call	0x492	; 0x492 <_Z4beepjh>
    1368:	8a cf       	rjmp	.-236    	; 0x127e <_Z10set_volumev+0x2a>

  while (1) {
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;;  
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
    136a:	80 91 1c 02 	lds	r24, 0x021C
    136e:	88 23       	and	r24, r24
    1370:	09 f0       	breq	.+2      	; 0x1374 <_Z10set_volumev+0x120>
    1372:	90 cf       	rjmp	.-224    	; 0x1294 <_Z10set_volumev+0x40>
    1374:	bc cf       	rjmp	.-136    	; 0x12ee <_Z10set_volumev+0x9a>
	speaker_init();
	beep(4000, 1);
      }
    }
  }
}
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	1f 91       	pop	r17
    137e:	0f 91       	pop	r16
    1380:	ff 90       	pop	r15
    1382:	08 95       	ret

00001384 <_Z14set_brightnessv>:
    }
  }
}


void set_brightness(void) {
    1384:	3f 92       	push	r3
    1386:	4f 92       	push	r4
    1388:	5f 92       	push	r5
    138a:	6f 92       	push	r6
    138c:	7f 92       	push	r7
    138e:	8f 92       	push	r8
    1390:	9f 92       	push	r9
    1392:	af 92       	push	r10
    1394:	bf 92       	push	r11
    1396:	cf 92       	push	r12
    1398:	df 92       	push	r13
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
  uint8_t mode = SHOW_MENU;
  uint8_t brightness;

  timeoutcounter = INACTIVITYTIMEOUT;;  
    13a2:	8a e0       	ldi	r24, 0x0A	; 10
    13a4:	80 93 1c 02 	sts	0x021C, r24
  brightness = eeprom_read_byte((uint8_t *)EE_BRIGHT);
    13a8:	89 e0       	ldi	r24, 0x09	; 9
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
    13b0:	18 2f       	mov	r17, r24
  }
}


void set_brightness(void) {
  uint8_t mode = SHOW_MENU;
    13b2:	20 e0       	ldi	r18, 0x00	; 0
  timeoutcounter = INACTIVITYTIMEOUT;;  
  brightness = eeprom_read_byte((uint8_t *)EE_BRIGHT);

  while (1) {
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;;  
    13b4:	0a e0       	ldi	r16, 0x0A	; 10
	} else if (brightness <= 85) {
	  OCR0A = 85;
	} else if (brightness <= 90) {
	  OCR0A = 90;
	} else {
	  OCR0A = 30;
    13b6:	3e e1       	ldi	r19, 0x1E	; 30
    13b8:	f3 2e       	mov	r15, r19
	} else if (brightness <= 80) {
	  OCR0A = 80;
	} else if (brightness <= 85) {
	  OCR0A = 85;
	} else if (brightness <= 90) {
	  OCR0A = 90;
    13ba:	9a e5       	ldi	r25, 0x5A	; 90
    13bc:	69 2e       	mov	r6, r25
	} else if (brightness <= 75) {
	  OCR0A = 75;
	} else if (brightness <= 80) {
	  OCR0A = 80;
	} else if (brightness <= 85) {
	  OCR0A = 85;
    13be:	85 e5       	ldi	r24, 0x55	; 85
    13c0:	78 2e       	mov	r7, r24
	} else if (brightness <= 70) {
	  OCR0A = 70;
	} else if (brightness <= 75) {
	  OCR0A = 75;
	} else if (brightness <= 80) {
	  OCR0A = 80;
    13c2:	b0 e5       	ldi	r27, 0x50	; 80
    13c4:	8b 2e       	mov	r8, r27
	} else if (brightness <= 65) {
	  OCR0A = 65;
	} else if (brightness <= 70) {
	  OCR0A = 70;
	} else if (brightness <= 75) {
	  OCR0A = 75;
    13c6:	ab e4       	ldi	r26, 0x4B	; 75
    13c8:	9a 2e       	mov	r9, r26
	} else if (brightness <= 60) {
	  OCR0A = 60;
	} else if (brightness <= 65) {
	  OCR0A = 65;
	} else if (brightness <= 70) {
	  OCR0A = 70;
    13ca:	f6 e4       	ldi	r31, 0x46	; 70
    13cc:	af 2e       	mov	r10, r31
	} else if (brightness <= 55) {
	  OCR0A = 55;
	} else if (brightness <= 60) {
	  OCR0A = 60;
	} else if (brightness <= 65) {
	  OCR0A = 65;
    13ce:	e1 e4       	ldi	r30, 0x41	; 65
    13d0:	be 2e       	mov	r11, r30
	} else if (brightness <= 50) {
	  OCR0A = 50;
	} else if (brightness <= 55) {
	  OCR0A = 55;
	} else if (brightness <= 60) {
	  OCR0A = 60;
    13d2:	7c e3       	ldi	r23, 0x3C	; 60
    13d4:	c7 2e       	mov	r12, r23
	} else if (brightness <= 45) {
	  OCR0A = 45;
	} else if (brightness <= 50) {
	  OCR0A = 50;
	} else if (brightness <= 55) {
	  OCR0A = 55;
    13d6:	67 e3       	ldi	r22, 0x37	; 55
    13d8:	d6 2e       	mov	r13, r22
	} else if (brightness <= 40) {
	  OCR0A = 40;
	} else if (brightness <= 45) {
	  OCR0A = 45;
	} else if (brightness <= 50) {
	  OCR0A = 50;
    13da:	52 e3       	ldi	r21, 0x32	; 50
    13dc:	e5 2e       	mov	r14, r21
	} else if (brightness <= 35) {
	  OCR0A = 35;
	} else if (brightness <= 40) {
	  OCR0A = 40;
	} else if (brightness <= 45) {
	  OCR0A = 45;
    13de:	4d e2       	ldi	r20, 0x2D	; 45
    13e0:	54 2e       	mov	r5, r20
	if (brightness <= 30) {
	  OCR0A = 30; 
	} else if (brightness <= 35) {
	  OCR0A = 35;
	} else if (brightness <= 40) {
	  OCR0A = 40;
    13e2:	38 e2       	ldi	r19, 0x28	; 40
    13e4:	43 2e       	mov	r4, r19
	display[7] = pgm_read_byte(numbertable + (brightness / 10)) | 0x1;
	display[8] = pgm_read_byte(numbertable + (brightness % 10)) | 0x1;
	if (brightness <= 30) {
	  OCR0A = 30; 
	} else if (brightness <= 35) {
	  OCR0A = 35;
    13e6:	93 e2       	ldi	r25, 0x23	; 35
    13e8:	39 2e       	mov	r3, r25
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <_Z14set_brightnessv+0x6a>
	return;
      }
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
      just_pressed = 0;
      if (mode == SET_BRITE) {
    13ec:	20 e0       	ldi	r18, 0x00	; 0

  timeoutcounter = INACTIVITYTIMEOUT;;  
  brightness = eeprom_read_byte((uint8_t *)EE_BRIGHT);

  while (1) {
    if (just_pressed || pressed) {
    13ee:	80 91 19 02 	lds	r24, 0x0219
    13f2:	88 23       	and	r24, r24
    13f4:	29 f4       	brne	.+10     	; 0x1400 <_Z14set_brightnessv+0x7c>
    13f6:	80 91 1a 02 	lds	r24, 0x021A
    13fa:	88 23       	and	r24, r24
    13fc:	09 f4       	brne	.+2      	; 0x1400 <_Z14set_brightnessv+0x7c>
    13fe:	89 c0       	rjmp	.+274    	; 0x1512 <_Z14set_brightnessv+0x18e>
      timeoutcounter = INACTIVITYTIMEOUT;;  
    1400:	00 93 1c 02 	sts	0x021C, r16
      //timed out!
      displaymode = SHOW_TIME;     
      eeprom_write_byte((uint8_t *)EE_BRIGHT, brightness);
      return;
    }
    if (just_pressed & 0x1) { // mode change
    1404:	80 91 19 02 	lds	r24, 0x0219
    1408:	80 fd       	sbrc	r24, 0
    140a:	89 c0       	rjmp	.+274    	; 0x151e <_Z14set_brightnessv+0x19a>
      return;
    }
    if (just_pressed & 0x2) {
    140c:	80 91 19 02 	lds	r24, 0x0219
    1410:	81 ff       	sbrs	r24, 1
    1412:	26 c0       	rjmp	.+76     	; 0x1460 <_Z14set_brightnessv+0xdc>

      just_pressed = 0;
    1414:	10 92 19 02 	sts	0x0219, r1
      if (mode == SHOW_MENU) {
    1418:	22 23       	and	r18, r18
    141a:	d1 f4       	brne	.+52     	; 0x1450 <_Z14set_brightnessv+0xcc>
	// start!
	mode = SET_BRITE;
	// display brightness
	display_str("brite ");
    141c:	84 ea       	ldi	r24, 0xA4	; 164
    141e:	91 e0       	ldi	r25, 0x01	; 1
    1420:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
	display[7] = pgm_read_byte(numbertable + (brightness / 10)) | 0x1;
    1424:	81 2f       	mov	r24, r17
    1426:	60 2f       	mov	r22, r16
    1428:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
    142c:	e8 2f       	mov	r30, r24
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	ed 56       	subi	r30, 0x6D	; 109
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	e4 91       	lpm	r30, Z+
    1436:	e1 60       	ori	r30, 0x01	; 1
    1438:	e0 93 0d 02 	sts	0x020D, r30
	display[8] = pgm_read_byte(numbertable + (brightness % 10)) | 0x1;
    143c:	e9 2f       	mov	r30, r25
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	ed 56       	subi	r30, 0x6D	; 109
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	e4 91       	lpm	r30, Z+
    1446:	e1 60       	ori	r30, 0x01	; 1
    1448:	e0 93 0e 02 	sts	0x020E, r30
    if (just_pressed & 0x2) {

      just_pressed = 0;
      if (mode == SHOW_MENU) {
	// start!
	mode = SET_BRITE;
    144c:	21 e0       	ldi	r18, 0x01	; 1
    144e:	08 c0       	rjmp	.+16     	; 0x1460 <_Z14set_brightnessv+0xdc>
	// display brightness
	display_str("brite ");
	display[7] = pgm_read_byte(numbertable + (brightness / 10)) | 0x1;
	display[8] = pgm_read_byte(numbertable + (brightness % 10)) | 0x1;
      } else {	
	displaymode = SHOW_TIME;
    1450:	10 92 02 02 	sts	0x0202, r1
	eeprom_write_byte((uint8_t *)EE_BRIGHT, brightness);
    1454:	89 e0       	ldi	r24, 0x09	; 9
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	61 2f       	mov	r22, r17
    145a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
    145e:	5f c0       	rjmp	.+190    	; 0x151e <_Z14set_brightnessv+0x19a>
	return;
      }
    }
    if ((just_pressed & 0x4) || (pressed & 0x4)) {
    1460:	80 91 19 02 	lds	r24, 0x0219
    1464:	82 fd       	sbrc	r24, 2
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <_Z14set_brightnessv+0xec>
    1468:	80 91 1a 02 	lds	r24, 0x021A
    146c:	82 ff       	sbrs	r24, 2
    146e:	bf cf       	rjmp	.-130    	; 0x13ee <_Z14set_brightnessv+0x6a>
      just_pressed = 0;
    1470:	10 92 19 02 	sts	0x0219, r1
      if (mode == SET_BRITE) {
    1474:	21 30       	cpi	r18, 0x01	; 1
    1476:	09 f0       	breq	.+2      	; 0x147a <_Z14set_brightnessv+0xf6>
    1478:	b9 cf       	rjmp	.-142    	; 0x13ec <_Z14set_brightnessv+0x68>
	brightness += 5;
    147a:	1b 5f       	subi	r17, 0xFB	; 251
	if (brightness > 91)
    147c:	1c 35       	cpi	r17, 0x5C	; 92
    147e:	08 f0       	brcs	.+2      	; 0x1482 <_Z14set_brightnessv+0xfe>
	  brightness = 30;
    1480:	1e e1       	ldi	r17, 0x1E	; 30
	display[7] = pgm_read_byte(numbertable + (brightness / 10)) | 0x1;
    1482:	81 2f       	mov	r24, r17
    1484:	60 2f       	mov	r22, r16
    1486:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodqi4>
    148a:	e8 2f       	mov	r30, r24
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	ed 56       	subi	r30, 0x6D	; 109
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	e4 91       	lpm	r30, Z+
    1494:	e1 60       	ori	r30, 0x01	; 1
    1496:	e0 93 0d 02 	sts	0x020D, r30
	display[8] = pgm_read_byte(numbertable + (brightness % 10)) | 0x1;
    149a:	e9 2f       	mov	r30, r25
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	ed 56       	subi	r30, 0x6D	; 109
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	e4 91       	lpm	r30, Z+
    14a4:	e1 60       	ori	r30, 0x01	; 1
    14a6:	e0 93 0e 02 	sts	0x020E, r30
	if (brightness <= 30) {
    14aa:	1f 31       	cpi	r17, 0x1F	; 31
    14ac:	80 f1       	brcs	.+96     	; 0x150e <_Z14set_brightnessv+0x18a>
	  OCR0A = 30; 
	} else if (brightness <= 35) {
    14ae:	14 32       	cpi	r17, 0x24	; 36
    14b0:	10 f4       	brcc	.+4      	; 0x14b6 <_Z14set_brightnessv+0x132>
	  OCR0A = 35;
    14b2:	37 bc       	out	0x27, r3	; 39
    14b4:	9c cf       	rjmp	.-200    	; 0x13ee <_Z14set_brightnessv+0x6a>
	} else if (brightness <= 40) {
    14b6:	19 32       	cpi	r17, 0x29	; 41
    14b8:	10 f4       	brcc	.+4      	; 0x14be <_Z14set_brightnessv+0x13a>
	  OCR0A = 40;
    14ba:	47 bc       	out	0x27, r4	; 39
    14bc:	98 cf       	rjmp	.-208    	; 0x13ee <_Z14set_brightnessv+0x6a>
	} else if (brightness <= 45) {
    14be:	1e 32       	cpi	r17, 0x2E	; 46
    14c0:	10 f4       	brcc	.+4      	; 0x14c6 <_Z14set_brightnessv+0x142>
	  OCR0A = 45;
    14c2:	57 bc       	out	0x27, r5	; 39
    14c4:	94 cf       	rjmp	.-216    	; 0x13ee <_Z14set_brightnessv+0x6a>
	} else if (brightness <= 50) {
    14c6:	13 33       	cpi	r17, 0x33	; 51
    14c8:	10 f4       	brcc	.+4      	; 0x14ce <_Z14set_brightnessv+0x14a>
	  OCR0A = 50;
    14ca:	e7 bc       	out	0x27, r14	; 39
    14cc:	90 cf       	rjmp	.-224    	; 0x13ee <_Z14set_brightnessv+0x6a>
	} else if (brightness <= 55) {
    14ce:	18 33       	cpi	r17, 0x38	; 56
    14d0:	10 f4       	brcc	.+4      	; 0x14d6 <_Z14set_brightnessv+0x152>
	  OCR0A = 55;
    14d2:	d7 bc       	out	0x27, r13	; 39
    14d4:	8c cf       	rjmp	.-232    	; 0x13ee <_Z14set_brightnessv+0x6a>
	} else if (brightness <= 60) {
    14d6:	1d 33       	cpi	r17, 0x3D	; 61
    14d8:	10 f4       	brcc	.+4      	; 0x14de <_Z14set_brightnessv+0x15a>
	  OCR0A = 60;
    14da:	c7 bc       	out	0x27, r12	; 39
    14dc:	88 cf       	rjmp	.-240    	; 0x13ee <_Z14set_brightnessv+0x6a>
	} else if (brightness <= 65) {
    14de:	12 34       	cpi	r17, 0x42	; 66
    14e0:	10 f4       	brcc	.+4      	; 0x14e6 <_Z14set_brightnessv+0x162>
	  OCR0A = 65;
    14e2:	b7 bc       	out	0x27, r11	; 39
    14e4:	84 cf       	rjmp	.-248    	; 0x13ee <_Z14set_brightnessv+0x6a>
	} else if (brightness <= 70) {
    14e6:	17 34       	cpi	r17, 0x47	; 71
    14e8:	10 f4       	brcc	.+4      	; 0x14ee <_Z14set_brightnessv+0x16a>
	  OCR0A = 70;
    14ea:	a7 bc       	out	0x27, r10	; 39
    14ec:	80 cf       	rjmp	.-256    	; 0x13ee <_Z14set_brightnessv+0x6a>
	} else if (brightness <= 75) {
    14ee:	1c 34       	cpi	r17, 0x4C	; 76
    14f0:	10 f4       	brcc	.+4      	; 0x14f6 <_Z14set_brightnessv+0x172>
	  OCR0A = 75;
    14f2:	97 bc       	out	0x27, r9	; 39
    14f4:	7c cf       	rjmp	.-264    	; 0x13ee <_Z14set_brightnessv+0x6a>
	} else if (brightness <= 80) {
    14f6:	11 35       	cpi	r17, 0x51	; 81
    14f8:	10 f4       	brcc	.+4      	; 0x14fe <_Z14set_brightnessv+0x17a>
	  OCR0A = 80;
    14fa:	87 bc       	out	0x27, r8	; 39
    14fc:	78 cf       	rjmp	.-272    	; 0x13ee <_Z14set_brightnessv+0x6a>
	} else if (brightness <= 85) {
    14fe:	16 35       	cpi	r17, 0x56	; 86
    1500:	10 f4       	brcc	.+4      	; 0x1506 <_Z14set_brightnessv+0x182>
	  OCR0A = 85;
    1502:	77 bc       	out	0x27, r7	; 39
    1504:	74 cf       	rjmp	.-280    	; 0x13ee <_Z14set_brightnessv+0x6a>
	} else if (brightness <= 90) {
    1506:	1b 35       	cpi	r17, 0x5B	; 91
    1508:	11 f0       	breq	.+4      	; 0x150e <_Z14set_brightnessv+0x18a>
	  OCR0A = 90;
    150a:	67 bc       	out	0x27, r6	; 39
    150c:	70 cf       	rjmp	.-288    	; 0x13ee <_Z14set_brightnessv+0x6a>
	} else {
	  OCR0A = 30;
    150e:	f7 bc       	out	0x27, r15	; 39
    1510:	6e cf       	rjmp	.-292    	; 0x13ee <_Z14set_brightnessv+0x6a>

  while (1) {
    if (just_pressed || pressed) {
      timeoutcounter = INACTIVITYTIMEOUT;;  
      // timeout w/no buttons pressed after 3 seconds?
    } else if (!timeoutcounter) {
    1512:	80 91 1c 02 	lds	r24, 0x021C
    1516:	88 23       	and	r24, r24
    1518:	09 f0       	breq	.+2      	; 0x151c <_Z14set_brightnessv+0x198>
    151a:	74 cf       	rjmp	.-280    	; 0x1404 <_Z14set_brightnessv+0x80>
    151c:	99 cf       	rjmp	.-206    	; 0x1450 <_Z14set_brightnessv+0xcc>
	  OCR0A = 30;
	}
      }
    }
  }
}
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	df 90       	pop	r13
    1528:	cf 90       	pop	r12
    152a:	bf 90       	pop	r11
    152c:	af 90       	pop	r10
    152e:	9f 90       	pop	r9
    1530:	8f 90       	pop	r8
    1532:	7f 90       	pop	r7
    1534:	6f 90       	pop	r6
    1536:	5f 90       	pop	r5
    1538:	4f 90       	pop	r4
    153a:	3f 90       	pop	r3
    153c:	08 95       	ret

0000153e <__vector_9>:
// buttons in a few seconds, and turns off the menu display
volatile uint8_t timeoutcounter = 0;


// called once per second when the clock timer overflows
ISR(TIMER2_OVF_vect) {
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	2f 93       	push	r18
    154a:	3f 93       	push	r19
    154c:	4f 93       	push	r20
    154e:	5f 93       	push	r21
    1550:	6f 93       	push	r22
    1552:	7f 93       	push	r23
    1554:	8f 93       	push	r24
    1556:	9f 93       	push	r25
    1558:	af 93       	push	r26
    155a:	bf 93       	push	r27
    155c:	ef 93       	push	r30
    155e:	ff 93       	push	r31
  CLKPR = _BV(CLKPCE);  //MEME
    1560:	80 e8       	ldi	r24, 0x80	; 128
    1562:	80 93 61 00 	sts	0x0061, r24
  CLKPR = 0;
    1566:	10 92 61 00 	sts	0x0061, r1

  time_s++;             // one second has gone by
    156a:	80 91 f7 01 	lds	r24, 0x01F7
    156e:	8f 5f       	subi	r24, 0xFF	; 255
    1570:	80 93 f7 01 	sts	0x01F7, r24

  // a minute!
  if (time_s >= 60) {
    1574:	80 91 f7 01 	lds	r24, 0x01F7
    1578:	8c 33       	cpi	r24, 0x3C	; 60
    157a:	38 f0       	brcs	.+14     	; 0x158a <__vector_9+0x4c>
    time_s = 0;
    157c:	10 92 f7 01 	sts	0x01F7, r1
    time_m++;
    1580:	80 91 f8 01 	lds	r24, 0x01F8
    1584:	8f 5f       	subi	r24, 0xFF	; 255
    1586:	80 93 f8 01 	sts	0x01F8, r24
  }

  // an hour...
  if (time_m >= 60) {
    158a:	80 91 f8 01 	lds	r24, 0x01F8
    158e:	8c 33       	cpi	r24, 0x3C	; 60
    1590:	98 f0       	brcs	.+38     	; 0x15b8 <__vector_9+0x7a>
    time_m = 0;
    1592:	10 92 f8 01 	sts	0x01F8, r1
    time_h++; 
    1596:	80 91 f9 01 	lds	r24, 0x01F9
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	80 93 f9 01 	sts	0x01F9, r24
    // lets write the time to the EEPROM
    eeprom_write_byte((uint8_t *)EE_HOUR, time_h);
    15a0:	60 91 f9 01 	lds	r22, 0x01F9
    15a4:	84 e0       	ldi	r24, 0x04	; 4
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
    eeprom_write_byte((uint8_t *)EE_MIN, time_m);
    15ac:	60 91 f8 01 	lds	r22, 0x01F8
    15b0:	85 e0       	ldi	r24, 0x05	; 5
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
  }

  // a day....
  if (time_h >= 24) {
    15b8:	80 91 f9 01 	lds	r24, 0x01F9
    15bc:	88 31       	cpi	r24, 0x18	; 24
    15be:	68 f0       	brcs	.+26     	; 0x15da <__vector_9+0x9c>
    time_h = 0;
    15c0:	10 92 f9 01 	sts	0x01F9, r1
    date_d++;
    15c4:	80 91 fb 01 	lds	r24, 0x01FB
    15c8:	8f 5f       	subi	r24, 0xFF	; 255
    15ca:	80 93 fb 01 	sts	0x01FB, r24
    eeprom_write_byte((uint8_t *)EE_DAY, date_d);
    15ce:	60 91 fb 01 	lds	r22, 0x01FB
    15d2:	83 e0       	ldi	r24, 0x03	; 3
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
  }
  */

  // a full month!
  // we check the leapyear and date to verify when its time to roll over months
  if ((date_d > 31) ||
    15da:	80 91 fb 01 	lds	r24, 0x01FB
    15de:	80 32       	cpi	r24, 0x20	; 32
    15e0:	68 f5       	brcc	.+90     	; 0x163c <__vector_9+0xfe>
    15e2:	80 91 fb 01 	lds	r24, 0x01FB
    15e6:	8f 31       	cpi	r24, 0x1F	; 31
    15e8:	81 f4       	brne	.+32     	; 0x160a <__vector_9+0xcc>
    15ea:	80 91 fa 01 	lds	r24, 0x01FA
    15ee:	84 30       	cpi	r24, 0x04	; 4
    15f0:	29 f1       	breq	.+74     	; 0x163c <__vector_9+0xfe>
    15f2:	80 91 fa 01 	lds	r24, 0x01FA
    15f6:	86 30       	cpi	r24, 0x06	; 6
    15f8:	09 f1       	breq	.+66     	; 0x163c <__vector_9+0xfe>
    15fa:	80 91 fa 01 	lds	r24, 0x01FA
    15fe:	89 30       	cpi	r24, 0x09	; 9
    1600:	e9 f0       	breq	.+58     	; 0x163c <__vector_9+0xfe>
    1602:	80 91 fa 01 	lds	r24, 0x01FA
    1606:	8b 30       	cpi	r24, 0x0B	; 11
    1608:	c9 f0       	breq	.+50     	; 0x163c <__vector_9+0xfe>
    160a:	80 91 fb 01 	lds	r24, 0x01FB
    160e:	8e 31       	cpi	r24, 0x1E	; 30
    1610:	21 f4       	brne	.+8      	; 0x161a <__vector_9+0xdc>
    1612:	80 91 fa 01 	lds	r24, 0x01FA
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	89 f0       	breq	.+34     	; 0x163c <__vector_9+0xfe>
    161a:	80 91 fb 01 	lds	r24, 0x01FB
    161e:	8d 31       	cpi	r24, 0x1D	; 29
    1620:	d9 f4       	brne	.+54     	; 0x1658 <__vector_9+0x11a>
    1622:	80 91 fa 01 	lds	r24, 0x01FA
    1626:	82 30       	cpi	r24, 0x02	; 2
    1628:	b9 f4       	brne	.+46     	; 0x1658 <__vector_9+0x11a>
      ((date_d == 31) && ((date_m == 4)||(date_m == 6)||(date_m == 9)||(date_m == 11))) ||
      ((date_d == 30) && (date_m == 2)) ||
      ((date_d == 29) && (date_m == 2) && !leapyear(2000+date_y))) {
    162a:	80 91 fc 01 	lds	r24, 0x01FC
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	80 53       	subi	r24, 0x30	; 48
    1632:	98 4f       	sbci	r25, 0xF8	; 248
    1634:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_Z8leapyearj>
  }
  */

  // a full month!
  // we check the leapyear and date to verify when its time to roll over months
  if ((date_d > 31) ||
    1638:	88 23       	and	r24, r24
    163a:	71 f4       	brne	.+28     	; 0x1658 <__vector_9+0x11a>
      ((date_d == 31) && ((date_m == 4)||(date_m == 6)||(date_m == 9)||(date_m == 11))) ||
      ((date_d == 30) && (date_m == 2)) ||
      ((date_d == 29) && (date_m == 2) && !leapyear(2000+date_y))) {
    date_d = 1;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 fb 01 	sts	0x01FB, r24
    date_m++;
    1642:	80 91 fa 01 	lds	r24, 0x01FA
    1646:	8f 5f       	subi	r24, 0xFF	; 255
    1648:	80 93 fa 01 	sts	0x01FA, r24
    eeprom_write_byte((uint8_t *)EE_MONTH, date_m);
    164c:	60 91 fa 01 	lds	r22, 0x01FA
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
  }
  
  // HAPPY NEW YEAR!
  if (date_m >= 13) {
    1658:	80 91 fa 01 	lds	r24, 0x01FA
    165c:	8d 30       	cpi	r24, 0x0D	; 13
    165e:	70 f0       	brcs	.+28     	; 0x167c <__vector_9+0x13e>
    date_y++;
    1660:	80 91 fc 01 	lds	r24, 0x01FC
    1664:	8f 5f       	subi	r24, 0xFF	; 255
    1666:	80 93 fc 01 	sts	0x01FC, r24
    date_m = 1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	80 93 fa 01 	sts	0x01FA, r24
    eeprom_write_byte((uint8_t *)EE_YEAR, date_y);
    1670:	60 91 fc 01 	lds	r22, 0x01FC
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__eewr_byte_m328p>
  }
  
  // If we're in low power mode we should get out now since the display is off
  if (sleepmode)
    167c:	80 91 03 02 	lds	r24, 0x0203
    1680:	88 23       	and	r24, r24
    1682:	09 f0       	breq	.+2      	; 0x1686 <__vector_9+0x148>
    1684:	6c c0       	rjmp	.+216    	; 0x175e <__vector_9+0x220>
    return;
   

  if (displaymode == SHOW_TIME) {
    1686:	80 91 02 02 	lds	r24, 0x0202
    168a:	88 23       	and	r24, r24
    168c:	c1 f4       	brne	.+48     	; 0x16be <__vector_9+0x180>
    if (timeunknown && (time_s % 2)) {
    168e:	80 91 04 02 	lds	r24, 0x0204
    1692:	88 23       	and	r24, r24
    1694:	09 f4       	brne	.+2      	; 0x1698 <__vector_9+0x15a>
    1696:	5a c0       	rjmp	.+180    	; 0x174c <__vector_9+0x20e>
    1698:	80 91 f7 01 	lds	r24, 0x01F7
    169c:	80 ff       	sbrs	r24, 0
    169e:	56 c0       	rjmp	.+172    	; 0x174c <__vector_9+0x20e>
      display_str("        ");
    16a0:	8b ea       	ldi	r24, 0xAB	; 171
    16a2:	91 e0       	ldi	r25, 0x01	; 1
    16a4:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
    } else {
      display_time(time_h, time_m, time_s);
    }
    if (alarm_on)
    16a8:	80 91 fe 01 	lds	r24, 0x01FE
    16ac:	20 91 06 02 	lds	r18, 0x0206
    16b0:	88 23       	and	r24, r24
    16b2:	11 f0       	breq	.+4      	; 0x16b8 <__vector_9+0x17a>
      display[0] |= 0x2;
    16b4:	22 60       	ori	r18, 0x02	; 2
    16b6:	01 c0       	rjmp	.+2      	; 0x16ba <__vector_9+0x17c>
    else 
      display[0] &= ~0x2;
    16b8:	2d 7f       	andi	r18, 0xFD	; 253
    16ba:	20 93 06 02 	sts	0x0206, r18
    
  }
  if (alarm_on && (alarm_h == time_h) && (alarm_m == time_m) && (time_s == 0)) {
    16be:	80 91 fe 01 	lds	r24, 0x01FE
    16c2:	88 23       	and	r24, r24
    16c4:	e1 f0       	breq	.+56     	; 0x16fe <__vector_9+0x1c0>
    16c6:	90 91 00 02 	lds	r25, 0x0200
    16ca:	80 91 f9 01 	lds	r24, 0x01F9
    16ce:	98 17       	cp	r25, r24
    16d0:	b1 f4       	brne	.+44     	; 0x16fe <__vector_9+0x1c0>
    16d2:	90 91 01 02 	lds	r25, 0x0201
    16d6:	80 91 f8 01 	lds	r24, 0x01F8
    16da:	98 17       	cp	r25, r24
    16dc:	81 f4       	brne	.+32     	; 0x16fe <__vector_9+0x1c0>
    16de:	80 91 f7 01 	lds	r24, 0x01F7
    16e2:	88 23       	and	r24, r24
    16e4:	61 f4       	brne	.+24     	; 0x16fe <__vector_9+0x1c0>
    DEBUGP("alarm on!");
    16e6:	83 e3       	ldi	r24, 0x33	; 51
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	61 e0       	ldi	r22, 0x01	; 1
    16ec:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
    alarming = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	80 93 ff 01 	sts	0x01FF, r24
    snoozetimer = 0;
    16f6:	10 92 15 02 	sts	0x0215, r1
    16fa:	10 92 14 02 	sts	0x0214, r1
  }

  if (timeoutcounter)
    16fe:	80 91 1c 02 	lds	r24, 0x021C
    1702:	88 23       	and	r24, r24
    1704:	29 f0       	breq	.+10     	; 0x1710 <__vector_9+0x1d2>
    timeoutcounter--;
    1706:	80 91 1c 02 	lds	r24, 0x021C
    170a:	81 50       	subi	r24, 0x01	; 1
    170c:	80 93 1c 02 	sts	0x021C, r24
  if (buttonholdcounter)
    1710:	80 91 1b 02 	lds	r24, 0x021B
    1714:	88 23       	and	r24, r24
    1716:	29 f0       	breq	.+10     	; 0x1722 <__vector_9+0x1e4>
    buttonholdcounter--;
    1718:	80 91 1b 02 	lds	r24, 0x021B
    171c:	81 50       	subi	r24, 0x01	; 1
    171e:	80 93 1b 02 	sts	0x021B, r24
  if (snoozetimer) {
    1722:	80 91 14 02 	lds	r24, 0x0214
    1726:	90 91 15 02 	lds	r25, 0x0215
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	c1 f0       	breq	.+48     	; 0x175e <__vector_9+0x220>
    snoozetimer--;
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	90 93 15 02 	sts	0x0215, r25
    1734:	80 93 14 02 	sts	0x0214, r24
    1738:	20 91 06 02 	lds	r18, 0x0206
    if (snoozetimer % 2) 
    173c:	80 ff       	sbrs	r24, 0
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <__vector_9+0x206>
      display[0] |= 0x2;
    1740:	22 60       	ori	r18, 0x02	; 2
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <__vector_9+0x208>
    else
      display[0] &= ~0x2;
    1744:	2d 7f       	andi	r18, 0xFD	; 253
    1746:	20 93 06 02 	sts	0x0206, r18
    174a:	09 c0       	rjmp	.+18     	; 0x175e <__vector_9+0x220>

  if (displaymode == SHOW_TIME) {
    if (timeunknown && (time_s % 2)) {
      display_str("        ");
    } else {
      display_time(time_h, time_m, time_s);
    174c:	80 91 f9 01 	lds	r24, 0x01F9
    1750:	60 91 f8 01 	lds	r22, 0x01F8
    1754:	40 91 f7 01 	lds	r20, 0x01F7
    1758:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z12display_timehhh>
    175c:	a5 cf       	rjmp	.-182    	; 0x16a8 <__vector_9+0x16a>
    if (snoozetimer % 2) 
      display[0] |= 0x2;
    else
      display[0] &= ~0x2;
  }
}
    175e:	ff 91       	pop	r31
    1760:	ef 91       	pop	r30
    1762:	bf 91       	pop	r27
    1764:	af 91       	pop	r26
    1766:	9f 91       	pop	r25
    1768:	8f 91       	pop	r24
    176a:	7f 91       	pop	r23
    176c:	6f 91       	pop	r22
    176e:	5f 91       	pop	r21
    1770:	4f 91       	pop	r20
    1772:	3f 91       	pop	r19
    1774:	2f 91       	pop	r18
    1776:	0f 90       	pop	r0
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	0f 90       	pop	r0
    177c:	1f 90       	pop	r1
    177e:	18 95       	reti

00001780 <_Z9setsnoozev>:
// this sets the snoozetimer off in MAXSNOOZE seconds - which turns on
// the alarm again
void setsnooze(void) {
  //snoozetimer = eeprom_read_byte((uint8_t *)EE_SNOOZE);
  //snoozetimer *= 60; // convert minutes to seconds
  snoozetimer = MAXSNOOZE;
    1780:	88 e5       	ldi	r24, 0x58	; 88
    1782:	92 e0       	ldi	r25, 0x02	; 2
    1784:	90 93 15 02 	sts	0x0215, r25
    1788:	80 93 14 02 	sts	0x0214, r24
  DEBUGP("snooze");
    178c:	86 e4       	ldi	r24, 0x46	; 70
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
  display_str("snoozing");
    1796:	84 eb       	ldi	r24, 0xB4	; 180
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
  displaymode = SHOW_SNOOZE;
    179e:	89 e0       	ldi	r24, 0x09	; 9
    17a0:	80 93 02 02 	sts	0x0202, r24
  delayms(1000);
    17a4:	88 ee       	ldi	r24, 0xE8	; 232
    17a6:	93 e0       	ldi	r25, 0x03	; 3
    17a8:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
  displaymode = SHOW_TIME;
    17ac:	10 92 02 02 	sts	0x0202, r1
}
    17b0:	08 95       	ret

000017b2 <__vector_3>:
  }
  PCICR = _BV(PCIE0) | _BV(PCIE2);
}

// called when button 2 is pressed
ISR(PCINT0_vect) {
    17b2:	1f 92       	push	r1
    17b4:	0f 92       	push	r0
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	0f 92       	push	r0
    17ba:	11 24       	eor	r1, r1
    17bc:	2f 93       	push	r18
    17be:	3f 93       	push	r19
    17c0:	4f 93       	push	r20
    17c2:	5f 93       	push	r21
    17c4:	6f 93       	push	r22
    17c6:	7f 93       	push	r23
    17c8:	8f 93       	push	r24
    17ca:	9f 93       	push	r25
    17cc:	af 93       	push	r26
    17ce:	bf 93       	push	r27
    17d0:	ef 93       	push	r30
    17d2:	ff 93       	push	r31
  PCICR = 0;
    17d4:	10 92 68 00 	sts	0x0068, r1
  sei();
    17d8:	78 94       	sei
  if (! (PINB & _BV(BUTTON2))) {
    17da:	83 b1       	in	r24, 0x03	; 3
    17dc:	80 fd       	sbrc	r24, 0
    17de:	23 c0       	rjmp	.+70     	; 0x1826 <__vector_3+0x74>
    // button2 is pressed
    if (! (last_buttonstate & 0x2)) { // was not pressed before
    17e0:	80 91 18 02 	lds	r24, 0x0218
    17e4:	81 fd       	sbrc	r24, 1
    17e6:	24 c0       	rjmp	.+72     	; 0x1830 <__vector_3+0x7e>
      delayms(10);                    // debounce
    17e8:	8a e0       	ldi	r24, 0x0A	; 10
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
      if (PINB & _BV(BUTTON2)) {      // filter out bounces
    17f0:	18 99       	sbic	0x03, 0	; 3
    17f2:	1e c0       	rjmp	.+60     	; 0x1830 <__vector_3+0x7e>
	PCICR = _BV(PCIE0) | _BV(PCIE2);
	return;
      }
      tick();                         // make a noise
    17f4:	0e 94 25 02 	call	0x44a	; 0x44a <_Z4tickv>
      // check if we will snag this button press for snoozing
      if (alarming) {
    17f8:	80 91 ff 01 	lds	r24, 0x01FF
    17fc:	88 23       	and	r24, r24
    17fe:	19 f0       	breq	.+6      	; 0x1806 <__vector_3+0x54>
	setsnooze(); 	// turn on snooze
    1800:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_Z9setsnoozev>
    1804:	15 c0       	rjmp	.+42     	; 0x1830 <__vector_3+0x7e>
	PCICR = _BV(PCIE0) | _BV(PCIE2);
	return;
      }
      last_buttonstate |= 0x2;
    1806:	80 91 18 02 	lds	r24, 0x0218
    180a:	82 60       	ori	r24, 0x02	; 2
    180c:	80 93 18 02 	sts	0x0218, r24
      just_pressed |= 0x2;
    1810:	80 91 19 02 	lds	r24, 0x0219
    1814:	82 60       	ori	r24, 0x02	; 2
    1816:	80 93 19 02 	sts	0x0219, r24
      DEBUGP("b2");
    181a:	8d e3       	ldi	r24, 0x3D	; 61
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
    1824:	05 c0       	rjmp	.+10     	; 0x1830 <__vector_3+0x7e>
    }
  } else {
    last_buttonstate &= ~0x2;
    1826:	80 91 18 02 	lds	r24, 0x0218
    182a:	8d 7f       	andi	r24, 0xFD	; 253
    182c:	80 93 18 02 	sts	0x0218, r24
  }
  PCICR = _BV(PCIE0) | _BV(PCIE2);
    1830:	85 e0       	ldi	r24, 0x05	; 5
    1832:	80 93 68 00 	sts	0x0068, r24
}
    1836:	ff 91       	pop	r31
    1838:	ef 91       	pop	r30
    183a:	bf 91       	pop	r27
    183c:	af 91       	pop	r26
    183e:	9f 91       	pop	r25
    1840:	8f 91       	pop	r24
    1842:	7f 91       	pop	r23
    1844:	6f 91       	pop	r22
    1846:	5f 91       	pop	r21
    1848:	4f 91       	pop	r20
    184a:	3f 91       	pop	r19
    184c:	2f 91       	pop	r18
    184e:	0f 90       	pop	r0
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	0f 90       	pop	r0
    1854:	1f 90       	pop	r1
    1856:	18 95       	reti

00001858 <__vector_5>:
// This allows for 'high speed incrementing' when setting the time
volatile uint8_t last_buttonstate = 0, just_pressed = 0, pressed = 0;
volatile uint8_t buttonholdcounter = 0;

// called when button 1 and 3 are pressed
ISR(PCINT2_vect) {
    1858:	1f 92       	push	r1
    185a:	0f 92       	push	r0
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	0f 92       	push	r0
    1860:	11 24       	eor	r1, r1
    1862:	2f 93       	push	r18
    1864:	3f 93       	push	r19
    1866:	4f 93       	push	r20
    1868:	5f 93       	push	r21
    186a:	6f 93       	push	r22
    186c:	7f 93       	push	r23
    186e:	8f 93       	push	r24
    1870:	9f 93       	push	r25
    1872:	af 93       	push	r26
    1874:	bf 93       	push	r27
    1876:	ef 93       	push	r30
    1878:	ff 93       	push	r31
  PCICR = 0;
    187a:	10 92 68 00 	sts	0x0068, r1
  // allow interrupts while we're doing this
  sei();
    187e:	78 94       	sei

  if (! (PIND & _BV(BUTTON1))) {
    1880:	4d 99       	sbic	0x09, 5	; 9
    1882:	20 c0       	rjmp	.+64     	; 0x18c4 <__vector_5+0x6c>
    // button1 is pressed
    if (! (last_buttonstate & 0x1)) { // was not pressed before
    1884:	80 91 18 02 	lds	r24, 0x0218
    1888:	80 fd       	sbrc	r24, 0
    188a:	21 c0       	rjmp	.+66     	; 0x18ce <__vector_5+0x76>
      delayms(10);                    // debounce
    188c:	8a e0       	ldi	r24, 0x0A	; 10
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
      if (PIND & _BV(BUTTON1)) {      // filter out bounce
    1894:	4d 99       	sbic	0x09, 5	; 9
    1896:	5c c0       	rjmp	.+184    	; 0x1950 <__vector_5+0xf8>
	PCICR = _BV(PCIE0) | _BV(PCIE2);
	return;
      }
      tick();                         // make a noise
    1898:	0e 94 25 02 	call	0x44a	; 0x44a <_Z4tickv>
      // check if we will snag this button press for snoozing
      if (alarming) {
    189c:	80 91 ff 01 	lds	r24, 0x01FF
    18a0:	88 23       	and	r24, r24
    18a2:	91 f5       	brne	.+100    	; 0x1908 <__vector_5+0xb0>
	// turn on snooze
	setsnooze();
	PCICR = _BV(PCIE0) | _BV(PCIE2);
	return;
      }
      last_buttonstate |= 0x1;
    18a4:	80 91 18 02 	lds	r24, 0x0218
    18a8:	81 60       	ori	r24, 0x01	; 1
    18aa:	80 93 18 02 	sts	0x0218, r24
      just_pressed |= 0x1;
    18ae:	80 91 19 02 	lds	r24, 0x0219
    18b2:	81 60       	ori	r24, 0x01	; 1
    18b4:	80 93 19 02 	sts	0x0219, r24
      DEBUGP("b1");
    18b8:	83 e4       	ldi	r24, 0x43	; 67
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
    18c2:	05 c0       	rjmp	.+10     	; 0x18ce <__vector_5+0x76>
    }
  } else {
    last_buttonstate &= ~0x1;
    18c4:	80 91 18 02 	lds	r24, 0x0218
    18c8:	8e 7f       	andi	r24, 0xFE	; 254
    18ca:	80 93 18 02 	sts	0x0218, r24
  }

  if (! (PIND & _BV(BUTTON3))) {
    18ce:	4c 99       	sbic	0x09, 4	; 9
    18d0:	38 c0       	rjmp	.+112    	; 0x1942 <__vector_5+0xea>
    // button3 is pressed
    if (! (last_buttonstate & 0x4)) { // was not pressed before
    18d2:	80 91 18 02 	lds	r24, 0x0218
    18d6:	82 fd       	sbrc	r24, 2
    18d8:	3b c0       	rjmp	.+118    	; 0x1950 <__vector_5+0xf8>
      delayms(10);                    // debounce
    18da:	8a e0       	ldi	r24, 0x0A	; 10
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
      if (PIND & _BV(BUTTON3)) {      // filter out bounces
    18e2:	4c 99       	sbic	0x09, 4	; 9
    18e4:	35 c0       	rjmp	.+106    	; 0x1950 <__vector_5+0xf8>
	PCICR = _BV(PCIE0) | _BV(PCIE2);
	return;
      }
      buttonholdcounter = 2;          // see if we're press-and-holding
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	80 93 1b 02 	sts	0x021B, r24
      while (buttonholdcounter) {
    18ec:	1b c0       	rjmp	.+54     	; 0x1924 <__vector_5+0xcc>
	if (PIND & _BV(BUTTON3)) {        // released
    18ee:	4c 9b       	sbis	0x09, 4	; 9
    18f0:	19 c0       	rjmp	.+50     	; 0x1924 <__vector_5+0xcc>
	  tick();                         // make a noise
    18f2:	0e 94 25 02 	call	0x44a	; 0x44a <_Z4tickv>
	  last_buttonstate &= ~0x4;
    18f6:	80 91 18 02 	lds	r24, 0x0218
    18fa:	8b 7f       	andi	r24, 0xFB	; 251
    18fc:	80 93 18 02 	sts	0x0218, r24
	  // check if we will snag this button press for snoozing
	  if (alarming) {
    1900:	80 91 ff 01 	lds	r24, 0x01FF
    1904:	88 23       	and	r24, r24
    1906:	19 f0       	breq	.+6      	; 0x190e <__vector_5+0xb6>
	    // turn on snooze
	    setsnooze();
    1908:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_Z9setsnoozev>
    190c:	21 c0       	rjmp	.+66     	; 0x1950 <__vector_5+0xf8>
	    PCICR = _BV(PCIE0) | _BV(PCIE2);
	    return;
	  }
	  DEBUGP("b3");
    190e:	80 e4       	ldi	r24, 0x40	; 64
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	61 e0       	ldi	r22, 0x01	; 1
    1914:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
	  just_pressed |= 0x4;
    1918:	80 91 19 02 	lds	r24, 0x0219
    191c:	84 60       	ori	r24, 0x04	; 4
    191e:	80 93 19 02 	sts	0x0219, r24
    1922:	16 c0       	rjmp	.+44     	; 0x1950 <__vector_5+0xf8>
      if (PIND & _BV(BUTTON3)) {      // filter out bounces
	PCICR = _BV(PCIE0) | _BV(PCIE2);
	return;
      }
      buttonholdcounter = 2;          // see if we're press-and-holding
      while (buttonholdcounter) {
    1924:	80 91 1b 02 	lds	r24, 0x021B
    1928:	88 23       	and	r24, r24
    192a:	09 f7       	brne	.-62     	; 0x18ee <__vector_5+0x96>
	  just_pressed |= 0x4;
	  PCICR = _BV(PCIE0) | _BV(PCIE2);
	  return;
	}
      }
      last_buttonstate |= 0x4;
    192c:	80 91 18 02 	lds	r24, 0x0218
    1930:	84 60       	ori	r24, 0x04	; 4
    1932:	80 93 18 02 	sts	0x0218, r24
      pressed |= 0x4;                 // held down
    1936:	80 91 1a 02 	lds	r24, 0x021A
    193a:	84 60       	ori	r24, 0x04	; 4
    193c:	80 93 1a 02 	sts	0x021A, r24
    1940:	07 c0       	rjmp	.+14     	; 0x1950 <__vector_5+0xf8>
    }
  } else {
    pressed = 0;                      // button released
    1942:	10 92 1a 02 	sts	0x021A, r1
    last_buttonstate &= ~0x4;
    1946:	80 91 18 02 	lds	r24, 0x0218
    194a:	8b 7f       	andi	r24, 0xFB	; 251
    194c:	80 93 18 02 	sts	0x0218, r24
  }
  PCICR = _BV(PCIE0) | _BV(PCIE2);
    1950:	85 e0       	ldi	r24, 0x05	; 5
    1952:	80 93 68 00 	sts	0x0068, r24
}
    1956:	ff 91       	pop	r31
    1958:	ef 91       	pop	r30
    195a:	bf 91       	pop	r27
    195c:	af 91       	pop	r26
    195e:	9f 91       	pop	r25
    1960:	8f 91       	pop	r24
    1962:	7f 91       	pop	r23
    1964:	6f 91       	pop	r22
    1966:	5f 91       	pop	r21
    1968:	4f 91       	pop	r20
    196a:	3f 91       	pop	r19
    196c:	2f 91       	pop	r18
    196e:	0f 90       	pop	r0
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	0f 90       	pop	r0
    1974:	1f 90       	pop	r1
    1976:	18 95       	reti

00001978 <main>:
    PCMSK2 = _BV(PCINT21) | _BV(PCINT20);    
}



int main(void) {
    1978:	bf 92       	push	r11
    197a:	cf 92       	push	r12
    197c:	df 92       	push	r13
    197e:	ef 92       	push	r14
    1980:	ff 92       	push	r15
    1982:	0f 93       	push	r16
    1984:	1f 93       	push	r17
  //  uint8_t i;
  uint8_t mcustate;

  // turn boost off
  TCCR0B = 0;
    1986:	15 bc       	out	0x25, r1	; 37
  BOOST_DDR |= _BV(BOOST);
    1988:	56 9a       	sbi	0x0a, 6	; 10
  BOOST_PORT &= ~_BV(BOOST); // pull boost fet low
    198a:	5e 98       	cbi	0x0b, 6	; 11

  // check if we were reset
  mcustate = MCUSR;
    198c:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    198e:	14 be       	out	0x34, r1	; 52

  uart_putw_hex(mcustate);
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_Z13uart_putw_hexj>

  wdt_disable();
    1996:	88 e1       	ldi	r24, 0x18	; 24
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	80 93 60 00 	sts	0x0060, r24
    19a0:	10 92 60 00 	sts	0x0060, r1
    19a4:	0f be       	out	0x3f, r0	; 63
  // now turn it back on... 2 second time out
  //WDTCSR |= _BV(WDP0) | _BV(WDP1) | _BV(WDP2);
  //WDTCSR = _BV(WDE);
  wdt_enable(WDTO_2S);
    19a6:	2f e0       	ldi	r18, 0x0F	; 15
    19a8:	88 e1       	ldi	r24, 0x18	; 24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	a8 95       	wdr
    19b2:	80 93 60 00 	sts	0x0060, r24
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	20 93 60 00 	sts	0x0060, r18
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void pet_the_dog(void) {
  wdt_reset();
    19bc:	a8 95       	wdr
  wdt_enable(WDTO_2S);
  pet_the_dog();

  // we lost power at some point so lets alert the user
  // that the time may be wrong (the clock still works)
  timeunknown = 1;
    19be:	11 e0       	ldi	r17, 0x01	; 1
    19c0:	10 93 04 02 	sts	0x0204, r17

  // have we read the time & date from eeprom?
  restored = 0;
    19c4:	10 92 05 02 	sts	0x0205, r1

  // setup uart
  uart_init(BRRL_192);
    19c8:	8a e1       	ldi	r24, 0x1A	; 26
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_Z9uart_initj>
  //DEBUGP("VFD Clock");
  DEBUGP("!");
    19d0:	8c e1       	ldi	r24, 0x1C	; 28
    19d2:	91 e0       	ldi	r25, 0x01	; 1
    19d4:	61 e0       	ldi	r22, 0x01	; 1
    19d6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>

  //DEBUGP("turning on anacomp");
  // set up analog comparator
  ACSR = _BV(ACBG) | _BV(ACIE); // use bandgap, intr. on toggle!
    19da:	88 e4       	ldi	r24, 0x48	; 72
    19dc:	80 bf       	out	0x30, r24	; 48
    19de:	8f ec       	ldi	r24, 0xCF	; 207
    19e0:	97 e0       	ldi	r25, 0x07	; 7
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <main+0x6a>
    19e6:	00 c0       	rjmp	.+0      	; 0x19e8 <main+0x70>
    19e8:	00 00       	nop
  _delay_ms(1);
  // settle!
  if (ACSR & _BV(ACO)) {
    19ea:	00 b6       	in	r0, 0x30	; 48
    19ec:	05 fe       	sbrs	r0, 5
    19ee:	0b c0       	rjmp	.+22     	; 0x1a06 <main+0x8e>
    // hmm we should not interrupt here
    ACSR |= _BV(ACI);
    19f0:	80 b7       	in	r24, 0x30	; 48
    19f2:	80 61       	ori	r24, 0x10	; 16
    19f4:	80 bf       	out	0x30, r24	; 48

    // even in low power mode, we run the clock 
    DEBUGP("clock init");
    19f6:	81 e1       	ldi	r24, 0x11	; 17
    19f8:	91 e0       	ldi	r25, 0x01	; 1
    19fa:	61 e0       	ldi	r22, 0x01	; 1
    19fc:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
    clock_init();  
    1a00:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z10clock_initv>
    1a04:	45 c0       	rjmp	.+138    	; 0x1a90 <main+0x118>

  } else {
    // we aren't in low power mode so init stuff

    // init io's
    initbuttons();
    1a06:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z11initbuttonsv>
    
    VFDSWITCH_PORT &= ~_BV(VFDSWITCH);
    1a0a:	5b 98       	cbi	0x0b, 3	; 11
    
    DEBUGP("turning on buttons");
    1a0c:	8e ef       	ldi	r24, 0xFE	; 254
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	61 e0       	ldi	r22, 0x01	; 1
    1a12:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
    // set up button interrupts
    DEBUGP("turning on alarmsw");
    1a16:	8b ee       	ldi	r24, 0xEB	; 235
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	61 e0       	ldi	r22, 0x01	; 1
    1a1c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
    // set off an interrupt if alarm is set or unset
    EICRA = _BV(ISC00);
    1a20:	10 93 69 00 	sts	0x0069, r17
    EIMSK = _BV(INT0);
    1a24:	1d bb       	out	0x1d, r17	; 29
  
    displaymode = SHOW_TIME;
    1a26:	10 92 02 02 	sts	0x0202, r1
    DEBUGP("vfd init");
    1a2a:	82 ee       	ldi	r24, 0xE2	; 226
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>

/************************* LOW LEVEL DISPLAY ************************/

// Setup SPI
void vfd_init(void) {
  SPCR  = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
    1a34:	81 e5       	ldi	r24, 0x51	; 81
    1a36:	8c bd       	out	0x2c, r24	; 44
  
    displaymode = SHOW_TIME;
    DEBUGP("vfd init");
    vfd_init();
    
    DEBUGP("boost init");
    1a38:	87 ed       	ldi	r24, 0xD7	; 215
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	61 e0       	ldi	r22, 0x01	; 1
    1a3e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
    boost_init(eeprom_read_byte((uint8_t *)EE_BRIGHT));
    1a42:	89 e0       	ldi	r24, 0x09	; 9
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
    1a4a:	0e 94 92 02 	call	0x524	; 0x524 <_Z10boost_inith>
    sei();
    1a4e:	78 94       	sei

    region = eeprom_read_byte((uint8_t *)EE_REGION);
    1a50:	8b e0       	ldi	r24, 0x0B	; 11
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__eerd_byte_m328p>
    1a58:	80 93 f6 01 	sts	0x01F6, r24
    
    DEBUGP("speaker init");
    1a5c:	8a ec       	ldi	r24, 0xCA	; 202
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	61 e0       	ldi	r22, 0x01	; 1
    1a62:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
    speaker_init();
    1a66:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_Z12speaker_initv>

    beep(4000, 1);
    1a6a:	80 ea       	ldi	r24, 0xA0	; 160
    1a6c:	9f e0       	ldi	r25, 0x0F	; 15
    1a6e:	61 e0       	ldi	r22, 0x01	; 1
    1a70:	0e 94 49 02 	call	0x492	; 0x492 <_Z4beepjh>

    DEBUGP("clock init");
    1a74:	8f eb       	ldi	r24, 0xBF	; 191
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	61 e0       	ldi	r22, 0x01	; 1
    1a7a:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
    clock_init();  
    1a7e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_Z10clock_initv>

    DEBUGP("alarm init");
    1a82:	84 eb       	ldi	r24, 0xB4	; 180
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	61 e0       	ldi	r22, 0x01	; 1
    1a88:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
    setalarmstate();
    1a8c:	0e 94 10 08 	call	0x1020	; 0x1020 <_Z13setalarmstatev>
  }
  DEBUGP("done");
    1a90:	8f ea       	ldi	r24, 0xAF	; 175
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	61 e0       	ldi	r22, 0x01	; 1
    1a96:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_Z13ROM_putstringPKch>
      default:
	displaymode = SHOW_TIME;
      }
    } else if ((just_pressed & 0x2) || (just_pressed & 0x4)) {
      just_pressed = 0;
      displaymode = NONE;
    1a9a:	e3 e6       	ldi	r30, 0x63	; 99
    1a9c:	be 2e       	mov	r11, r30
	displaymode = SET_ALARM;
	display_str("set alarm");
	set_alarm();
	break;
      case (SET_ALARM):
	displaymode = SET_TIME;
    1a9e:	73 e0       	ldi	r23, 0x03	; 3
    1aa0:	c7 2e       	mov	r12, r23
	displaymode = SET_BRIGHTNESS;
	display_str("set brit");
	set_brightness();
	break;
      case (SET_BRIGHTNESS):
	displaymode = SET_VOLUME;
    1aa2:	67 e0       	ldi	r22, 0x07	; 7
    1aa4:	d6 2e       	mov	r13, r22
	displaymode = SET_DATE;
	display_str("set date");
	set_date();
	break;
      case (SET_DATE):
	displaymode = SET_BRIGHTNESS;
    1aa6:	56 e0       	ldi	r21, 0x06	; 6
    1aa8:	e5 2e       	mov	r14, r21
	displaymode = SET_VOLUME;
	display_str("set vol ");
	set_volume();
	break;
      case (SET_VOLUME):
	displaymode = SET_REGION;
    1aaa:	48 e0       	ldi	r20, 0x08	; 8
    1aac:	f4 2e       	mov	r15, r20
    //DEBUGP(".");
    if (just_pressed & 0x1) {
      just_pressed = 0;
      switch(displaymode) {
      case (SHOW_TIME):
	displaymode = SET_ALARM;
    1aae:	04 e0       	ldi	r16, 0x04	; 4
	display_str("set time");
	set_time();
	timeunknown = 0;
	break;
      case (SET_TIME):
	displaymode = SET_DATE;
    1ab0:	15 e0       	ldi	r17, 0x05	; 5
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void pet_the_dog(void) {
  wdt_reset();
    1ab2:	a8 95       	wdr
  DEBUGP("done");
  while (1) {
    //_delay_ms(100);
    pet_the_dog();
    //uart_putc_hex(ACSR);
    if (ACSR & _BV(ACO)) {
    1ab4:	00 b6       	in	r0, 0x30	; 48
    1ab6:	05 fe       	sbrs	r0, 5
    1ab8:	03 c0       	rjmp	.+6      	; 0x1ac0 <main+0x148>
      // DEBUGP("SLEEPYTIME");
      gotosleep();
    1aba:	0e 94 40 01 	call	0x280	; 0x280 <_Z9gotosleepv>
      continue;
    1abe:	f9 cf       	rjmp	.-14     	; 0x1ab2 <main+0x13a>
    }
    //DEBUGP(".");
    if (just_pressed & 0x1) {
    1ac0:	80 91 19 02 	lds	r24, 0x0219
    1ac4:	80 ff       	sbrs	r24, 0
    1ac6:	4e c0       	rjmp	.+156    	; 0x1b64 <main+0x1ec>
      just_pressed = 0;
    1ac8:	10 92 19 02 	sts	0x0219, r1
      switch(displaymode) {
    1acc:	80 91 02 02 	lds	r24, 0x0202
    1ad0:	84 30       	cpi	r24, 0x04	; 4
    1ad2:	c9 f0       	breq	.+50     	; 0x1b06 <main+0x18e>
    1ad4:	85 30       	cpi	r24, 0x05	; 5
    1ad6:	30 f4       	brcc	.+12     	; 0x1ae4 <main+0x16c>
    1ad8:	88 23       	and	r24, r24
    1ada:	61 f0       	breq	.+24     	; 0x1af4 <main+0x17c>
    1adc:	83 30       	cpi	r24, 0x03	; 3
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <main+0x16a>
    1ae0:	56 c0       	rjmp	.+172    	; 0x1b8e <main+0x216>
    1ae2:	1c c0       	rjmp	.+56     	; 0x1b1c <main+0x1a4>
    1ae4:	86 30       	cpi	r24, 0x06	; 6
    1ae6:	61 f1       	breq	.+88     	; 0x1b40 <main+0x1c8>
    1ae8:	86 30       	cpi	r24, 0x06	; 6
    1aea:	08 f1       	brcs	.+66     	; 0x1b2e <main+0x1b6>
    1aec:	87 30       	cpi	r24, 0x07	; 7
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <main+0x17a>
    1af0:	4e c0       	rjmp	.+156    	; 0x1b8e <main+0x216>
    1af2:	2f c0       	rjmp	.+94     	; 0x1b52 <main+0x1da>
      case (SHOW_TIME):
	displaymode = SET_ALARM;
    1af4:	00 93 02 02 	sts	0x0202, r16
	display_str("set alarm");
    1af8:	8d eb       	ldi	r24, 0xBD	; 189
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
	set_alarm();
    1b00:	0e 94 a4 04 	call	0x948	; 0x948 <_Z9set_alarmv>
	break;
    1b04:	d6 cf       	rjmp	.-84     	; 0x1ab2 <main+0x13a>
      case (SET_ALARM):
	displaymode = SET_TIME;
    1b06:	c0 92 02 02 	sts	0x0202, r12
	display_str("set time");
    1b0a:	87 ec       	ldi	r24, 0xC7	; 199
    1b0c:	91 e0       	ldi	r25, 0x01	; 1
    1b0e:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
	set_time();
    1b12:	0e 94 44 03 	call	0x688	; 0x688 <_Z8set_timev>
	timeunknown = 0;
    1b16:	10 92 04 02 	sts	0x0204, r1
	break;
    1b1a:	cb cf       	rjmp	.-106    	; 0x1ab2 <main+0x13a>
      case (SET_TIME):
	displaymode = SET_DATE;
    1b1c:	10 93 02 02 	sts	0x0202, r17
	display_str("set date");
    1b20:	80 ed       	ldi	r24, 0xD0	; 208
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
	set_date();
    1b28:	0e 94 f4 06 	call	0xde8	; 0xde8 <_Z8set_datev>
	break;
    1b2c:	c2 cf       	rjmp	.-124    	; 0x1ab2 <main+0x13a>
      case (SET_DATE):
	displaymode = SET_BRIGHTNESS;
    1b2e:	e0 92 02 02 	sts	0x0202, r14
	display_str("set brit");
    1b32:	89 ed       	ldi	r24, 0xD9	; 217
    1b34:	91 e0       	ldi	r25, 0x01	; 1
    1b36:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
	set_brightness();
    1b3a:	0e 94 c2 09 	call	0x1384	; 0x1384 <_Z14set_brightnessv>
	break;
    1b3e:	b9 cf       	rjmp	.-142    	; 0x1ab2 <main+0x13a>
      case (SET_BRIGHTNESS):
	displaymode = SET_VOLUME;
    1b40:	d0 92 02 02 	sts	0x0202, r13
	display_str("set vol ");
    1b44:	82 ee       	ldi	r24, 0xE2	; 226
    1b46:	91 e0       	ldi	r25, 0x01	; 1
    1b48:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
	set_volume();
    1b4c:	0e 94 2a 09 	call	0x1254	; 0x1254 <_Z10set_volumev>
	break;
    1b50:	b0 cf       	rjmp	.-160    	; 0x1ab2 <main+0x13a>
      case (SET_VOLUME):
	displaymode = SET_REGION;
    1b52:	f0 92 02 02 	sts	0x0202, r15
	display_str("set regn");
    1b56:	8b ee       	ldi	r24, 0xEB	; 235
    1b58:	91 e0       	ldi	r25, 0x01	; 1
    1b5a:	0e 94 76 05 	call	0xaec	; 0xaec <_Z11display_strPKc>
	set_region();
    1b5e:	0e 94 cd 08 	call	0x119a	; 0x119a <_Z10set_regionv>
	break;
    1b62:	a7 cf       	rjmp	.-178    	; 0x1ab2 <main+0x13a>
	break;
	*/
      default:
	displaymode = SHOW_TIME;
      }
    } else if ((just_pressed & 0x2) || (just_pressed & 0x4)) {
    1b64:	80 91 19 02 	lds	r24, 0x0219
    1b68:	81 fd       	sbrc	r24, 1
    1b6a:	04 c0       	rjmp	.+8      	; 0x1b74 <main+0x1fc>
    1b6c:	80 91 19 02 	lds	r24, 0x0219
    1b70:	82 ff       	sbrs	r24, 2
    1b72:	9f cf       	rjmp	.-194    	; 0x1ab2 <main+0x13a>
      just_pressed = 0;
    1b74:	10 92 19 02 	sts	0x0219, r1
      displaymode = NONE;
    1b78:	b0 92 02 02 	sts	0x0202, r11
      display_date(DAY);
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	0e 94 a3 05 	call	0xb46	; 0xb46 <_Z12display_dateh>
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void pet_the_dog(void) {
  wdt_reset();
    1b82:	a8 95       	wdr
      just_pressed = 0;
      displaymode = NONE;
      display_date(DAY);

      pet_the_dog();
      delayms(1500);
    1b84:	8c ed       	ldi	r24, 0xDC	; 220
    1b86:	95 e0       	ldi	r25, 0x05	; 5
    1b88:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z7delaymsj>
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void pet_the_dog(void) {
  wdt_reset();
    1b8c:	a8 95       	wdr

      pet_the_dog();
      delayms(1500);
      pet_the_dog();

      displaymode = SHOW_TIME;     
    1b8e:	10 92 02 02 	sts	0x0202, r1
    1b92:	8f cf       	rjmp	.-226    	; 0x1ab2 <main+0x13a>

00001b94 <_Z8vfd_initv>:

/************************* LOW LEVEL DISPLAY ************************/

// Setup SPI
void vfd_init(void) {
  SPCR  = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
    1b94:	81 e5       	ldi	r24, 0x51	; 81
    1b96:	8c bd       	out	0x2c, r24	; 44
}
    1b98:	08 95       	ret

00001b9a <_Z8spi_xferh>:
}

// Send 1 byte via SPI
void spi_xfer(uint8_t c) {

  SPDR = c;
    1b9a:	8e bd       	out	0x2e, r24	; 46
  while (! (SPSR & _BV(SPIF)));
    1b9c:	0d b4       	in	r0, 0x2d	; 45
    1b9e:	07 fe       	sbrs	r0, 7
    1ba0:	fd cf       	rjmp	.-6      	; 0x1b9c <_Z8spi_xferh+0x2>
}
    1ba2:	08 95       	ret

00001ba4 <_Z8vfd_sendm>:
  vfd_send(d);
}

// send raw data to display, its pretty straightforward. Just send 32 bits via SPI
// the bottom 20 define the segments
void vfd_send(uint32_t d) {
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <_Z8vfd_sendm+0x6>
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
  // send lowest 20 bits
  cli();       // to prevent flicker we turn off interrupts
    1bae:	f8 94       	cli
  spi_xfer(d >> 16);
    1bb0:	6a 83       	std	Y+2, r22	; 0x02
    1bb2:	79 83       	std	Y+1, r23	; 0x01
    1bb4:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_Z8spi_xferh>
  spi_xfer(d >> 8);
    1bb8:	79 81       	ldd	r23, Y+1	; 0x01
    1bba:	87 2f       	mov	r24, r23
    1bbc:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_Z8spi_xferh>
  spi_xfer(d);
    1bc0:	6a 81       	ldd	r22, Y+2	; 0x02
    1bc2:	86 2f       	mov	r24, r22
    1bc4:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_Z8spi_xferh>

  // latch data
  VFDLOAD_PORT |= _BV(VFDLOAD);
    1bc8:	40 9a       	sbi	0x08, 0	; 8
  VFDLOAD_PORT &= ~_BV(VFDLOAD);
    1bca:	40 98       	cbi	0x08, 0	; 8
  sei();
    1bcc:	78 94       	sei
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <_Z10setdisplayhh>:
}

// This changes and updates the display
// We use the digit/segment table to determine which
// pins on the MAX6921 to turn on
void setdisplay(uint8_t digit, uint8_t segments) {
    1bd8:	af 92       	push	r10
    1bda:	bf 92       	push	r11
    1bdc:	cf 92       	push	r12
    1bde:	df 92       	push	r13
    1be0:	ef 92       	push	r14
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	e6 2e       	mov	r14, r22
  uint32_t d = 0;  // we only need 20 bits but 32 will do
  uint8_t i;

  // Set the digit selection pin
  d |= _BV(pgm_read_byte(digittable + digit));
    1bee:	e8 2f       	mov	r30, r24
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	e8 59       	subi	r30, 0x98	; 152
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	e4 91       	lpm	r30, Z+
    1bf8:	21 e0       	ldi	r18, 0x01	; 1
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <_Z10setdisplayhh+0x2a>
    1bfe:	22 0f       	add	r18, r18
    1c00:	33 1f       	adc	r19, r19
    1c02:	ea 95       	dec	r30
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <_Z10setdisplayhh+0x26>
    1c06:	b9 01       	movw	r22, r18
    1c08:	88 27       	eor	r24, r24
    1c0a:	77 fd       	sbrc	r23, 7
    1c0c:	80 95       	com	r24
    1c0e:	98 2f       	mov	r25, r24
    1c10:	20 91 1d 02 	lds	r18, 0x021D
    1c14:	30 91 1e 02 	lds	r19, 0x021E
    1c18:	40 91 1f 02 	lds	r20, 0x021F
    1c1c:	50 91 20 02 	lds	r21, 0x0220
    1c20:	a0 e0       	ldi	r26, 0x00	; 0
    1c22:	b0 e0       	ldi	r27, 0x00	; 0

  
  // Set the individual segments for this digit
  for (i=0; i<8; i++) {
    if (segments & _BV(i)) {
    1c24:	ce 2d       	mov	r28, r14
    1c26:	d0 e0       	ldi	r29, 0x00	; 0
      t = 1;
      t <<= pgm_read_byte(segmenttable + i);
    1c28:	f1 e0       	ldi	r31, 0x01	; 1
    1c2a:	ef 2e       	mov	r14, r31
    1c2c:	f1 2c       	mov	r15, r1
    1c2e:	01 2d       	mov	r16, r1
    1c30:	11 2d       	mov	r17, r1
  d |= _BV(pgm_read_byte(digittable + digit));

  
  // Set the individual segments for this digit
  for (i=0; i<8; i++) {
    if (segments & _BV(i)) {
    1c32:	fe 01       	movw	r30, r28
    1c34:	0a 2e       	mov	r0, r26
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <_Z10setdisplayhh+0x64>
    1c38:	f5 95       	asr	r31
    1c3a:	e7 95       	ror	r30
    1c3c:	0a 94       	dec	r0
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <_Z10setdisplayhh+0x60>
    1c40:	e0 ff       	sbrs	r30, 0
    1c42:	13 c0       	rjmp	.+38     	; 0x1c6a <_Z10setdisplayhh+0x92>
      t = 1;
      t <<= pgm_read_byte(segmenttable + i);
    1c44:	fd 01       	movw	r30, r26
    1c46:	ef 58       	subi	r30, 0x8F	; 143
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	24 91       	lpm	r18, Z+
    1c4c:	57 01       	movw	r10, r14
    1c4e:	68 01       	movw	r12, r16
    1c50:	04 c0       	rjmp	.+8      	; 0x1c5a <_Z10setdisplayhh+0x82>
    1c52:	aa 0c       	add	r10, r10
    1c54:	bb 1c       	adc	r11, r11
    1c56:	cc 1c       	adc	r12, r12
    1c58:	dd 1c       	adc	r13, r13
    1c5a:	2a 95       	dec	r18
    1c5c:	d2 f7       	brpl	.-12     	; 0x1c52 <_Z10setdisplayhh+0x7a>
    1c5e:	a6 01       	movw	r20, r12
    1c60:	95 01       	movw	r18, r10
      d |= t;
    1c62:	6a 29       	or	r22, r10
    1c64:	7b 29       	or	r23, r11
    1c66:	8c 29       	or	r24, r12
    1c68:	9d 29       	or	r25, r13
    1c6a:	11 96       	adiw	r26, 0x01	; 1
  // Set the digit selection pin
  d |= _BV(pgm_read_byte(digittable + digit));

  
  // Set the individual segments for this digit
  for (i=0; i<8; i++) {
    1c6c:	a8 30       	cpi	r26, 0x08	; 8
    1c6e:	b1 05       	cpc	r27, r1
    1c70:	01 f7       	brne	.-64     	; 0x1c32 <_Z10setdisplayhh+0x5a>
    1c72:	20 93 1d 02 	sts	0x021D, r18
    1c76:	30 93 1e 02 	sts	0x021E, r19
    1c7a:	40 93 1f 02 	sts	0x021F, r20
    1c7e:	50 93 20 02 	sts	0x0220, r21
      d |= t;
    }
  }

  // Shift the data out to the display
  vfd_send(d);
    1c82:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <_Z8vfd_sendm>
}
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	1f 91       	pop	r17
    1c8c:	0f 91       	pop	r16
    1c8e:	ff 90       	pop	r15
    1c90:	ef 90       	pop	r14
    1c92:	df 90       	pop	r13
    1c94:	cf 90       	pop	r12
    1c96:	bf 90       	pop	r11
    1c98:	af 90       	pop	r10
    1c9a:	08 95       	ret

00001c9c <__vector_16>:
void pet_the_dog(void) {
  wdt_reset();
}

// called @ (F_CPU/256) = ~30khz (31.25 khz)
ISR(TIMER0_OVF_vect) {
    1c9c:	1f 92       	push	r1
    1c9e:	0f 92       	push	r0
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	0f 92       	push	r0
    1ca4:	11 24       	eor	r1, r1
    1ca6:	2f 93       	push	r18
    1ca8:	3f 93       	push	r19
    1caa:	4f 93       	push	r20
    1cac:	5f 93       	push	r21
    1cae:	6f 93       	push	r22
    1cb0:	7f 93       	push	r23
    1cb2:	8f 93       	push	r24
    1cb4:	9f 93       	push	r25
    1cb6:	af 93       	push	r26
    1cb8:	bf 93       	push	r27
    1cba:	ef 93       	push	r30
    1cbc:	ff 93       	push	r31
  // allow other interrupts to go off while we're doing display updates
  sei();
    1cbe:	78 94       	sei
  displaymode = SHOW_TIME;
}

// we reset the watchdog timer 
void pet_the_dog(void) {
  wdt_reset();
    1cc0:	a8 95       	wdr

  // kick the dog
  pet_the_dog();

  // divide down to 100Hz * digits
  muxdiv++;
    1cc2:	80 91 10 02 	lds	r24, 0x0210
    1cc6:	90 91 11 02 	lds	r25, 0x0211
    1cca:	01 96       	adiw	r24, 0x01	; 1
    1ccc:	90 93 11 02 	sts	0x0211, r25
    1cd0:	80 93 10 02 	sts	0x0210, r24
  if (muxdiv < MUX_DIVIDER)
    1cd4:	81 32       	cpi	r24, 0x21	; 33
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	08 f4       	brcc	.+2      	; 0x1cdc <__vector_16+0x40>
    1cda:	6c c0       	rjmp	.+216    	; 0x1db4 <__vector_16+0x118>
    return;
  muxdiv = 0;
    1cdc:	10 92 11 02 	sts	0x0211, r1
    1ce0:	10 92 10 02 	sts	0x0210, r1
  // now at 100Hz * digits

  // ok its not really 1ms but its like within 10% :)
  milliseconds++;
    1ce4:	80 91 16 02 	lds	r24, 0x0216
    1ce8:	90 91 17 02 	lds	r25, 0x0217
    1cec:	01 96       	adiw	r24, 0x01	; 1
    1cee:	90 93 17 02 	sts	0x0217, r25
    1cf2:	80 93 16 02 	sts	0x0216, r24

  // Cycle through each digit in the display
  if (currdigit >= DISPLAYSIZE)
    1cf6:	80 91 0f 02 	lds	r24, 0x020F
    1cfa:	89 30       	cpi	r24, 0x09	; 9
    1cfc:	10 f0       	brcs	.+4      	; 0x1d02 <__vector_16+0x66>
    currdigit = 0;
    1cfe:	10 92 0f 02 	sts	0x020F, r1

  // Set the current display's segments
  setdisplay(currdigit, display[currdigit]);
    1d02:	80 91 0f 02 	lds	r24, 0x020F
    1d06:	e8 2f       	mov	r30, r24
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	ea 5f       	subi	r30, 0xFA	; 250
    1d0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0e:	60 81       	ld	r22, Z
    1d10:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_Z10setdisplayhh>
  // and go to the next
  currdigit++;
    1d14:	80 91 0f 02 	lds	r24, 0x020F
    1d18:	8f 5f       	subi	r24, 0xFF	; 255
    1d1a:	80 93 0f 02 	sts	0x020F, r24

  // check if we should have the alarm on
  if (alarming && !snoozetimer) {
    1d1e:	80 91 ff 01 	lds	r24, 0x01FF
    1d22:	88 23       	and	r24, r24
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <__vector_16+0x8c>
    1d26:	46 c0       	rjmp	.+140    	; 0x1db4 <__vector_16+0x118>
    1d28:	80 91 14 02 	lds	r24, 0x0214
    1d2c:	90 91 15 02 	lds	r25, 0x0215
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <__vector_16+0x9a>
    1d34:	3f c0       	rjmp	.+126    	; 0x1db4 <__vector_16+0x118>
    alarmdiv++;
    1d36:	80 91 12 02 	lds	r24, 0x0212
    1d3a:	90 91 13 02 	lds	r25, 0x0213
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	90 93 13 02 	sts	0x0213, r25
    1d44:	80 93 12 02 	sts	0x0212, r24
    if (alarmdiv > ALARM_DIVIDER) {
    1d48:	85 36       	cpi	r24, 0x65	; 101
    1d4a:	91 05       	cpc	r25, r1
    1d4c:	98 f1       	brcs	.+102    	; 0x1db4 <__vector_16+0x118>
      alarmdiv = 0;
    1d4e:	10 92 13 02 	sts	0x0213, r1
    1d52:	10 92 12 02 	sts	0x0212, r1
      return;
    }
    // This part only gets reached at 1Hz

    // This sets the buzzer frequency
    ICR1 = 250;
    1d56:	8a ef       	ldi	r24, 0xFA	; 250
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	90 93 87 00 	sts	0x0087, r25
    1d5e:	80 93 86 00 	sts	0x0086, r24
    OCR1A = OCR1B = ICR1/2;
    1d62:	80 91 86 00 	lds	r24, 0x0086
    1d66:	90 91 87 00 	lds	r25, 0x0087
    1d6a:	96 95       	lsr	r25
    1d6c:	87 95       	ror	r24
    1d6e:	90 93 8b 00 	sts	0x008B, r25
    1d72:	80 93 8a 00 	sts	0x008A, r24
    1d76:	80 91 8a 00 	lds	r24, 0x008A
    1d7a:	90 91 8b 00 	lds	r25, 0x008B
    1d7e:	90 93 89 00 	sts	0x0089, r25
    1d82:	80 93 88 00 	sts	0x0088, r24

    // ok alarm is ringing!
    if (alarming & 0xF0) { // top bit indicates pulsing alarm state
    1d86:	80 91 ff 01 	lds	r24, 0x01FF
    1d8a:	80 7f       	andi	r24, 0xF0	; 240
    1d8c:	49 f0       	breq	.+18     	; 0x1da0 <__vector_16+0x104>
      alarming &= ~0xF0;
    1d8e:	80 91 ff 01 	lds	r24, 0x01FF
    1d92:	8f 70       	andi	r24, 0x0F	; 15
    1d94:	80 93 ff 01 	sts	0x01FF, r24
      TCCR1B &= ~_BV(CS11); // turn buzzer off!
    1d98:	80 91 81 00 	lds	r24, 0x0081
    1d9c:	8d 7f       	andi	r24, 0xFD	; 253
    1d9e:	08 c0       	rjmp	.+16     	; 0x1db0 <__vector_16+0x114>
    } else {
      alarming |= 0xF0;
    1da0:	80 91 ff 01 	lds	r24, 0x01FF
    1da4:	80 6f       	ori	r24, 0xF0	; 240
    1da6:	80 93 ff 01 	sts	0x01FF, r24
      TCCR1B |= _BV(CS11); // turn buzzer on!
    1daa:	80 91 81 00 	lds	r24, 0x0081
    1dae:	82 60       	ori	r24, 0x02	; 2
    1db0:	80 93 81 00 	sts	0x0081, r24
    }
  }
  
}
    1db4:	ff 91       	pop	r31
    1db6:	ef 91       	pop	r30
    1db8:	bf 91       	pop	r27
    1dba:	af 91       	pop	r26
    1dbc:	9f 91       	pop	r25
    1dbe:	8f 91       	pop	r24
    1dc0:	7f 91       	pop	r23
    1dc2:	6f 91       	pop	r22
    1dc4:	5f 91       	pop	r21
    1dc6:	4f 91       	pop	r20
    1dc8:	3f 91       	pop	r19
    1dca:	2f 91       	pop	r18
    1dcc:	0f 90       	pop	r0
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	0f 90       	pop	r0
    1dd2:	1f 90       	pop	r1
    1dd4:	18 95       	reti

00001dd6 <_Z10delay_10ush>:

void delay_10us(uint8_t ns)
{
  uint8_t i;
  
  while (ns != 0) {
    1dd6:	05 c0       	rjmp	.+10     	; 0x1de2 <_Z10delay_10ush+0xc>
    ns--;
    1dd8:	81 50       	subi	r24, 0x01	; 1
    1dda:	9e e1       	ldi	r25, 0x1E	; 30
    for (i=0; i< 30; i++) {
      NOP;
    1ddc:	00 00       	nop
    1dde:	91 50       	subi	r25, 0x01	; 1
{
  uint8_t i;
  
  while (ns != 0) {
    ns--;
    for (i=0; i< 30; i++) {
    1de0:	e9 f7       	brne	.-6      	; 0x1ddc <_Z10delay_10ush+0x6>

void delay_10us(uint8_t ns)
{
  uint8_t i;
  
  while (ns != 0) {
    1de2:	88 23       	and	r24, r24
    1de4:	c9 f7       	brne	.-14     	; 0x1dd8 <_Z10delay_10ush+0x2>
    ns--;
    for (i=0; i< 30; i++) {
      NOP;
    }
  }
}
    1de6:	08 95       	ret

00001de8 <_Z7delay_sh>:

void delay_s(uint8_t s) {
  while (s--) {
    1de8:	0a c0       	rjmp	.+20     	; 0x1dfe <_Z7delay_sh+0x16>
    1dea:	2f ef       	ldi	r18, 0xFF	; 255
    1dec:	39 e6       	ldi	r19, 0x69	; 105
    1dee:	48 e1       	ldi	r20, 0x18	; 24
    1df0:	21 50       	subi	r18, 0x01	; 1
    1df2:	30 40       	sbci	r19, 0x00	; 0
    1df4:	40 40       	sbci	r20, 0x00	; 0
    1df6:	e1 f7       	brne	.-8      	; 0x1df0 <_Z7delay_sh+0x8>
    1df8:	00 c0       	rjmp	.+0      	; 0x1dfa <_Z7delay_sh+0x12>
    1dfa:	00 00       	nop
    1dfc:	81 50       	subi	r24, 0x01	; 1
    1dfe:	88 23       	and	r24, r24
    1e00:	a1 f7       	brne	.-24     	; 0x1dea <_Z7delay_sh+0x2>
    _delay_ms(1000);
  }
}
    1e02:	08 95       	ret

00001e04 <_Z9uart_initj>:

void uart_init(uint16_t BRR) {
  /* setup the main UART */
  UBRR0 = BRR;               // set baudrate counter
    1e04:	90 93 c5 00 	sts	0x00C5, r25
    1e08:	80 93 c4 00 	sts	0x00C4, r24

  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    1e0c:	88 e1       	ldi	r24, 0x18	; 24
    1e0e:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(USBS0) | (3<<UCSZ00);
    1e12:	8e e0       	ldi	r24, 0x0E	; 14
    1e14:	80 93 c2 00 	sts	0x00C2, r24
  DDRD |= _BV(PD1);
    1e18:	51 9a       	sbi	0x0a, 1	; 10
  DDRD &= ~_BV(PD0);
    1e1a:	50 98       	cbi	0x0a, 0	; 10

}
    1e1c:	08 95       	ret

00001e1e <_Z12uart_putcharc>:

int uart_putchar(char c)
{
  loop_until_bit_is_set(UCSR0A, UDRE0);
    1e1e:	90 91 c0 00 	lds	r25, 0x00C0
    1e22:	95 ff       	sbrs	r25, 5
    1e24:	fc cf       	rjmp	.-8      	; 0x1e1e <_Z12uart_putcharc>
  UDR0 = c;
    1e26:	80 93 c6 00 	sts	0x00C6, r24
  return 0;
}
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	08 95       	ret

00001e30 <_Z12uart_getcharv>:

char uart_getchar(void) {
	while (!(UCSR0A & _BV(RXC0)));
    1e30:	80 91 c0 00 	lds	r24, 0x00C0
    1e34:	87 ff       	sbrs	r24, 7
    1e36:	fc cf       	rjmp	.-8      	; 0x1e30 <_Z12uart_getcharv>
	return UDR0;
    1e38:	80 91 c6 00 	lds	r24, 0x00C6
}
    1e3c:	08 95       	ret

00001e3e <_Z10uart_getchv>:

char uart_getch(void) {
	return (UCSR0A & _BV(RXC0));
    1e3e:	80 91 c0 00 	lds	r24, 0x00C0
}
    1e42:	80 78       	andi	r24, 0x80	; 128
    1e44:	08 95       	ret

00001e46 <_Z13ROM_putstringPKch>:

void ROM_putstring(const char *str, uint8_t nl) {
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	1f 93       	push	r17
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	0f 92       	push	r0
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	7c 01       	movw	r14, r24
    uint8_t i;

    for (i=0; pgm_read_byte(&str[i]); i++) {
    1e58:	10 e0       	ldi	r17, 0x00	; 0
    1e5a:	05 c0       	rjmp	.+10     	; 0x1e66 <_Z13ROM_putstringPKch+0x20>
        uart_putchar(pgm_read_byte(&str[i]));
    1e5c:	69 83       	std	Y+1, r22	; 0x01
    1e5e:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z12uart_putcharc>
}

void ROM_putstring(const char *str, uint8_t nl) {
    uint8_t i;

    for (i=0; pgm_read_byte(&str[i]); i++) {
    1e62:	1f 5f       	subi	r17, 0xFF	; 255
    1e64:	69 81       	ldd	r22, Y+1	; 0x01
    1e66:	f7 01       	movw	r30, r14
    1e68:	e1 0f       	add	r30, r17
    1e6a:	f1 1d       	adc	r31, r1
    1e6c:	84 91       	lpm	r24, Z+
    1e6e:	88 23       	and	r24, r24
    1e70:	a9 f7       	brne	.-22     	; 0x1e5c <_Z13ROM_putstringPKch+0x16>
        uart_putchar(pgm_read_byte(&str[i]));
  }
  if (nl) {
    1e72:	66 23       	and	r22, r22
    1e74:	31 f0       	breq	.+12     	; 0x1e82 <_Z13ROM_putstringPKch+0x3c>
        uart_putchar('\n'); uart_putchar('\r');
    1e76:	8a e0       	ldi	r24, 0x0A	; 10
    1e78:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z12uart_putcharc>
    1e7c:	8d e0       	ldi	r24, 0x0D	; 13
    1e7e:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z12uart_putcharc>
  }
}
    1e82:	0f 90       	pop	r0
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	1f 91       	pop	r17
    1e8a:	ff 90       	pop	r15
    1e8c:	ef 90       	pop	r14
    1e8e:	08 95       	ret

00001e90 <_Z9uart_putsPKc>:

void uart_puts(const char* str)
{
    1e90:	ef 92       	push	r14
    1e92:	ff 92       	push	r15
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	e8 2e       	mov	r14, r24
    1e9a:	e7 01       	movw	r28, r14
    1e9c:	7e 01       	movw	r14, r28
    1e9e:	f9 2e       	mov	r15, r25
    1ea0:	e7 01       	movw	r28, r14
    while(*str)
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <_Z9uart_putsPKc+0x18>
        uart_putc(*str++);
    1ea4:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z12uart_putcharc>
  }
}

void uart_puts(const char* str)
{
    while(*str)
    1ea8:	89 91       	ld	r24, Y+
    1eaa:	88 23       	and	r24, r24
    1eac:	d9 f7       	brne	.-10     	; 0x1ea4 <_Z9uart_putsPKc+0x14>
        uart_putc(*str++);
}
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	ff 90       	pop	r15
    1eb4:	ef 90       	pop	r14
    1eb6:	08 95       	ret

00001eb8 <_Z13uart_putc_hexh>:


void uart_putc_hex(uint8_t b)
{
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	18 2f       	mov	r17, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
    1ec0:	c8 2f       	mov	r28, r24
    1ec2:	d0 e0       	ldi	r29, 0x00	; 0
    1ec4:	9e 01       	movw	r18, r28
    1ec6:	84 e0       	ldi	r24, 0x04	; 4
    1ec8:	35 95       	asr	r19
    1eca:	27 95       	ror	r18
    1ecc:	8a 95       	dec	r24
    1ece:	e1 f7       	brne	.-8      	; 0x1ec8 <_Z13uart_putc_hexh+0x10>
    1ed0:	2a 30       	cpi	r18, 0x0A	; 10
    1ed2:	31 05       	cpc	r19, r1
    1ed4:	1c f4       	brge	.+6      	; 0x1edc <_Z13uart_putc_hexh+0x24>
        uart_putc((b >> 4) + '0');
    1ed6:	82 2f       	mov	r24, r18
    1ed8:	80 5d       	subi	r24, 0xD0	; 208
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <_Z13uart_putc_hexh+0x28>
    else
        uart_putc((b >> 4) - 0x0a + 'a');
    1edc:	82 2f       	mov	r24, r18
    1ede:	89 5a       	subi	r24, 0xA9	; 169
    1ee0:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z12uart_putcharc>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
    1ee4:	cf 70       	andi	r28, 0x0F	; 15
    1ee6:	d0 70       	andi	r29, 0x00	; 0
    1ee8:	81 2f       	mov	r24, r17
    1eea:	8f 70       	andi	r24, 0x0F	; 15
    1eec:	ca 30       	cpi	r28, 0x0A	; 10
    1eee:	d1 05       	cpc	r29, r1
    1ef0:	14 f4       	brge	.+4      	; 0x1ef6 <_Z13uart_putc_hexh+0x3e>
        uart_putc((b & 0x0f) + '0');
    1ef2:	80 5d       	subi	r24, 0xD0	; 208
    1ef4:	01 c0       	rjmp	.+2      	; 0x1ef8 <_Z13uart_putc_hexh+0x40>
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
    1ef6:	89 5a       	subi	r24, 0xA9	; 169
    1ef8:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z12uart_putcharc>
}
    1efc:	df 91       	pop	r29
    1efe:	cf 91       	pop	r28
    1f00:	1f 91       	pop	r17
    1f02:	08 95       	ret

00001f04 <_Z13uart_putw_hexj>:

void uart_putw_hex(uint16_t w)
{
    1f04:	1f 93       	push	r17
    1f06:	18 2f       	mov	r17, r24
    uart_putc_hex((uint8_t) (w >> 8));
    1f08:	89 2f       	mov	r24, r25
    1f0a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <_Z13uart_putc_hexh>
    uart_putc_hex((uint8_t) (w & 0xff));
    1f0e:	81 2f       	mov	r24, r17
    1f10:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <_Z13uart_putc_hexh>
}
    1f14:	1f 91       	pop	r17
    1f16:	08 95       	ret

00001f18 <_Z14uart_putdw_hexm>:

void uart_putdw_hex(uint32_t dw)
{
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	7b 01       	movw	r14, r22
    1f22:	8c 01       	movw	r16, r24
    uart_putw_hex((uint16_t) (dw >> 16));
    1f24:	c8 01       	movw	r24, r16
    1f26:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_Z13uart_putw_hexj>
    uart_putw_hex((uint16_t) (dw & 0xffff));
    1f2a:	c7 01       	movw	r24, r14
    1f2c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_Z13uart_putw_hexj>
}
    1f30:	1f 91       	pop	r17
    1f32:	0f 91       	pop	r16
    1f34:	ff 90       	pop	r15
    1f36:	ef 90       	pop	r14
    1f38:	08 95       	ret

00001f3a <_Z13uart_putw_decj>:

void uart_putw_dec(uint16_t w)
{
    1f3a:	af 92       	push	r10
    1f3c:	bf 92       	push	r11
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	8c 01       	movw	r16, r24
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;

        num /= 10;
    1f50:	25 e0       	ldi	r18, 0x05	; 5
    1f52:	e2 2e       	mov	r14, r18
    1f54:	f1 2c       	mov	r15, r1
}

void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    uart_putw_hex((uint16_t) (dw & 0xffff));
}

void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    1f58:	c0 e1       	ldi	r28, 0x10	; 16
    1f5a:	d7 e2       	ldi	r29, 0x27	; 39
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;

        num /= 10;
    1f5c:	9a e0       	ldi	r25, 0x0A	; 10
    1f5e:	c9 2e       	mov	r12, r25
    1f60:	d1 2c       	mov	r13, r1
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
    1f62:	c8 01       	movw	r24, r16
    1f64:	be 01       	movw	r22, r28
    1f66:	0e 94 76 10 	call	0x20ec	; 0x20ec <__udivmodhi4>
    1f6a:	b6 2e       	mov	r11, r22
        if(b > 0 || started || num == 1)
    1f6c:	66 23       	and	r22, r22
    1f6e:	29 f4       	brne	.+10     	; 0x1f7a <_Z13uart_putw_decj+0x40>
    1f70:	22 23       	and	r18, r18
    1f72:	19 f4       	brne	.+6      	; 0x1f7a <_Z13uart_putw_decj+0x40>
    1f74:	c1 30       	cpi	r28, 0x01	; 1
    1f76:	d1 05       	cpc	r29, r1
    1f78:	29 f4       	brne	.+10     	; 0x1f84 <_Z13uart_putw_decj+0x4a>
        {
            uart_putc('0' + b);
    1f7a:	8b 2d       	mov	r24, r11
    1f7c:	80 5d       	subi	r24, 0xD0	; 208
    1f7e:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z12uart_putcharc>
            started = 1;
    1f82:	21 e0       	ldi	r18, 0x01	; 1
        }
        w -= b * num;

        num /= 10;
    1f84:	ce 01       	movw	r24, r28
    1f86:	b6 01       	movw	r22, r12
    1f88:	0e 94 76 10 	call	0x20ec	; 0x20ec <__udivmodhi4>
    1f8c:	08 94       	sec
    1f8e:	e1 08       	sbc	r14, r1
    1f90:	f1 08       	sbc	r15, r1
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    1f92:	e1 14       	cp	r14, r1
    1f94:	f1 04       	cpc	r15, r1
    1f96:	89 f0       	breq	.+34     	; 0x1fba <_Z13uart_putw_decj+0x80>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;
    1f98:	4b 2d       	mov	r20, r11
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	4c 9f       	mul	r20, r28
    1f9e:	c0 01       	movw	r24, r0
    1fa0:	4d 9f       	mul	r20, r29
    1fa2:	90 0d       	add	r25, r0
    1fa4:	5c 9f       	mul	r21, r28
    1fa6:	90 0d       	add	r25, r0
    1fa8:	11 24       	eor	r1, r1
    1faa:	08 1b       	sub	r16, r24
    1fac:	19 0b       	sbc	r17, r25

        num /= 10;
    1fae:	a6 2e       	mov	r10, r22
    1fb0:	e5 01       	movw	r28, r10
    1fb2:	5e 01       	movw	r10, r28
    1fb4:	b7 2e       	mov	r11, r23
    1fb6:	e5 01       	movw	r28, r10
    1fb8:	d4 cf       	rjmp	.-88     	; 0x1f62 <_Z13uart_putw_decj+0x28>
    }
}
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	ff 90       	pop	r15
    1fc4:	ef 90       	pop	r14
    1fc6:	df 90       	pop	r13
    1fc8:	cf 90       	pop	r12
    1fca:	bf 90       	pop	r11
    1fcc:	af 90       	pop	r10
    1fce:	08 95       	ret

00001fd0 <_Z14uart_putdw_decm>:

void uart_putdw_dec(uint32_t dw)
{
    1fd0:	4f 92       	push	r4
    1fd2:	5f 92       	push	r5
    1fd4:	6f 92       	push	r6
    1fd6:	7f 92       	push	r7
    1fd8:	8f 92       	push	r8
    1fda:	9f 92       	push	r9
    1fdc:	af 92       	push	r10
    1fde:	bf 92       	push	r11
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	5b 01       	movw	r10, r22
    1ff2:	6c 01       	movw	r12, r24
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;

        num /= 10;
    1ff4:	ca e0       	ldi	r28, 0x0A	; 10
    1ff6:	d0 e0       	ldi	r29, 0x00	; 0
}

void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;
    1ff8:	44 24       	eor	r4, r4
    }
}

void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    1ffa:	e1 2c       	mov	r14, r1
    1ffc:	3a ec       	ldi	r19, 0xCA	; 202
    1ffe:	f3 2e       	mov	r15, r19
    2000:	3a e9       	ldi	r19, 0x9A	; 154
    2002:	03 2f       	mov	r16, r19
    2004:	3b e3       	ldi	r19, 0x3B	; 59
    2006:	13 2f       	mov	r17, r19
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
    2008:	c6 01       	movw	r24, r12
    200a:	b5 01       	movw	r22, r10
    200c:	a8 01       	movw	r20, r16
    200e:	97 01       	movw	r18, r14
    2010:	0e 94 9d 10 	call	0x213a	; 0x213a <__udivmodsi4>
    2014:	92 2e       	mov	r9, r18
        if(b > 0 || started || num == 1)
    2016:	22 23       	and	r18, r18
    2018:	41 f4       	brne	.+16     	; 0x202a <_Z14uart_putdw_decm+0x5a>
    201a:	44 20       	and	r4, r4
    201c:	31 f4       	brne	.+12     	; 0x202a <_Z14uart_putdw_decm+0x5a>
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	e8 16       	cp	r14, r24
    2022:	f1 04       	cpc	r15, r1
    2024:	01 05       	cpc	r16, r1
    2026:	11 05       	cpc	r17, r1
    2028:	31 f4       	brne	.+12     	; 0x2036 <_Z14uart_putdw_decm+0x66>
        {
            uart_putc('0' + b);
    202a:	89 2d       	mov	r24, r9
    202c:	80 5d       	subi	r24, 0xD0	; 208
    202e:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <_Z12uart_putcharc>
            started = 1;
    2032:	44 24       	eor	r4, r4
    2034:	43 94       	inc	r4
        }
        dw -= b * num;

        num /= 10;
    2036:	c8 01       	movw	r24, r16
    2038:	b7 01       	movw	r22, r14
    203a:	2a e0       	ldi	r18, 0x0A	; 10
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	0e 94 9d 10 	call	0x213a	; 0x213a <__udivmodsi4>
    2046:	82 2e       	mov	r8, r18
    2048:	73 2e       	mov	r7, r19
    204a:	64 2e       	mov	r6, r20
    204c:	55 2e       	mov	r5, r21
    204e:	21 97       	sbiw	r28, 0x01	; 1
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    2050:	89 f0       	breq	.+34     	; 0x2074 <_Z14uart_putdw_decm+0xa4>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;
    2052:	69 2d       	mov	r22, r9
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a8 01       	movw	r20, r16
    205c:	97 01       	movw	r18, r14
    205e:	0e 94 4b 10 	call	0x2096	; 0x2096 <__mulsi3>
    2062:	a6 1a       	sub	r10, r22
    2064:	b7 0a       	sbc	r11, r23
    2066:	c8 0a       	sbc	r12, r24
    2068:	d9 0a       	sbc	r13, r25

        num /= 10;
    206a:	e8 2c       	mov	r14, r8
    206c:	f7 2c       	mov	r15, r7
    206e:	06 2d       	mov	r16, r6
    2070:	15 2d       	mov	r17, r5
    2072:	ca cf       	rjmp	.-108    	; 0x2008 <_Z14uart_putdw_decm+0x38>
    }
}
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	1f 91       	pop	r17
    207a:	0f 91       	pop	r16
    207c:	ff 90       	pop	r15
    207e:	ef 90       	pop	r14
    2080:	df 90       	pop	r13
    2082:	cf 90       	pop	r12
    2084:	bf 90       	pop	r11
    2086:	af 90       	pop	r10
    2088:	9f 90       	pop	r9
    208a:	8f 90       	pop	r8
    208c:	7f 90       	pop	r7
    208e:	6f 90       	pop	r6
    2090:	5f 90       	pop	r5
    2092:	4f 90       	pop	r4
    2094:	08 95       	ret

00002096 <__mulsi3>:
    2096:	62 9f       	mul	r22, r18
    2098:	d0 01       	movw	r26, r0
    209a:	73 9f       	mul	r23, r19
    209c:	f0 01       	movw	r30, r0
    209e:	82 9f       	mul	r24, r18
    20a0:	e0 0d       	add	r30, r0
    20a2:	f1 1d       	adc	r31, r1
    20a4:	64 9f       	mul	r22, r20
    20a6:	e0 0d       	add	r30, r0
    20a8:	f1 1d       	adc	r31, r1
    20aa:	92 9f       	mul	r25, r18
    20ac:	f0 0d       	add	r31, r0
    20ae:	83 9f       	mul	r24, r19
    20b0:	f0 0d       	add	r31, r0
    20b2:	74 9f       	mul	r23, r20
    20b4:	f0 0d       	add	r31, r0
    20b6:	65 9f       	mul	r22, r21
    20b8:	f0 0d       	add	r31, r0
    20ba:	99 27       	eor	r25, r25
    20bc:	72 9f       	mul	r23, r18
    20be:	b0 0d       	add	r27, r0
    20c0:	e1 1d       	adc	r30, r1
    20c2:	f9 1f       	adc	r31, r25
    20c4:	63 9f       	mul	r22, r19
    20c6:	b0 0d       	add	r27, r0
    20c8:	e1 1d       	adc	r30, r1
    20ca:	f9 1f       	adc	r31, r25
    20cc:	bd 01       	movw	r22, r26
    20ce:	cf 01       	movw	r24, r30
    20d0:	11 24       	eor	r1, r1
    20d2:	08 95       	ret

000020d4 <__udivmodqi4>:
    20d4:	99 1b       	sub	r25, r25
    20d6:	79 e0       	ldi	r23, 0x09	; 9
    20d8:	04 c0       	rjmp	.+8      	; 0x20e2 <__udivmodqi4_ep>

000020da <__udivmodqi4_loop>:
    20da:	99 1f       	adc	r25, r25
    20dc:	96 17       	cp	r25, r22
    20de:	08 f0       	brcs	.+2      	; 0x20e2 <__udivmodqi4_ep>
    20e0:	96 1b       	sub	r25, r22

000020e2 <__udivmodqi4_ep>:
    20e2:	88 1f       	adc	r24, r24
    20e4:	7a 95       	dec	r23
    20e6:	c9 f7       	brne	.-14     	; 0x20da <__udivmodqi4_loop>
    20e8:	80 95       	com	r24
    20ea:	08 95       	ret

000020ec <__udivmodhi4>:
    20ec:	aa 1b       	sub	r26, r26
    20ee:	bb 1b       	sub	r27, r27
    20f0:	51 e1       	ldi	r21, 0x11	; 17
    20f2:	07 c0       	rjmp	.+14     	; 0x2102 <__udivmodhi4_ep>

000020f4 <__udivmodhi4_loop>:
    20f4:	aa 1f       	adc	r26, r26
    20f6:	bb 1f       	adc	r27, r27
    20f8:	a6 17       	cp	r26, r22
    20fa:	b7 07       	cpc	r27, r23
    20fc:	10 f0       	brcs	.+4      	; 0x2102 <__udivmodhi4_ep>
    20fe:	a6 1b       	sub	r26, r22
    2100:	b7 0b       	sbc	r27, r23

00002102 <__udivmodhi4_ep>:
    2102:	88 1f       	adc	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	5a 95       	dec	r21
    2108:	a9 f7       	brne	.-22     	; 0x20f4 <__udivmodhi4_loop>
    210a:	80 95       	com	r24
    210c:	90 95       	com	r25
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	08 95       	ret

00002114 <__divmodhi4>:
    2114:	97 fb       	bst	r25, 7
    2116:	09 2e       	mov	r0, r25
    2118:	07 26       	eor	r0, r23
    211a:	0a d0       	rcall	.+20     	; 0x2130 <__divmodhi4_neg1>
    211c:	77 fd       	sbrc	r23, 7
    211e:	04 d0       	rcall	.+8      	; 0x2128 <__divmodhi4_neg2>
    2120:	e5 df       	rcall	.-54     	; 0x20ec <__udivmodhi4>
    2122:	06 d0       	rcall	.+12     	; 0x2130 <__divmodhi4_neg1>
    2124:	00 20       	and	r0, r0
    2126:	1a f4       	brpl	.+6      	; 0x212e <__divmodhi4_exit>

00002128 <__divmodhi4_neg2>:
    2128:	70 95       	com	r23
    212a:	61 95       	neg	r22
    212c:	7f 4f       	sbci	r23, 0xFF	; 255

0000212e <__divmodhi4_exit>:
    212e:	08 95       	ret

00002130 <__divmodhi4_neg1>:
    2130:	f6 f7       	brtc	.-4      	; 0x212e <__divmodhi4_exit>
    2132:	90 95       	com	r25
    2134:	81 95       	neg	r24
    2136:	9f 4f       	sbci	r25, 0xFF	; 255
    2138:	08 95       	ret

0000213a <__udivmodsi4>:
    213a:	a1 e2       	ldi	r26, 0x21	; 33
    213c:	1a 2e       	mov	r1, r26
    213e:	aa 1b       	sub	r26, r26
    2140:	bb 1b       	sub	r27, r27
    2142:	fd 01       	movw	r30, r26
    2144:	0d c0       	rjmp	.+26     	; 0x2160 <__udivmodsi4_ep>

00002146 <__udivmodsi4_loop>:
    2146:	aa 1f       	adc	r26, r26
    2148:	bb 1f       	adc	r27, r27
    214a:	ee 1f       	adc	r30, r30
    214c:	ff 1f       	adc	r31, r31
    214e:	a2 17       	cp	r26, r18
    2150:	b3 07       	cpc	r27, r19
    2152:	e4 07       	cpc	r30, r20
    2154:	f5 07       	cpc	r31, r21
    2156:	20 f0       	brcs	.+8      	; 0x2160 <__udivmodsi4_ep>
    2158:	a2 1b       	sub	r26, r18
    215a:	b3 0b       	sbc	r27, r19
    215c:	e4 0b       	sbc	r30, r20
    215e:	f5 0b       	sbc	r31, r21

00002160 <__udivmodsi4_ep>:
    2160:	66 1f       	adc	r22, r22
    2162:	77 1f       	adc	r23, r23
    2164:	88 1f       	adc	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	1a 94       	dec	r1
    216a:	69 f7       	brne	.-38     	; 0x2146 <__udivmodsi4_loop>
    216c:	60 95       	com	r22
    216e:	70 95       	com	r23
    2170:	80 95       	com	r24
    2172:	90 95       	com	r25
    2174:	9b 01       	movw	r18, r22
    2176:	ac 01       	movw	r20, r24
    2178:	bd 01       	movw	r22, r26
    217a:	cf 01       	movw	r24, r30
    217c:	08 95       	ret

0000217e <__divmodsi4>:
    217e:	97 fb       	bst	r25, 7
    2180:	09 2e       	mov	r0, r25
    2182:	05 26       	eor	r0, r21
    2184:	0e d0       	rcall	.+28     	; 0x21a2 <__divmodsi4_neg1>
    2186:	57 fd       	sbrc	r21, 7
    2188:	04 d0       	rcall	.+8      	; 0x2192 <__divmodsi4_neg2>
    218a:	d7 df       	rcall	.-82     	; 0x213a <__udivmodsi4>
    218c:	0a d0       	rcall	.+20     	; 0x21a2 <__divmodsi4_neg1>
    218e:	00 1c       	adc	r0, r0
    2190:	38 f4       	brcc	.+14     	; 0x21a0 <__divmodsi4_exit>

00002192 <__divmodsi4_neg2>:
    2192:	50 95       	com	r21
    2194:	40 95       	com	r20
    2196:	30 95       	com	r19
    2198:	21 95       	neg	r18
    219a:	3f 4f       	sbci	r19, 0xFF	; 255
    219c:	4f 4f       	sbci	r20, 0xFF	; 255
    219e:	5f 4f       	sbci	r21, 0xFF	; 255

000021a0 <__divmodsi4_exit>:
    21a0:	08 95       	ret

000021a2 <__divmodsi4_neg1>:
    21a2:	f6 f7       	brtc	.-4      	; 0x21a0 <__divmodsi4_exit>
    21a4:	90 95       	com	r25
    21a6:	80 95       	com	r24
    21a8:	70 95       	com	r23
    21aa:	61 95       	neg	r22
    21ac:	7f 4f       	sbci	r23, 0xFF	; 255
    21ae:	8f 4f       	sbci	r24, 0xFF	; 255
    21b0:	9f 4f       	sbci	r25, 0xFF	; 255
    21b2:	08 95       	ret

000021b4 <__eerd_byte_m328p>:
    21b4:	f9 99       	sbic	0x1f, 1	; 31
    21b6:	fe cf       	rjmp	.-4      	; 0x21b4 <__eerd_byte_m328p>
    21b8:	92 bd       	out	0x22, r25	; 34
    21ba:	81 bd       	out	0x21, r24	; 33
    21bc:	f8 9a       	sbi	0x1f, 0	; 31
    21be:	99 27       	eor	r25, r25
    21c0:	80 b5       	in	r24, 0x20	; 32
    21c2:	08 95       	ret

000021c4 <__eewr_byte_m328p>:
    21c4:	26 2f       	mov	r18, r22

000021c6 <__eewr_r18_m328p>:
    21c6:	f9 99       	sbic	0x1f, 1	; 31
    21c8:	fe cf       	rjmp	.-4      	; 0x21c6 <__eewr_r18_m328p>
    21ca:	1f ba       	out	0x1f, r1	; 31
    21cc:	92 bd       	out	0x22, r25	; 34
    21ce:	81 bd       	out	0x21, r24	; 33
    21d0:	20 bd       	out	0x20, r18	; 32
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	fa 9a       	sbi	0x1f, 2	; 31
    21d8:	f9 9a       	sbi	0x1f, 1	; 31
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	08 95       	ret

000021e0 <_exit>:
    21e0:	f8 94       	cli

000021e2 <__stop_program>:
    21e2:	ff cf       	rjmp	.-2      	; 0x21e2 <__stop_program>
