##################
## xmas-icetube ##
##################

My father gave me an Ice Tube Clock kit from Adafruit as a Christmas gift last
year.  As an excuse to learn AVR programming, I started playing with the
software.  Eventually, none of the original code remained and the project
became a feature-rich reimplementation of the original Adafruit firmware.

  John Archie <www.jarchie.com>
  December 27, 2012


##############
## Features ##
##############

Many of the features in the xmas-icetube firmware were first implemented in
other firmware projects; see the CREDITS file for details.  The features of
this firmware include

  - multiple time and date formats,
  - three alarms by time and days of the week,
  - fine adjustment of alarm volume,
  - progressive alarm option (gradually increasing volume),
  - multiple alarm sounds (beeps, Merry Christmas, Big Ben, or Reveille),
  - adjustable snooze time,
  - DST support (USA, EU, or manual),
  - fully automatic correction for time drift,
  - time-from-GPS support,*
  - alarm sounds during power outage,**
  - no beeping or time loss after power failure,
  - 25-fold increase in battery life,*
  - per-digit brightness control,
  - automatic brightness control by ambient light,*
  - optionally disable display at night (when dark),*
  - animated display transitions,
  - display pulsing during alarm and snooze

*  These hacks require hardware modification and support must be enabled by
   uncommenting macros in config.h .  See config.h for more information.

** The snooze feature, musical alarm, and progressive alarm, are automatically
   disabled during a power failure.  While on battery power, the buzzer alarm
   sounds at the menu-settable maximum volume and the alarm can only be enabled
   or disabled via the alarm on/off switch.  All other inputs are ignored until
   power is restored.


For Ice Tube Clock hackers, this firmware has

    (1) compatibility with the atmega328p,
    (2) a pseudo object-oriented design,
    (3) reasonably good commenting, and
    (4) display/menus by finite state machine.


##################
## Installation ##
##################

Installation requires GNU Make, avr-libc, avr-gcc, and avrdude;
the instructions below presume proficiency with these tools.

In regard to hardware, this Makefile is setup to build and install the firmware
for the Adafruit Ice Tube Clock with an ATmega328P.  Unfortunately, this
firmware is currently too large to work on the ATmega168V.  Programming has
been tested with the Adafruit USBtinyISP, but other controllers should also
work (in theory).

In regard to software, compilation and installation seems to work under

    (a) Ubuntu Linux 12.04 with the avr-gcc and avrdude packages,
    (b) Mac OS 10.6 with MacPorts' avr-gcc and avrdude packages, and
    (c) Windows 7 with WinAVR and Cygwin's perl and bash packages.

To compile and install this firmware, edit and use the provided Makefile:

(1) Edit the Configuration Variables

    First, review the macro definitions in config.h, changing macro
    definitions as needed to enable support for various hardware hacks.

    Next, review the Makefile to ensure that configuration variables
    are reasonable given your hardware.  In particular, AVRMCU, AVRISP,
    and AVRDUDEOPT seem most likely to require attention.

(2) Compile the Firmware

    Build icetube.elf, icetube_eeprom.hex, which contain
    the firmware and initial EEPROM contents:

	% make

(3) Install the Firmware

    Write the new fuse bits, which *do* differ from those in the original
    Adafruit firmware:

	% make install-fuse

    Finally, upload the compiled firmware and initial EEPROM contents:

	% make install
